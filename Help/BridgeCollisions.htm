<HTML><HEAD><TITLE>Bridge Collisions</TITLE></HEAD>
<BODY TEXT=#000000 BGCOLOR=#FFFFC0 LINK=#0000FF ALINK=#0000FF VLINK=#000080> 
<BASEFONT SIZE=3>
<FONT COLOR=#FF0000>
<CENTER><H1>Bridge Collisions</H1></CENTER></FONT>
<B><A HREF="#LINK1">The basics: Bridges and dummy triggers</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK2">Triggering the Bridge with a condition trigger</A> <BR>
<A HREF="#LINK3">The Conditions: Fragmented triggers</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK4">Grid Types</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK5">Circle Types</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK6">Triangle and Quadrilateral Types</A> <BR>
<A HREF="#LINK7">Limits and chances of the condition triggers</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK8">Mixing Conditions to get new Shapes</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK9">Mixing with AND operator</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK10">Mixing with OR operator</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK11">Mixing composite: all operators, AND,  OR and NOT</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK12">Using the correct sorting of operators</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK13">The Operators Priority in TRNG</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK29">Too slim collisions</A> <BR>
<A HREF="#LINK14">The Bridge Objects</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK15">New Bridge Objects</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK16">The custom Bridge</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK17">Customizing the new Bridge Objects: the OCB values</A> <BR>
<A HREF="#LINK18">The planning with the framework bridges</A> <BR>
<A HREF="#LINK19">Bridges in depth: simulating the collisions of the Statics</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK20">Align the surface with some ideal bridge position</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK22">The overloading of the bridge triggers</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK21">The floor data triggers</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK23">Parsing the trigger to compute the collisions</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK25">Parsing the triggers for the game planning</A> <BR>
<A HREF="#LINK24">About the Miscellanous II demo project</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK26">The Depth factor</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK27">Decoding the Bridge OCBs</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK28">A bug or a chance?</A> <BR>
 <A NAME="LINK1"></A> <BR>
<BR><HR WIDTH=90%><BR><FONT COLOR=#FF0000><CENTER><H2>The basics: Bridges and dummy triggers</H2></CENTER></FONT>In the Level Editor you can create a hanging footbridge using the specific object BRIDGE_FLAT triggered with a DUMMY trigger.<BR>
<BR>
 <IMG SRC="Screen_0001.gif" VSPACE=12 ALIGN="CENTER"><BR>
 <BR>
  <BR>
However, many time ago,  it has been discovered that it's not necessary that we use a DUMMY trigger, we could get same result using a common TRIGGER activation.<BR>
<A NAME="LINK2"></A><BR>
<FONT COLOR=#FF0000><H3>Triggering the Bridge with a condition trigger</H3></FONT>But what happen when we place also a CONDITION trigger in same sector where we placed the TRIGGER for the bridge? In previous versions, nothing of interesting: the bridge was always enabled ignoring the response of the condition, but from the 1.2.2.4 dll version, the engine will check the condition trigger and, therefore,  the other common trigger for the bridge will be performed or less in according with the response of the condition trigger.<BR>
Thank to this new feature we can create footbridges with irregular shape, where for "irregular" we mean not always the usual game square.<BR>
For example if we place in same game sector a condition trigger like this:<BR>
<BR>
; Set Trigger Type - CONDITION 6<BR>
; Exporting: CONDITION(6:62) for PARAMETER(5)<BR>
; &lt;#&gt; : Square fragment (1,1)<BR>
; &lt;&&gt; : Fragmented trigger. Check in (E) way if lara is in &lt;#&gt;fragment of 2x2 sector grid<BR>
; (E) : DEFAULT. Lara is over current #fragment<BR>
<BR>
 <IMG SRC="little_square.gif"  VSPACE=10 HSPACE=15 ALIGN="LEFT">  <BR>
The condition will be true only when lara is over the square that is a 1/4 of the original game sector, in the specific way when she is in the top-left little square of the game sector.<BR>
Well, if we place also the BRIDGE object and the trigger for this item, what will it happen when lara is in the top-left little square?<BR>
Answer: She will remain over the bridge object.<BR>
But when she is outside of that little top-left square, what will it happen?<BR CLEAR=LEFT><BR>
 <IMG SRC="little_bridge.gif" VSPACE=12 ALIGN="CENTER"><BR>
 <BR>
Simply the bridge will be not enabled and so lara will fall down because it was like if the bridge was not present in that sector.<BR>
Thanks to this method we can create more detailed floor (and ceiling) collisions with very interesting possibilities.<BR>
 <A NAME="LINK3"></A> <BR>
<BR><HR WIDTH=90%><BR><FONT COLOR=#FF0000><CENTER><H2>The Conditions: Fragmented triggers</H2></CENTER></FONT>To better support this new bridge collision feature, it has been added a big quantity of new fragmented triggers.<BR>
In this chapter you can see the old and the new fragmented triggers you can use.<BR>
 <A NAME="LINK4"></A> <BR>
 <IMG SRC="Esempi_Fragment_grid.gif" VSPACE=12 ALIGN="CENTER"><BR>
 <BR>
 <A NAME="LINK5"></A> <BR>
 <IMG SRC="Esempi_Fragment_circle.gif" VSPACE=12 ALIGN="CENTER"><BR>
 <BR>
 <A NAME="LINK6"></A> <BR>
 <IMG SRC="Esempi_Fragment_triangles.gif" VSPACE=12 ALIGN="CENTER"><BR>
 <BR>
 <A NAME="LINK7"></A> <BR>
<BR><HR WIDTH=90%><BR><FONT COLOR=#FF0000><CENTER><H2>Limits and chances of the condition triggers</H2></CENTER></FONT>The new code used to verify the condition triggers cann't be overloaded. It's able to manage only two triggers for sector: the condition trigger and the common trigger for the bridge object.<BR>
You cann't use DUMMY triggers with the CONDITION triggers, of course, because they are both special triggers and you can not mix them.<BR>
You cann't use condition triggers different than fragmented triggers, or at least, if you do that you could get unpredictable results.<BR>
You cann't either place two or more condition triggers in same sector, anyway, you can use a single condition trigger like this:<BR>
<BR>
; Set Trigger Type - CONDITION 15<BR>
; Exporting: CONDITION(15:0) for PARAMETER(1)<BR>
; &lt;#&gt; : TriggerGroup=    1<BR>
; &lt;&&gt; : Multiple condition of &lt;#&gt;TriggerGroup script command<BR>
<BR>
In this way it will be the response of conditions exported in TriggerGroup command of script.dat to set if the condition is true or false and pratically in this way, you can use many condition triggers, going around the previous limit.<BR>
 <A NAME="LINK8"></A> <BR>
<FONT COLOR=#FF0000><H3>Mixing Conditions to get new Shapes</H3></FONT>The triggergroup condition trick is very useful to get composite zones, mixing in direct or inverse mode the standard shapes supplied from the single fragmented triggers, upto getting new unlimited shapes.<BR>
<BR>
For example if we wish create a smooth diagonal strip where lara will be able to walk we'll have to perform some computes.<BR>
<BR>
 <IMG SRC="diagonal_bridge.gif" VSPACE=12 ALIGN="CENTER"><BR>
 <BR>
<BR>
We wish get a triggered zone with the shape of green zone of Pic1 (see above image).<BR>
Unfortunately there is no condition to have immediatly that diagonal, in fact the grid trigger to have a diagonal (Pic2) it's not the same we wish, since lara will be not able to walk over that strip because it made with a serie of little squares.<BR>
So we have to get our target in another way, using different conditions and mixing them in some way.<BR>
Looking our target (Pic1) we see there are two sort of white triangles (signed with "A" and "B")<BR>
Since we can trigger triangles pherpas it's this the right way.<BR>
So we could use the condition for the the two triangles: Alfa triangle (Pic3) has same shape of A Triangle (Pic1), while the Beta triangle (Pic4) has same shape of B Triangle (Pic1).<BR>
Anyway there is yet a problem: while the triangles in Pic1 are white (the excluded zone from triggering), those got with our triangle conditions (Pic3 and Pic4) are green, i.e. the triggered zone. We could solve this problem using these trigger in Inverse mode. In this way the triggered zone will be that is outside of given triangle. In this way we get the inverse zone of Alfa Triangle  (in yellow in Pic5) and the inverse zone of Beta Triangle (in yellow in Pic6).<BR>
 <A NAME="LINK9"></A> <BR>
<FONT COLOR=#FF0000><H3>Mixing with AND operator</H3></FONT>Now we have simply to export both our triangle triggers in a TriggerGroup:<BR>
<BR>
====== TO GET YELLOW ZONE OF PIC5 ==========<BR>
; Set Trigger Type - CONDITION 70<BR>
; Exporting: CONDITION(70:58) for PARAMETER(768)<BR>
; &lt;#&gt; : Cathetus Size=  768<BR>
; &lt;&&gt; : Fragmented trigger. Check in (E) way if lara is in the North-West corner triangle with &lt;#&gt;Size<BR>
; (E) : INVERSE. Lara is outside of current Triangle<BR>
<BR>
====== TO GET YELLOW ZONE OF PIC6 ==========<BR>
; Set Trigger Type - CONDITION 71<BR>
; Exporting: CONDITION(71:58) for PARAMETER(768)<BR>
; &lt;#&gt; : Cathetus Size=  768<BR>
; &lt;&&gt; : Fragmented trigger. Check in (E) way if lara is in the South-East corner triangle with &lt;#&gt;Size<BR>
; (E) : INVERSE. Lara is outside of current Triangle<BR>
<BR>
Now, since the default logical operator is AND, to link the two triggers, the whole triggergroup condition will be true when both conditions are true: i.e. when lara is over the zone of first trigger and she is over the zone of second trigger, too.<BR>
This situation will happen only when Lara will be in the overlapped zone of the two triggers, i.e. in the zone that the two conditions have in common: the blue zone you see in Pic7. <BR>
And that zone is exactly what we wished get.<BR>
<BR>
Note: we can get same result using the NOT operator on the direct triangle triggers, i.e. saying: it's true when lara is not over first (alfa) triangle and neither over the (beta) second. This second method is pratically the same just used, of course, we simply used the NOT operator instead of the INVERSE mode in the trigger.<BR>
 <A NAME="LINK10"></A>  <BR>
<FONT COLOR=#FF0000><H3>Mixing with OR operator</H3></FONT>Remember that you can always paste two or more fragmented zones simply typing both trigger in a triggergroup command and linking them using the OR operator.<BR>
<BR>
 <IMG SRC="mix_or.gif" VSPACE=12 ALIGN="CENTER"><BR>
 <BR>
<BR>
For example in above image, if we wish get the Pic1 sensitive zone (our target) just simply we type the condition trigger to get the column (2th vertical of 3x3 grid) with the condition to get the circle (Pic3)<BR>
Using the OR operator the result will be our target<BR>
 <A NAME="LINK11"></A> <BR>
<FONT COLOR=#FF0000><H3>Mixing composite: all operators, AND,  OR and NOT</H3></FONT>When you wish get a shape really complex you could have to use all operators AND, OR and NOT.<BR>
<BR>
 <IMG SRC="mixing_multiple.gif" VSPACE=12 ALIGN="CENTER"><BR>
 <BR>
 <A NAME="LINK12"></A> <BR>
<FONT COLOR=#FF0000><H3>Using the correct sorting of operators</H3></FONT>In above image to get the shape showed in Pic1, you have to create a TriggerGroup with:<BR>
NOT   The condition trigger for Pic3 image: Circle Radius 150<BR>
AND   The condition trigger for Pic2 image: Circle Radius 400<BR>
OR      The condition for pic4 image: 3th horizontal strip of 3x3 grid<BR>
<BR>
Remark: it's not so easy to explain but when you mix AND OR and NOT the order you use to type the condition is very important.<BR>
For example while the above sequence will work fine, the following sequence:<BR>
<BR>
            The condition trigger for Pic2 image: Circle Radius 400<BR>
NOT    The condition trigger for Pic3 image: Circle Radius 150<BR>
OR       The condition for pic4 image: 3th horizontal strip of 3x3 grid<BR>
<BR>
It will fail when Lara is in any red point showed in Pic1 of belove image<BR>
 <IMG SRC="Operators_errors.gif" VSPACE=12 ALIGN="CENTER"><BR>
 <BR>
Because it should be true, since lara is on green zone, but the result will be false.<BR>
The parsing of the triggers will work in this way:<BR>
<BR>
Analyse first trigger (Circle Radius 400) and the condition is False<BR>
check for next operator and find a NOT, but missing other operators the NOT values like an "AND NOT"<BR>
Since it finds a first false condition linked with a following AND the parsing will be completed immediatly with the response: the condition is false. <BR>
<BR>
By other hand,  if we change above sequence using an OR togheter with the NOT:<BR>
<BR>
            The condition trigger for Pic2 image: Circle Radius 400<BR>
OR NOT The condition trigger for Pic3 image: Circle Radius 150<BR>
OR       The condition for pic4 image: 3th horizontal strip of 3x3 grid<BR>
<BR>
The triggerGroup will fail newly everytime lara is in the position showed in red in Pic2 of above picture.<BR>
The reason is that the parsing in this case will work in this way:<BR>
<BR>
Analyse first trigger (Circle Radius 400) and the condition is False<BR>
Check for next operator and find an OR, so it continues to verify if next condition is true:<BR>
Analyse (NOT  Circle Radius 150) and it is true.<BR>
Check next operator and find it is an OR, so the parsing skip next condition because when in a sequence of conditions, A OR B OR C, one of these (A, B, C) it's true it's not necessary that other of them were true.<BR>
But, skipping the next (and last) condition (3th horizontal strip of 3x3 grid)  it will consider true also when lara is simply outside of the "Circle Radius 150" like showed in Pic2 of above image, where the conditon it will be true in spite lara is in a white zone.<BR>
 <A NAME="LINK13"></A> <BR>
<FONT COLOR=#FF0000><H3>The Operators Priority in TRNG</H3></FONT>A way to understand these ambiguities it's to place, in the formula, the ideal round parenthesis, remembering that the priority used in TRNG has following sorting:  NOT, OR, and at end the AND.<BR>
<BR>
Some examples to clear the priority and how place the parenthesis:<BR>
<BR>
First example:<BR>
<BR>
a AND b  AND NOT c OR d<BR>
<BR>
It will become:<BR>
<BR>
a AND b AND ((NOT c) OR d)<BR>
<BR>
Second example:<BR>
<BR>
a OR b AND c OR NOT d<BR>
<BR>
it will become:<BR>
<BR>
(a OR b) AND (c OR (NOT d))<BR>
 <A NAME="LINK29"></A> <BR>
<FONT COLOR=#FF0000><H3>Too slim collisions</H3></FONT>You can create very detailed shapes anyway the engine, when Lara is in some state-id, could not detect the too slim collisions.<BR>
 <IMG SRC="image169.jpg" VSPACE=12 ALIGN="CENTER"><BR>
 <BR>
In above images we have this problem. If we create a conditional trigger to enable the collision in that slim rectangle, when lara runs she could pass across the collision. <BR>
The reason is that the engine checks in front of lara (in the running direction) using an increment of about 200 units. If the width of the collision is less than that value, the engine will discover that there is no obstacle in front but in the reality this happen because the engine skipped the zone of the collision, checking directly in the opposide side of the obstacle.<BR>
<BR>
 <A NAME="LINK14"></A> <BR>
<BR><HR WIDTH=90%><BR><FONT COLOR=#FF0000><CENTER><H2>The Bridge Objects</H2></CENTER></FONT><CENTER><IMG SRC="brdige_olds.gif"  VSPACE=12 ALIGN="CENTER" ></CENTER> <BR>
In the old Level Editor there were only three bridges:  BRIDGE_FLAT, BRIDGE_TILT1 and BRIDGE_TILT2<BR>
The "tilt" should be the gap in the sloped opposite sides about the height. Tilt 1 means one click gap, while tilt2 is two clicks gap.<BR>
All default bridge objects allow to lara to walk over them avoiding the sliding.<BR>
 <A NAME="LINK15"></A> <BR>
<FONT COLOR=#FF0000><H3>New Bridge Objects</H3></FONT><IMG SRC="brdige_news.gif" VSPACE=12 ALIGN="CENTER"><BR>
 <BR>
Differently the new bridge objects, BRIDGE_TILT3, BRIDGE_TILT4 and BRIDGE_CUSTOM, have slopes where lara is not able to walk, she will slide over them.<BR>
It could seem weird having bridges where lara cann't walk but there are two exceptions to do: both new bridges are customizable whereby OCB, and you could make them walkable. Pratically we could see Lara walk over a tilt4 slope for the first time.<BR>
The other exception is when you mean use the bridge to create a detailed collision on some static, like a huge statue. In this situation you need of walkable bridges (flat, tilt1, tilt2) but you could require also some sloped surface where lara will slide, like with bridges tilt3, tilt4 or tilt_custom.<BR>
This method is important when you wish avoid to move up invisible collision from floor upto the statue. A method that will work but with the problem that lara will be not able to walk belove the statue, for example under the huge arms of the statue.<BR>
 <A NAME="LINK16"></A> <BR>
<FONT COLOR=#FF0000><H3>The custom Bridge</H3></FONT>The BRIDGE_CUSTOM has a bizarre shape but it doesn't show the real floor collision. I used that shape only to remember that is a bridge with variable sloping grade.<BR>
In fact, you can set the tilt factor setting a value in his OCB field.<BR>
In this way you can use the BRIDGE_CUSTOM to have any tilt slopes.<BR>
 <A NAME="LINK17"></A> <BR>
<FONT COLOR=#FF0000><H3>Customizing the new Bridge Objects: the OCB values</H3></FONT>All new Bridge objects can be customized with their OCB field.<BR>
The formula used to create an OCB value for these objects is this:<BR>
<BR>
<TT>TiltFactor + NoSlidingFlag + EnableHangFlag + Depth*256</TT><BR>
<BR>
Where: <BR>
TiltFactor is the Tilt value, for example with TiltFactor = 0 you create a BRIDGE_FLAT, and with TiltFactor = 2 you create a BRIDGE_TILT2 slope.<BR>
The max allowed value is tilt 63.<BR>
<BR>
NoSlidingFlag is the value 128. If you add this value in the OCB lara will be able to walk over this Bridge avoding the sliding.<BR>
<BR>
EnableHangFlag  is the value 64. If you add this value Lara will be able to hang of edges of current bridge. By default the hanging feature it has been been removed  because it caused many problems on all new edges, i.e. those not matching with the standard game squares.<BR>
I suggest to let disabled the hanging feature with the only exception when you are using a bridge with a common squared shape (no fragmented triggers for it).<BR>
<BR>
Depth is the height of the bridge object set in 1/4 of click. This means that, to have a bridge with height of one sector, you should use 16 as Depth.<BR>
The depth is important because a Bridge has also a function of ceiling when lara is belove of it.<BR>
The old bridges had all the depth of one click.<BR>
<BR>
Remarks: <BR>
* The TiltFactor will be used only from the BRIDGE_CUSTOM object, while for other bridges the tilt is implicte in their name: BRIDGE_TILT2, BRIDGE_TILT4 ect.<BR>
<BR>
* Above ocb description could be less updated than that you read in OCB section of the Reference panel of NG_Center program. So you should consulte that reference for the OCB values to use.<BR>
 <A NAME="LINK18"></A> <BR>
<BR><HR WIDTH=90%><BR><FONT COLOR=#FF0000><CENTER><H2>The planning with the framework bridges</H2></CENTER></FONT><CENTER><IMG SRC="brdige_olds.gif"  VSPACE=12 ALIGN="CENTER" ></CENTER> <BR>
Give newly a look to the bridge objects in the misc2.wav (above image)<BR>
The used "framework" shape could seem weird but there is a reason to have a design so light for the bridges.<BR>
Since we mean use these bridges togheter with conditional triggers to change their collision shape, it should be impossible use the same bridge, with same shape, to cover different shapes in the level.<BR>
For this reason we'll planning the footbridges of our level in this way:<BR>
  <CENTER><IMG SRC="image166.jpg"  VSPACE=12 ALIGN="CENTER" ></CENTER><BR>
We'll use the real BRIDGE object to have the feature of new collisions but all these objects will have selected the Invisible button.<BR>
In this way the effective bridge will be invisible and we should (and could) use other footbridges, like different statics, to show in game the walkable footbridges.<BR>
Above method it's necessary if we use many different (collision) bridges in many different zone of our level.<BR>
Since we'll have to place in level map, the real BRIDGE object, to enable the collisions, and the static footbridge to show the mesh in game, it should be confused overlap in the map, in same zones, two objects: the bridge and the static, and it's own for this reason that I gave to the BRIDGE this framework layout. In this way in the map you'll be able to see both the objects, and select, rotate, move them in easy way, in spite they were in same sector.<BR>
 <A NAME="LINK19"></A> <BR>
<BR><HR WIDTH=90%><BR><FONT COLOR=#FF0000><CENTER><H2>Bridges in depth: simulating the collisions of the Statics</H2></CENTER></FONT>The bridges are not simply the hanged surfaces where lara is able to walk. <BR>
With opportune OCB you can transform a bridge in a real 3d solid, with an high depth, like several clicks or sectors.<BR>
This feature, added to the framented trigger, it allows to use the bridge collision to create very fine collision for static or moveable (animating) like it had never been possible.<BR>
For example in following image:<BR>
 <IMG SRC="coll_column.gif" VSPACE=12 ALIGN="CENTER"><BR>
 <BR>
We have a column, with a squared plinth and a sloped circular surface at top.<BR>
Well, using a mix of bridge collision and collision trigger we can cover all these shapes as effective collisions.<BR>
Lara is able to walk over the plinth (A Picture), or to walk over the circular surface, and the collision will be own a circle with the correct slope (B Picture).<BR>
<BR>
To adapt the collision around to an object we have to apply some little tricks<BR>
 <A NAME="LINK20"></A> <BR>
<FONT COLOR=#FF0000><H3>Align the surface with some ideal bridge position</H3></FONT>We should very often modify a bit the original position of the mesh (using metasquoia) to align the main surface with the position where we can place a floor collision.<BR>
In this speech you should remember that you can place a bridge with gaps of 128 units, i.e.  1/2 click, and that the height (depth) of the collision works in 1/4 of click, so it should be a multiple of 64 units.<BR>
For example in our example of the column with the plinth, we changed the slope surface to be aligned with the surface of a BRIDGE_TILT2 object.<BR>
 <IMG SRC="align_bridge.gif" VSPACE=12 ALIGN="CENTER"><BR>
 <BR>
A good way to perform this operation is to load in Metasequoia both the objects: first the column, and then, with the Insert command, also one of the Bridges we think to use. (See A Picture in above image)<BR>
Then we select only the bridge and using the [Move] command, move it up of multiply by 128, until to reach a position of its surface very alike than that of the column.<BR>
Now we can move up/down a bit the vertices of the column surface to have them perfectly aligned with the slope surface of the bridge.<BR>
If we made all above procedures correctly in the NGLE (and in game) we'll be able to cover perfectly the column surface with the bridge surface (B Picture)<BR>
 <A NAME="LINK22"></A> <BR>
<FONT COLOR=#FF0000><H3>The overloading of the bridge triggers</H3></FONT>In some circustances it will be necessary use some collision trigger to complete the collision shape of our static.<BR>
The collision triggers are (fake) flipeffect triggers that change the collision before creating the .tom file in output wad ngle command.<BR>
You can move up/down the collision from floor or ceiling, setting further triangle slope.<BR>
In the chapter <A HREF="#LINK7">Limits and chances of the condition triggers</A> I said it's better don't overload the floor data triggers, i.e. I suggested to let only the couple: Condition + Trigger for Bridge in a game sector.<BR>
As general rule that was a good suggestion, anyway in some circustances we could place other triggers in that game sector, just understanding when this operation is dangerous and when it isn't.<BR>
In the case of Collision triggers the operation is fully safe since these are not real triggers operating in game time but only fake triggers working as placefolders in projecting time to remember where modifing the collision before outputing the wad.<BR>
This means that, when the game will begin the collisional triggers will be no more present in tr4 file, so there is no overloading in this case.<BR>
<BR>
However, since we are in topic, we could describe those seldom situations where we could really overload the condition/bridge triggers and why.<BR>
 <A NAME="LINK21"></A> <BR>
<FONT COLOR=#FF0000><H3>The floor data triggers</H3></FONT>The triggers for bridges and their further conditions work in a different way in according with the game phase.<BR>
In one phase the game engine checks for triggers for bridges parsing the floor data only to discover the collisions. When it finds a trigger for a bridge, check the position of the bridge and set the collision to a different height in according with the position of the bridge.<BR>
In a second phase the game engine check for all triggers to manage the objects, flipmap, soundeffect and other game stuff. In this second phase the triggers for the bridges will be ignored.<BR>
It's important understand how the triggers will work in the two above phases because the results are very different.<BR>
 <A NAME="LINK23"></A> <BR>
<FONT COLOR=#FF0000><H3>Parsing the triggers to compute the collisions</H3></FONT>In this phase, we named phase one, the only considerated triggers are the further conditional triggers and the triggers for the bridges.<BR>
The engine performs this compute:<BR>
<UL><LI>If it finds a condition, check if it's true and if it is, the following trigger (only the next) will be performed.<BR>
<LI>If the condition was true or if there was no condition, the trigger for bridge will be managed to compute the new floor collision<BR>
<LI>If there are further triggers for bridges, there will be all managed  for the collision compute, indifferently if the condition was true or false</UL><BR>
Reading above description we can find a possible usage in overloading when we have, in same sector but at different heights, two or more bridge objects.<BR>
If we place in our game sector the following triggers:<BR>
<BR>
Condition trigger<BR>
Trigger for Bridge 77<BR>
Trigger for Bridge 81<BR>
<BR>
where the bridge 77 (index =77) and the bridge 81 are in same vertical of that sector, of course,  the engine will work in following way:<BR>
It performs the condition triggers. When the condition is true, there will be created the collision for the Bridge 77, when it is false, the bridge 77 will be ignored. <BR>
While for the Bridge 81 its collision will be ALWAYS created with no regard about the response of the condition trigger.<BR>
In game playing terms, this means we could place two or more overlapped bridges where only one (that is the first trigger after the condition) could be affected with some fragmented shape, while all other bridges should have the common full square shape.<BR>
In this speech there is a boring question.<BR>
Since there are different behaviors in according if a trigger for bridge is the first, after the condition, or one of the following, we have to force the correct position for our wished trigger.<BR>
For example if the Bridge77 has slim shape, while the Bridge81 has the full square size, we have to be sure that the Trigger for Bridge77 was always the first, after the condition.<BR>
You can perform a click in 2d panel view to see the sorting of trigger but when the position is wrong, i.e., in our example, when our trigger for Bridge 77 is the second, what could we do to solve the problem?<BR>
The solution is easy. Just, when the our trigger (bridge 77) is selected, hit the Del key to remove it. Now select newly the square and click on the pink button to add a trigger. In this way we changed the position for our Trigger for Bridge77 and it should be at first place.<BR>
When there are many triggers the question could be a bit more boring but the result we have to reach is clear: the trigger affected from the condition has to be the first after the condition.<BR>
<BR>
<FONT COLOR=#FF0000><H3>Remark: After some checking results that the bridge with condition has to be always the lower in the 3d space, while the other on same tile but upper  will be all with full size (no affected by conditions)</H3></FONT><A NAME="LINK25"></A> <BR>
<FONT COLOR=#FF0000><H3>Parsing the triggers for the game planning</H3></FONT>In the phase we named two, when the engine looks for flipeffects, actions and other triggers for game stuff, the parsing of the triggers in a given sector is more easy:<BR>
<UL><LI>If there is a condition check if it is true or false.<BR>
<LI>If the condition was true perform all following triggers<BR>
<LI>If the condition was false the engine will ignore all trigger on this sector</UL><BR>
This means that in a situation like this:<BR>
Condition Trigger<BR>
Trigger for Bridge 77<BR>
Trigger for Bridge 81<BR>
Trigger to play sound 34<BR>
Trigger to enable baddy1 143<BR>
<BR>
The triggers will be performed only if the condition is true, while in a false case all triggers will be ignored.<BR>
Since we suppose our condition is a fragmented trigger to support the shape of Bridge77, this means that the triggers will be performed only when lara is over the shape set for Bridge77, but ignoring if lara is over the Bridge77, above or belove of it.<BR>
 <A NAME="LINK24"></A> <BR>
<BR><HR WIDTH=90%><BR><FONT COLOR=#FF0000><CENTER><H2>About the Miscellanous II demo project</H2></CENTER></FONT><CENTER><IMG SRC="image167.jpg"  VSPACE=12 ALIGN="CENTER" ></CENTER> <BR>
<FONT COLOR=#FF0000><H3>The Depth factor</H3></FONT>Looking the OCB value used for three types of footbridges you find following values:<BR>
Slim footbridge with L shape: 512<BR>
The ring: 0<BR>
Staircase: 384<BR>
 <A NAME="LINK26"></A>  <IMG SRC="image168.jpg" VSPACE=12 ALIGN="CENTER"><BR>
 <BR>
While for the column (above image) it was:  4608<BR>
 <A NAME="LINK27"></A> <BR>
<FONT COLOR=#FF0000><H3>Decoding the Bridge OCBs</H3></FONT>Since the depth factor is stored as 1/16 of sector, and the depth value has to be multiplied by 256 in OCB, the settings about the depth for above bridges should be:<BR>
<BR>
Slim footbridge: 512 = 2 * 256  (depth = 2)<BR>
The ring: 0 but by default when there is zero, the depth is one click, i.e. 4 of sixteenths of sector<BR>
StairCase: 384: removing the ocb flag for Disable sliding (128): 384 - 128 =  256.  So it was 1 * 256, the depth factor was 1<BR>
The column: 4608 / 256 = 18<BR>
<BR>
About the real game units, since one sixteenth of sector is 64  (1024 / 16 ) the depth (or height) of above objects were:<BR>
<BR>
Slim footbridge = 128<BR>
The ring = 256<BR>
Staircase = 64<BR>
The column =  1152<BR>
 <A NAME="LINK28"></A> <BR>
<FONT COLOR=#FF0000><H3>A bug or a chance?</H3></FONT>As usual you can use also the downside of the bridge as a monkey ceiling, just placing the monkey attributes on the sectors where is the bridge.<BR>
Anyway, when this attribute is on the slim footbridge, it happens something of weird:<BR>
<BR>
 <CENTER><IMG SRC="monkey_bug.gif"  VSPACE=12 ALIGN="CENTER" ></CENTER> <BR>
Lara is able to hang on the ceiling of the bridge, starting from the floor of the bridge.<BR>
Looking above images it seems a bug, in particular way the frame 4 is very suspect, therefore we can say it is a bug.<BR>
However that bug is not avoidable because it is an effect of my fixing of other bug that happened when lara tried to fall down and hang the edge of fragmented borders. So to fix that bug I had to remove the collisions from the Lara's arms while she is doing a back down jump.<BR>
You see in frame 4 that the arms of Lara pass across the footbridge and it's for this reason that the engine, when lara is more down (frame 5) enables the ceiling hanging: Lara in that moment is in correct position for the monkey.<BR>
<BR>
In spite in above sequence it seems a bug you could change the shape of the bridge to get plausible that skill: just the bridge had in inner side (because this happen only in this side) a framework shape, like it was builded using metal pipes.<BR>
In above way, since the movement is very fast, the trick could look plausible.<BR>
Anyway if you don't wish this situation you should avoid to place the monkey attributes belove the bridges that are using fragmented triggers.<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR></B></BODY></HTML>
