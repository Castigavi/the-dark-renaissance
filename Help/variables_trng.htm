<HTML><HEAD><TITLE>Variables with the TRNG Engine</TITLE></HEAD>
<BODY TEXT=#000000 BGCOLOR=#FFFFC0 LINK=#0000FF ALINK=#0000FF VLINK=#000080> 
<BASEFONT SIZE=3>
<FONT COLOR=#FF0000>
<CENTER><H1>Variables with the TRNG Engine</H1></CENTER></FONT>
<B><A HREF="#LINK1">Introduction</A> <BR>
<A HREF="#LINK2">What could we get with variables?</A> <BR>
<A HREF="#LINK3">Different types of Variables</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK4">Local and Global Variables</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK5">The size of the Variables</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK6">Numeric or Testual Variables</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK7">Common and Special Variables</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK8">The Timer Variable</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK9">Global Trigger for TRNG Timers</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK10">The CurrentValue variable</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK11">The LastInputNumber variable</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK12">The Store variables</A> <BR>
<A HREF="#LINK13">The PlaceFolders for Variables</A> <BR>
<A HREF="#LINK14">The Critical Memory Zones</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK15">The Item Memory Zone</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK16">The Savegame Memory Zone</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK17">The Code Memory Zone</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK18">The Slot Memory Zone</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK19">The Animation Memory Zone</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK29">The Inventory Memory Zone</A> <BR>
<A HREF="#LINK20">The Variables Demo Project</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK21">TRNG Timer and gained MediPacks</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK22">The skill about Jump Gain</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK25">The wooden Door: how save and restore our changes</A> <BR>
<A HREF="#LINK23">Tips & Tricks</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK24">How discover the sense of some memory fields</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK26">Enable the debugging for script commands</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK27">Force the saving of coordinates about some Moveable</A> <BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#LINK28">How detect time intervals  without using the timer</A> <BR>
<BR>
 <A NAME="LINK1"></A> <BR>
<BR><HR WIDTH=90%><BR><FONT COLOR=#FF0000><CENTER><H2>Introduction</H2></CENTER></FONT>This document tries to describe functions and usage of TRNG Variables.<BR>
<BR>
How we could see the direct usage of variables it's very easy: you find flipeffects to copy a number from a variable to another, or to apply some mathematic function, adding, substracting multiply, to some variable.<BR>
<BR>
It's instead more complicated understand how realizing something of useful with the variables.<BR>
 <A NAME="LINK2"></A> <BR>
<BR><HR WIDTH=90%><BR><FONT COLOR=#FF0000><CENTER><H2>What could we get with variables?</H2></CENTER></FONT>A first target that we could get with variables is to remember some old fact happened in the game to perform different actions in the future.<BR>
The most of triggers permit to realize some of alike but only in same level, while with variables we could remember the time elapsed in a race in first level, to give at end of third level the chance to play also a bonus level.<BR>
<BR>
Another target is to realize very complex new skills using globaltriggers triggergroup and conditions.<BR>
In trng features there are already many command working like programmin commands: the triggergroup for commands, and the conditional trigger for condition.<BR>
But it was missing a basic requirement for each programming language: the variables.<BR>
<BR>
For example you could to use a globaltrigger with triggergroup to realize a new complex operation  like simulate a new vehicle or some hardcoded puzzle, but to realize this it's sure you'll need also of some variable to remember in what phase of these long complex operations serie you are in a specific moment.<BR>
<BR>
You can see the example of jump-gain in the trng_variables.zip project to understand how we used the variables to permit that new skill for lara.<BR>
 <A NAME="LINK3"></A> <BR>
<BR><HR WIDTH=90%><BR><FONT COLOR=#FF0000><CENTER><H2>Different types of Variables</H2></CENTER></FONT>If you look some flipeffect for variables (all start with the text "Variables.") you can see the long list of available variables under trng.<BR>
They could be divided in different groups in according with different standards.<BR>
 <A NAME="LINK4"></A> <BR>
<FONT COLOR=#FF0000><H3>Local and Global Variables</H3></FONT>There are two set of variables: the local variables and the global variables.<BR>
It's important understand they are really different variables: the local alfa variable has an independent value than global alfa.<BR>
They are Local variabels those will be linked with a specific level, while are global variable those variable keep same values in all levels.<BR>
You could think that the global variable are better but in the reality the local variable have own the advantage to keep a set of variable for each level, so you can have a value for Local Alfa in level 1, then (with finish trigger) lara goes in level2 and you can have a different value in Local Alfa for level 2, and when lara comes back to level1 she'll find newly the value of local alfa of level1.<BR>
<BR>
Pratically you should use local variables when those values affect only that level, while you have to use global variable when you set a value in a level and you want preserve that value also in future levels.<BR>
 <A NAME="LINK5"></A> <BR>
<FONT COLOR=#FF0000><H3>The size of the Variables</H3></FONT>The speech about size of variables could seem complicated but just you think about a variable like it was a box.<BR>
We can have a big box, where store big "things" (or numbers) or little boxes.<BR>
The complication is that you can place the little boxes in a big box if you wish.<BR>
This is that happens in trng variables.<BR>
You can decide if you want use few big boxes, i.e. few variables where you can store big numbers, or if you wish have many little variables where you can store littler values.<BR>
<BR>
To understand the overlapping used in trng variables you could immaginate that you divided a big box to get many little boxes.<BR>
<BR>
See following picture:<BR>
<BR>
 <IMG SRC="variable_size.jpg" VSPACE=12 ALIGN="CENTER"><BR>
 <BR>
<BR>
This scheme show how work (almost) all trng variables.<BR>
For each variable name "Local Alfa", "Global Delta", "Local Beta" ect, we can decide if we want use 4 little boxes (bytes 1, 2,3 and 4) or 2 middle variables (short 1 and short2) or a single big variables.<BR>
The numbers you can store in these different "boxes" are the following:<BR>
<BR>
BYTE:  Min = 0  ; Max = 255 (only positive numbers)<BR>
SHORT: Min =   -32768  ; Max = +32767<BR>
LONG: Min= -2.147.483.648 ; Max = +2.147.483.647 (i.e. about +/-  2 bilions)<BR>
<BR>
In this overlapping of big or little variables you have to avoid the error to overwrite a big variable while you write in a little variable.<BR>
For example if you use the Short1 to store a number, then you cannot store antoher number in Byte1 or Byte2 of same variable, because in this way you'll modify in upredictable way also the Short value.<BR>
Differently if you look the above picture you can understand that you can use Byte1 and Byte2  and Short2, too,  because these variables are not overlapped.<BR>
 <A NAME="LINK6"></A> <BR>
<FONT COLOR=#FF0000><H3>Numeric or Testual Variables</H3></FONT>Probably you'll use more often the numeric variables, anyway there are also testual variabiles where you can store text.<BR>
The text variables have following names:<BR>
<BR>
Text1<BR>
Text2<BR>
Text3<BR>
Text4<BR>
BigText<BR>
LastInputText<BR>
<BR>
In text variables you can copy extra ng strings, or, in the future versions, the text typed by player like his name or some testual password.<BR>
There are some flipeffects to add text in BigText variable. This variabile is bigger than other text# variabiles, since you can host upto 319 characters while in text# vaeriables you can store only 79 characters.<BR>
 <A NAME="LINK7"></A> <BR>
<FONT COLOR=#FF0000><H3>Common and Special Variables</H3></FONT>The common variable are Alfa, Beta and Delta, locals or globals.<BR>
All above variabiles may be divided like showed in <A HREF="#LINK5">The size of the Variables</A>  chapter.<BR>
There are other variable having something of special:<BR>
<BR>
The Timer variabile, local or global.<BR>
The CurrentValue variable (only global)<BR>
The LastInputNumber variable (only global)\<BR>
The Store variables: from variable A upto variable P (all globals and divided like common variables in byte, short or long size)<BR>
<BR>
In following chapters will be described what having of special above variables.<BR>
 <A NAME="LINK8"></A> <BR>
<FONT COLOR=#FF0000><H3>The Timer Variable</H3></FONT>There are two timer variables: global and local.<BR>
The timer variable could be used like other common variables except for the fact it was always long and therefore you cann't use bytes or short in timer.<BR>
Anyway the Timer variable has some interesting features about counting time, like its name says.<BR>
You have flipeffects to start or stop a local or global timer.<BR>
Remember that the trng timer variables are different than screen timer of tomb4, they are independent.<BR>
<BR>
There are two flipeffects to set a time in trng timers. You can set the value in seconds or in tickframes, where one second = 30 tick frames.<BR>
In spite of these different flipeffect remember that the value in trng timer is always in tick frames, but simply some flipeffect allow you to type a value in seconds and the engine will think to convert  in in tick frames.<BR>
<BR>
Remember that the flipeffect to start the trng timer doesn't show byself the timer on screen, you have to use another flipeffect to show or hide some trng timer.<BR>
In some cirucstances you could find useful having an "hidden" timer to compute some time interval for your new skills. <BR>
For example also in jump gain skill we used a local timer to disable all when it elapsed 1.5 seconds from arrival of the jump.<BR>
<BR>
Another interesting feature of trng timer is that you can insert its placefolder (see <A HREF="#LINK13">The PlaceFolders for Variables</A> ) in any text and then it will be replaced with current time in that timer variable, formatted in the format:<BR>
<BR>
mm:ss:t<BR>
<BR>
Where "mm" are minutes, "ss" are seconds, and "t" is teeny of second.<BR>
In this way it's easy show text like this:<BR>
<BR>
Remaining time:  #0073<BR>
<BR>
And it wil be showed in game, in this way:<BR>
<BR>
Reamining time:  00:53:4<BR>
<BR>
With the value will be continuosly updated with elapsing of the time.<BR>
<BR>
You can set the timer for increasing or decreasing progression.<BR>
<BR>
You have a flipeffect to show in fast way where show the trng time on the screen.<BR>
<BR>
While, about color and size of text, it has been prefixed, and you cann't change it with that flipeffect, anyway if you want show a trng timer with a different size or color just you use a common "print extra ng string" flipeffect, containing the placefolder of wished timer and in this way you'll be able to set color, size, and durate of viewing as you wish.<BR>
Pratically the flipeffect to show a trng timer should be seen only like an easy way to show a timer without having to thing about text formatting.<BR>
<BR>
<BR>
 <A NAME="LINK9"></A> <BR>
<FONT COLOR=#FF0000><H3>Global Trigger for TRNG Timers</H3></FONT>When you use a timer you can detect the completation of the time with the GT_TRNG_G_TIMER_EQUALS or  GT_TRNG_L_TIMER_EQUALS global triggers.<BR>
The only difference in above global triggers is that the "_G_TIMER" will be used for global timer, while the "_L_TIMER" will be used for local timer.<BR>
Theorically you could also using a commond conditional trigger testing the content of timer variabile but the global trigger is more precise and easy to use because it has been builded to avoid the false positives.<BR>
For example if you want give only 10 seconds to player to complete some operation and you wish use a countdown where the start value will be 10 seconds and the final of countdows will be at 0, you could have a problem with conditional triggers, because if you let enabled the global trigger at start of the game, it will detect immedialty the zero value in trng timer, simply because at begin of new level all variables will be cleared.<BR>
Differently if you use the global trigger GT_TRNG_x_TIMER_EQUALS with 0 in parameter field, you'll have no problems because this global trigger works only when the timer is running.<BR>
<BR>
Thanks to above method you have no need (and neither it's advisable) to use SINGLE_SHOT flags with global trigger, just you stop the trng timer when it reaches the final value and no global trigger will be enabled until to next starting of timer.<BR>
 <A NAME="LINK10"></A> <BR>
<FONT COLOR=#FF0000><H3>The CurrentValue variable</H3></FONT>The CurrentVariable is a special variable only because it is the only variable surely present in all operations performed with flipeffects.<BR>
Pratically it happens that some mathematic operations or copying could be not  not available for all variables but you'll have always that operation for CurrentValue.<BR>
The only thing you should remember about this variable is to avoid to use it to store value you want preserve for long time, because it's probably you'll need to use it only to move a value from a numeric variable to some critical memory and in this case you should have the problem to save its value, while it's more easy to let this value always free of long-time targets to may use it when it's necessary.<BR>
 <A NAME="LINK11"></A> <BR>
<FONT COLOR=#FF0000><H3>The LastInputNumber variable</H3></FONT>In the LastInputNumber variable will be copied always the value typed with KeyPad switch, or -1 if player aborts the keypad with Escape.<BR>
In future versions of trng also other input methods could set their values in this variable.<BR>
 <A NAME="LINK12"></A> <BR>
<FONT COLOR=#FF0000><H3>The Store variables</H3></FONT>The Store variables are very alike than common variables Alfa, beta, Delta, they may be divided in Bytes, shorts or long, too.<BR>
While the most difference respect than common variables it that, for technical reasons, you have no direct mathematic operation available to perorm on these store variabile, but you can only copy a store variable in CurrentValue variable, or (the opposite) move the value of CurrentValue in some Store variable.<BR>
This set of variables will be used to store different result you can get in the course of the level when the common variables are no more sufficent to keep them.<BR>
The advantage of Store variables is that there are many store variables: they are 16 long store variables, and therefore you can also see them like 32 short variables or 64 bytes variables.<BR>
The best usage of store variables is to copy in this zone a value when you know it will be required only seldomly or in future, letting free some common variable for effective computes.<BR>
 <A NAME="LINK13"></A> <BR>
<BR><HR WIDTH=90%><BR><FONT COLOR=#FF0000><CENTER><H2>The PlaceFolders for Variables</H2></CENTER></FONT>In the Reference panel of NG_Center you can now find a new section named "VARIABLE PLACEFOLDERS" where you can find that little number (the placefolder) to copy in your extra ng strings (but it works also for common PC strings) to have showed on the screen the content of that variable.<BR>
In the list there are all common numeric variable, but also the special and store variables.<BR>
<BR>
So, to show the value of some variables in game, just you copy the placefolder in your text to print.<BR>
<BR>
There are many nice tricks you can do with this method.<BR>
For example you could show your own version of statistics copy from savegame memory what you wish in some variable and then print a text like this:<BR>
<BR>
Stars of Iside  #0044<BR>
Remaing time #0073<BR>
Missing Targets #004A<BR>
<BR>
And once you copied in the variable the correct values it will be showed like:<BR>
<BR>
Stars of Iside  2<BR>
Remaining Time  05:23:2<BR>
Missing Targets:  8<BR>
<BR>
About the timer placefolder see also <A HREF="#LINK8">The Timer Variable</A>  chapter<BR>
<BR>
To get the value of picked up items or other statisc values see the next chapter about the critical memory zones.<BR>
 <A NAME="LINK14"></A> <BR>
<BR><HR WIDTH=90%><BR><FONT COLOR=#FF0000><CENTER><H2>The Critical Memory Zones</H2></CENTER></FONT>With the variables feature there is another interesting chance: now you can change many critical memory cells of tomb4 engine, copy values from your variables to these memory zones, or vice-versa.<BR>
<BR>
For "Critical" memory zone we mean those zones used by trng engine to set the position of object,  the number of inventory items and many other interesting stuff.<BR>
The most of trng flipefffect have been created writing the right values in the righe memory zone. Now also you can create other own special effect in this way.<BR>
<BR>
I want remember that the change of critical memory could create some nice mess, so if you are not very expert pheraps it's better you limit your usage of critical memory only to read the content of some localtion for example to know the values of inventory items or statistics.<BR>
<BR>
Differently if you want create new skill it will be necessary that you modify some critical zone, for examples in Item structure, the zone where all most important value about a moveable has been saved.<BR>
<BR>
Currently there are following Critical Memory Zones available:<BR>
<BR>
<FONT COLOR=#FF00FF>Item Memory</FONT><BR>It stores the most of data about each moveable, from lara to any other enemy or animating<BR>
<FONT COLOR=#FF00FF>Savegame Memory</FONT><BR>It keeps many inventory values but also statistics and other<BR>
<FONT COLOR=#FF00FF>Slot Memory</FONT><BR>The slot is the structure for type of moveables and it contains the common characteristics for moveables of same type)<BR>
<FONT COLOR=#FF00FF>Animation Memory</FONT><BR>To manage the memory of a specific animation structure.<BR>
<FONT COLOR=#FF00FF>Code Memory</FONT><BR>It regards zone differents by other groups, currently this list  is short but it could grow in the future<BR>
<FONT COLOR=#FF00FF>Inventory Memory</FONT><BR>It doesn't regard the presence of pickup in inventory (this is managed by Savegame Memory) but it regards the mode to show the item in inventory. Their size, position and orienting. More, with this memory you can check some interactive function like the sub-menus "combine", "separe" or the special feature like "load game", "save game" ect.<BR>
<BR>
In following chapters will be explained better above zones.<BR>
 <A NAME="LINK15"></A> <BR>
<BR><HR WIDTH=90%><BR><FONT COLOR=#FF0000><CENTER><H2>The Item Memory Zone</H2></CENTER></FONT><TABLE WIDTH=95% BORDER=2 BGCOLOR=80FFFF ALIGN=CENTER CELLPADDING=4>
 <TR>
 <TD COLSPAN=3 BGCOLOR=80FFFF>
<B><FONT COLOR=000000>
<CENTER><H2>Description of Item memory</H2></CENTER>
Remember that, before performing operations on Item Memory, you have to use the action trigger: "Variables. Set the index of <#>moveable as Selected Item" , to choose what is the item memory to modify. Each moveable has own item memory, i.e. a structure with its data.<BR>
Reramrk: some descriptions could be wrong. You could verify the behavior of some field using the method suggested in Tips  & Tricks chapter</FONT>
</B></TD>
</TR>
<TR BGCOLOR=FF0000 ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B>
<FONT COLOR=FFFF00>
Name of Field</FONT>
</B>
</TD>
<TD WIDTH=6% >
<B>
<FONT COLOR=FFFF00>
Size</FONT>
</B>
</TD>
<TD WIDTH=56% >
<B>
<FONT COLOR=FFFF00>
Description of Field</FONT>
</B>
</TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Animation Now</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
This field hosts the current animation.<BR>
This number of animation it's absolute, this means you cann't find a 0 number for first animation of some baddy but you'll find a big number about the number of current animation in the full list of animations of all previous moveables in the tr4 file.<BR>
To convert this absolute number in a relative number, where the first animation for this moveable will be 0, the second will be 1 ect, you have to perform this compute:<BR>
<BR>
1) Read the Slot index from "Slot id" field (if you don't known already it)<BR>
2) Set this index to work on Selected Slot Memory<BR>
<BR>
3) Read in slot memory the "First Animation Index"<BR>
<BR>
4) Now you can get the relative animation in this way:<BR>
<BR>
RelativeAnimIndex = ItemMemory.AnimationNumber - Slot.FirstAnimationIndex.<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Contact Flags</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
I'm not sure, anyway when there are single bits of values $2000 and $400, lara should be damaged by this item on touching. <BR>
In darts there is this value: $2400</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Custom Flags</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Byte</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
Misterious field.<BR>
It seems that the values in this field change in according with type of object.<BR>
It appears like bit flags to signal something</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Custom_A</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
This field, like other Custom fields, has different usage in according with the type of object.<BR>
The only way to discover how it will be used from a given item is to study this field while that item is enabled.<BR>
See the Tips & Tricks chapter.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Custom_B</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
See description of Custom_A field</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Custom_C</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
See description of Custom_A field</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Custom_D</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
See description of Custom_A field</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Facing Horizontal</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
This value is horizontal facing, i.e. looking lara from the top, it is the direction where lara is looking.<BR>
<BR>
About the values you can see the description of "Facing Vertical" field.<BR>
The horizontal facing is very important because set the direction where lara (or other items) will go when player hit UP key.<BR>
The horizontal speed, for example, is computed in the dirction of horizontal facing.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Facing Rotation</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
This facing is particular, and it should work only for Lara item.<BR>
You can see the image of Animation command sample to understand the rotation axis affected by this field</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Facing Vertical</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
This value describe the degrees respect than perpendicolar line with the floor.<BR>
In the projet sample "Variables_trng" you can see a change of vertial facing.<BR>
The values have a range from 0000 to $FFFF from 0 to 360 degrees.<BR>
For example $4000 is 90 degress, while $8000 is 180 degrees.<BR>
<BR>
It's very seldom this value is different than zero, it hapens when lara run with rush.<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Flags of Item</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
This is a very important and very complicated field.<BR>
In this Flags field each bit set some property of current item.<BR>
The values you see here are the absolute value of each bit, i.e. if you see $0008 it means you have to set or clear the bit 3 since it has the absolute value $0008<BR>
<BR>
This is the list of my discoveries:<BR>
<BR>
$0001 : The item has bene enabled<BR>
$0002 : The item has the collisions or this item requires a refresh.<BR>
$0004 : Item has not yet been enabled in game.<BR>
$0008 : The item is falling down (gravity enabled for this item)<BR>
$0010 : The item has been injured. It forces the view of life bar for Lara. <BR>
$0020 : Enemy is not yet dead. He could be to enable or he is living<BR>
$0040 : The enemy has been killed with explosion<BR>
$0100 : The enemy has been poisoned<BR>
$0200 : The enemy is in AI_GUARD mode<BR>
$0400 : The enemy is in AI_AMBUSH mode<BR>
$0800 : The enemy is in AI_PATROL1 mode<BR>
$1000 : The enemy is in AI_MODIFY mode<BR>
$2000 : The enemy is in AI_FOLLOW mode<BR>
$4000 : This is a new self-created item. Like a grenade or crossbow ammo.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Frame Now</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
The frame now is the current frame number in current animation.<BR>
Warning: also this vale (like the "Animation Now") is an absolute value, this means that, when an animation starts the frame now could be a big number istead of zero (like first frame)<BR>
To convert the absolute frame number in a relative (to current animation's frames) index, you have to perform following compute:<BR>
<BR>
1) Read the "Animation Now" field<BR>
2) Use this value to set the Selected Animation Memory<BR>
3) Read in Selected Animation memory the field "First absolute Frame index"<BR>
<BR>
And now you get relative number of frame for current animation in this way:<BR>
<BR>
RelativeFrameIndex= Item.FrameNow - Animation.FirstAbsFrameIndex<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Height Floor below the item</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
This field contains the Y Position of floor below current item.<BR>
The value has the same format of Y Position of item and it is very often the same value, it happens everytime the item is touching the ground.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
HP Vitality</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
In this field there is usually the reamining vitality (life level) of current item.<BR>
If the item is not a baddy (moveable with AI features) in this field could be the value $C000 to signal that this item is not killable and targetable.<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Object buttons</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
In this field should be stored the bits to signals the five buttons (+ Inivisible button) you read in Object Code window.<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
OCB Code</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
In this field there is the numeric value you typed in OCB window of this item in ngle program.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Position X</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
The X position of current item.<BR>
The X axis corresponds in ngle up-down view.<BR>
The X position has always positive values<BR>
Like for other Y and Z position field, one sector is 1024 units, one click is 256 units.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Position Y</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
The position Y has positive and negative values and signal the vertical position of lara (up or down respect than floor)<BR>
<BR>
The upper sides have negative values while the lower sides have positive values.<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Position Z</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
The Z position of current item.<BR>
The Z axis corresponds in ngle at left-right view.<BR>
The Z position has always positive values<BR>
Like for other Y and X position field, one sector is 1024 units, one click is 256 units.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Room</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
The index of room where is this item.<BR>
Remarks:<BR>
- The indices in tomb4 could be different than room indices you see in ngle, this depends by the presence of empty room in ngle's project.<BR>
Anyway remember you can convert a room tomb index in ngle room index or vice-versa using the correct flipeffect.<BR>
<BR>
- The value of room index cann't pass over 255, so, although this field has a Short size you can store this number also in a BYTE variable if you wish.<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Slot Id</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
This field contain the slot number of current item. For example Lara = 0, AHMET = 102 ect<BR>
You can use this number as index to set selected slot memory.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Speed Horizontal</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
This field is the speed in horizontal direction of current item.<BR>
The speed is pratically an increment that will be added to X,Z position following the current direction (facing ) of the item.<BR>
<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Speed Vertical</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
This field is the vertical speed, i.e. it is usually the speed of falling (positive values) or jumping upward (negative values)<BR>
Remark: when lara is underwater only this speed value will be used while the horizontal speed will be ignored.<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
State Id Next</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
This field works like "State-id now" field but this keeps the next state-id to set.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
State Id Now</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
This is the current State-id for this item<BR>
The state id of lara is well-known but also other enemies have a state id to singal the current phase of its action.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Transparence level</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
This field describes the transparence level of current item.<BR>
When the value is 0 there is no transparency and therefor the item is fully opaque.<BR>
When the value is 126 the item will be full transparent.<BR>
Remark: you can use an action trigger to modify the transparecy of moveable. While, if you try to perform this operation with variables, remember that this field when is different than 0 will be increased by trng engine and when the value reachs 127 the item will be removed.<BR>
Pratically the engine used this field to generate the progressive transparence effect before removing a killed enemy, and in fact, if you place a non-zero value in this field the item will become transparent and then it will be removed.<BR>
If you want only set a transparence it's better use the specific action trigger because this action trigger freeze the value in this field to stop the removing phase.<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Unknown (Accelleration on falling?)</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
About some fields it's not sure their target. This field could keep some acceleration value but it's to verify</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Unknown (Shot a granade?)</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
Misterious field.<BR>
I know only that when a baddy shots a grenade in this field will be written the $C210 value.<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Unknown (Sprite1 Id)</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Byte</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
Misterious field.<BR>
In my old studies it seemed regard some sprites used by this moveable, so it should be a sprite index but now I don't remember very well.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Unknown (Sprite2 Id)</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Byte</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
About this field look the description for other fied "Unknown (Sprite1 Id)"</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Unknown CountDown</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
This field require some study. It appears like a countdown but it's non sure what means. It could be a counter for delayed activation.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Unknowns (Light A - H)</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
These are many unknown fields.<BR>
They could be used about the light or color of item but I don't know it in the reality.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=38% >
<B><FONT COLOR=000000>
Visible Mesh Flags</FONT>
</B></TD>
<TD WIDTH=6% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=56% >
<B><FONT COLOR=000000>
Each set bit signals a visible mesh.<BR>
Mesh 0  bit 0 (value = $1), Mesh 1 bit 1 (Value $2), Mesh 2 bit 2 (value $4).<BR>
The default value is -1, i.e. $FFFFFFFFF with all bit enabled to show all meshes of the item.<BR>
If you want get invisible a mesh use a "Clear bit .. " flipeffect, anyway remember you have already some action trigger to get visible/invisible a mesh of some moveable.<BR>
</FONT>
</B></TD>
</TR>
</TABLE>
 <BR>
 <A NAME="LINK16"></A> <BR>
<BR><HR WIDTH=90%><BR><FONT COLOR=#FF0000><CENTER><H2>The Savegame Memory Zone</H2></CENTER></FONT><TABLE WIDTH=95% BORDER=2 BGCOLOR=80FFFF ALIGN=CENTER CELLPADDING=4>
 <TR>
 <TD COLSPAN=3 BGCOLOR=80FFFF>
<B><FONT COLOR=000000>
<CENTER><H2>Savegame Memory Description</H2></CENTER>
In this memory there are all values saved and restore in/from savegames.<BR>
The most of values regard Inventory items but there is also some trng special value</FONT>
</B></TD>
</TR>
<TR BGCOLOR=FF0000 ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B>
<FONT COLOR=FFFF00>
Field Name</FONT>
</B>
</TD>
<TD WIDTH=7% >
<B>
<FONT COLOR=FFFF00>
Size</FONT>
</B>
</TD>
<TD WIDTH=54% >
<B>
<FONT COLOR=FFFF00>
Field Description</FONT>
</B>
</TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Inventory. <BR>
Keys 1 - 8<BR>
Keys 9 - 16<BR>
Pickup Items 1 - 8<BR>
Quest items 1-8</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Byte</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
All these fields work in same way: each bit signal the presence of a specific item number.<BR>
<BR>
$01 = Item 1<BR>
$02 = Item 2<BR>
$04 = Item 3<BR>
$08 = Item 4<BR>
$10 = Item 5<BR>
$20 = Item 6<BR>
$40 = Item 7<BR>
$80 = Item 8<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Inventory. <BR>
Laser Sight<BR>
Binocular<BR>
Crow Bar</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Byte</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
If the item is present the value is 1, if it is missing the value is 0</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Inventory. <BR>
Pistols mask<BR>
UZI Mask<BR>
Shotgun<BR>
CrowBow<BR>
Greanade-Gun<BR>
Revolver</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Byte</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
All these fields work in same way.<BR>
They have a bit mask to signal the presence of respective weapon and the presence of ammo and laser-sight.<BR>
<BR>
$01 = Weapon is present<BR>
$02 = Unknow (pheraps it means "the weapon is unloaded")<BR>
$04 = Weapon mounted the laser-sight<BR>
$08 = Normal ammo<BR>
$10 = Wideshot (shotgun), Super (grenade) or poisoned (crossbow) ammo<BR>
$20 = Explosive (crossbow) or flashing (grenade) ammo <BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Inventory. <BR>
Small medipacks<BR>
Large Medipacks<BR>
Flares<BR>
Ammo Pistol<BR>
Ammo UZI<BR>
Ammo revolver<BR>
Ammo Normal Shotgun<BR>
Ammo Wide-shot Shotgun<BR>
Ammo Normal Grenade<BR>
Ammo Super Grenade<BR>
Ammo Flash Grenade<BR>
Ammo Normal CrossBow<BR>
Ammo Poisoned CrossBow<BR>
Ammo Explosive CrossBow</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
All these fields indicate the respective quantity of that item.<BR>
<BR>
Some notes:<BR>
<BR>
- The shotgun ammo are slways 6 times bigger than number you read in inventory. For example if you see 5 about normal shotgun ammo, this means that in "Ammo Normal Shotgun" there will be the value 30 (because 6 * 5 = 30)<BR>
<BR>
- When in some of these field there is -1, this means: unlimited quantity.<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Inventory. Big Skin Bag</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Byte</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
Bit mask to signal the presence and the liter for Big Skin Bag<BR>
<BR>
0 = Missing<BR>
1 = Present, empty<BR>
2 = Present, one liter<BR>
4 = Present, three liters<BR>
6 = Present five liters<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Inventory. Combo items  1 - 4</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Byte</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This is a bit mask to signal the presence of two pieces for each combo item.<BR>
The combo items are items divided in two parts. Lara is able to find a single piece and when she owns both pices she can attach them getting another new item.<BR>
In this field there are informations only about single combo pieces.<BR>
<BR>
$01 = Combo Item 1 for puzzle 1<BR>
$02 = Combo Item 2 for puzzle 1<BR>
$04 = Combo Item 1 for puzzle 2<BR>
$08 = Combo Item 2 for puzzle 2<BR>
$10 = Combo Item 1 for puzzle 3<BR>
$20 = Combo Item 2 for puzzle 3<BR>
$40 = Combo item 1 for puzzle 4<BR>
$80 = Combo item 2 for puzzle 4</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Inventory. Combo items 5 - 8</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Byte</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This is a bit mask to singal the presence in inventory of single combo items for puzzle items 5,6, 7, and 8<BR>
<BR>
$01 = Combo Item 1 for puzzle 5<BR>
$02 = Combo Item 2 for puzzle 5<BR>
$04 = Combo Item 1 for puzzle 6<BR>
$08 = Combo Item 2 for puzzle 6<BR>
$10 = Combo Item 1 for puzzle 7<BR>
$20 = Combo Item 2 for puzzle 7<BR>
$40 = Combo item 1 for puzzle 8<BR>
$80 = Combo item 2 for puzzle 8</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Inventory. Little Skin Bag</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Byte</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
Bit mask to signal the presence of Little Skin Bag and also the number of liter in it.<BR>
<BR>
0 = Missing<BR>
1 = Present but empty <BR>
2 = Present one liter<BR>
4 = Present three liters</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Inventory. Mechanical Scarab</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Byte</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This field is a mask bit to keep the presence of single pieces of mechanical scarab.<BR>
<BR>
1= Full Mechanical Scarab (key + scarb already mounted)<BR>
$02= In inventory is present the Winding Key<BR>
$04 = In Inventory is present the mechanical scarab (unmounted)<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Inventory. Remaining usage of Mechanical Scarab</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This field remember how much times has been used the mechanical scarab.<BR>
When the value is 0 and lara uses another time the scarab it will explode.<BR>
When the scarab is missing in inventory or they are only the single deattached pieces (scarab and key) the value is 0<BR>
When the mechanical scarab has been just completed the engine write in this field the value 3<BR>
Everytimes the scarab will be used this value will decreased by 1<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Inventory.<BR>
Examine Item 1<BR>
Examine Item 2<BR>
Examine Item 3<BR>
Puzzle Item 1<BR>
Puzzle Item 2<BR>
Puzzle Item 3<BR>
Puzzle Item 4<BR>
Puzzle Item 5<BR>
Puzzle Item 6<BR>
Puzzle Item 7<BR>
Puzzle Item 8<BR>
Puzzle Item 9<BR>
Puzzle Item 10<BR>
Puzzle Item 11<BR>
Puzzle Item 12</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Byte</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
For all these fields the value is simply the quantity.<BR>
Zero means "missing" while other values indicates how much items of this type have been picked up by Lara</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Lara. Air for Lara</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This is the quantity of air yet availble for lara.<BR>
The max air (when the bar is full) is 1800, while when the value is 0 the HP bar (life level) will begin to decrease.<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Lara. Current Weapon</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This field stores the current selected weapon, anyway this weapon it's not necessarily in the hand of lara.<BR>
Pratically this field says to engine what weapon has to be extracted when player use the DRAW WEAPON command (space bar)<BR>
<BR>
0 = Nothing<BR>
1 = Pistols<BR>
2 = Revolver<BR>
3 = UZI<BR>
4 = Shotgun<BR>
5 = Grenade-gun<BR>
6 = CrossBow</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Lara. Environment where lara is.</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This field is very important, it signals in what environment is lara: water, underwater or ground.<BR>
All procedures to manage lara will change drammatically in according with this value.<BR>
<BR>
0 = Ground, but also climbing, monkey, jumping, falling<BR>
1 = Underwater<BR>
2 = Floating on the water<BR>
3 = Special: dozy, vehicle, hardcoded cutscenes<BR>
4 = Low water at ankles<BR>
<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Lara. Hands. Attached Lara Status</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This field describe the current action of lara about items in her hands.<BR>
1 = Special attachment: polerope, vheicle, edge wall<BR>
2 = She is taking an item (weapon,torch, flare)<BR>
3 = She is letting an item (weapon, torch, flare)<BR>
4 = She is holding in hand weapon or torch (but not flare)<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Lara. Hands. Item in the Hands of Lara (current)</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
It keeps the current item in the hands of lara, or 0 if no item is on her hands.<BR>
The value in this field could have following values:<BR>
0 = Nothing<BR>
1 = Pistols<BR>
2 = Revolver<BR>
3 = UZI<BR>
4 = Shotgun<BR>
5 = Grenade-gun<BR>
6 = CrossBow<BR>
7 = flare<BR>
8 = torch<BR>
<BR>
Trick: if you write in this field the value 8 (=torch) and write in "Attached Lara Status" field the value 2 (=lara is throwing out item) a torch will be created in spite it was not present in lara's hands</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Lara. Hands. Item in the Hands of Lara (next)</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This field has same values of "Lara. Hands. Item in the Hands of Lara (Current)" field, but in this case this field stores the item that lara will take.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Lara. Hands. Remaining time with lighted flare in the hand</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This keeps a countdown in tick frames units (one second = 30 tick frames) starting when lara takes a lightning flag in her hand.<BR>
When the countdown reaches zero (0) lara will throw out the off flare.<BR>
The max value seems 900 or 1000, and it is the max durate of flare.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Lara. Hands. Weapon in the hand</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This field describe the weapon in the hand of lara.<BR>
Remark: if lara holds an item different than weapon (flare, torch) in this field there will be 0<BR>
<BR>
0 = Nothing<BR>
1 = Pistols<BR>
2 = Revolver<BR>
3 = UZI<BR>
4 = Shotgun<BR>
5 = Grenade-gun<BR>
6 = CrossBow</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Lara. Item Index of Lara</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This is the index of lara Item memory. If you want perform operations on item memory of Lara you can read the value in this field and then copy it to "Item Index of Selected Item Memory".<BR>
The value in this index is in tomb format, so it may be used immediatly but in could be different than the index you see in ngle program about lara.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Lara. Poison1</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This field shows the quantity of poison in Lara.<BR>
It will be used to set the level of deformation of screen, bigger values, bigger deformations.<BR>
This fields has always the same value of Poison2, anyway if you place different values in a short time they will be newly the same.<BR>
<BR>
The poison of big scorpion is 2048<BR>
<BR>
<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Lara. Poison2</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This field works togheter with Lara Poison1.<BR>
It seems that this field was most important than Poison1 since if you place in this field a value different than zero, while you let 0 in Poison1 lara will be poisoned, but this doesn't happen if you do the opposite.<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Lara. Rope. Speed sliding on the rope</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
Lara is on the rope and she is moving to accellerate the speed of swinging.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Lara. Special Status of Lara</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Byte</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This is a bit mask with flags to signal some status of Lara:<BR>
<BR>
$01 = Lara hols torch or flare (but no weapon)<BR>
$04 = Lara is on ground vehicle (to verify)<BR>
$08 = Lara is burning, is in dozy mode or she has been killed<BR>
$10 = Lara is on all fours (to veriy)<BR>
$20 = It has been performed a swapmesh on lara (to verify)<BR>
$40 = Lara is in a sector with monky attribute</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Lara. Special2 Status of Lara</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Byte</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
Other status for lara:<BR>
<BR>
0x04 = Lara is crouched down (to verify)<BR>
0x20  = Lara holds a burning torch (to verify)<BR>
0x40  = Lara holds a rope (to verify)</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Lara. Test. Climb sector Test</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This field is not very useful. It says only if the sector where lara is, has on some wall a climb attribute, but it doesn't say what is this wall or if lara is closed to this wall.<BR>
The only usage could be to remove the climb skill typing zero in this field but it's not sure that it will work since the engine will continue to update this field with the correct value.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Lara. Test. Lara has a flare in her hand</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
When lara is holding a flare this field has value = 1</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Lara. Test. Lara is on rope</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This field should contain the index of rope where lara is.<BR>
If in this field there is -1 lara is NOT on the rope, while if the value is different than -1 she is on the rope and the value is the index of rope item used by lara</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Lara. Test. Lara is placing the weapon on the back</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
When lara is removing her weapon and this weapon is one of these to place on back (shotgun, crossbow, grenade-gun) this field is 1</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Lara. Test. Throw out item from the Hands</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
If lara is throwing out a torch or flare, or she is putting away the weapon.<BR>
1 = she is throwing away item</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Lara. Weapon on the back of Lara</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This field contains the further weapon on the back of lara: crossbow, graneda-gun, crowbar ect.<BR>
The value is a slot index, so for example if lara has on her back the crossbow in this field there will be the value 356<BR>
<BR>
Remark: apparently this field could change also the presence of holsters in the lara's meshes but I've not had the time to study this matter.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Statistics. <BR>
Secrets<BR>
Used MediPacks</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Byte</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
The quanity showed in statistics screen for Found Secrets and Used medipacks</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Statistics. Distance</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This field stores the current distance convered by Lara from start of the adventure.<BR>
The units used are so computed: one meter = 419 units of this value.<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Statistics. Killed Enemies</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This is the value showed in statistics screen about the number of killed enemies</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
Statistics. Used Ammos</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This field correspond to used ammo of statistic screen</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
System. Auto-Aiming for Enemy</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Byte</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
I don't remember very well, but this field should have some information about the current enemy aimed by lara, or pheraps if the auto-aiming mode is enabled or less. (To verify)</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
System. Core Game Timer</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This field is not very useful. Theorically it should store the full time elapsed from start of the adventure but in the reality this is only the value get from last load game operation.<BR>
This value will be updated only after last load/save game operation.<BR>
If you want check the active version of the core game timer you should use the "Frame 3d Counter" in code memory, or the "TRNG Organizer Timer" in Savegame memory.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
System. Disable special keys</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This is a weird field.<BR>
When in this field there is the value = 15, the player will be not able to use inventory, pause, saving or loading savegame screens.<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
System. Fog Bulb Color</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This is the color of fog bulbs in rgb format</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
System. Index of enemy aimed by Lara</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This is the index of enemy currently aimed by Lara, i.e. this is the current target of Lara's weapon<BR>
If no enemy is aimed by lara this field should has the value -1</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
System. Number of current Level</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Byte</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
It is the number of current level, following the order in script.dat of [Level] section.<BR>
The title is 0, while the first playable level is always 1.<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
System. Screen Timer</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This field is the same of screen time you saw in "Run for the iris" level<BR>
It is in tickframes (one second = 30 tick frames).<BR>
The engine will increase this value only when it is different than zero.<BR>
When this field is different than zero the timer will be showed on screen, while if it is 0, the will timer will be hidden and this field will be ignored (no more increased)</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
System. Unknown (Item chosen from Inventory?)</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This field has some link with the last item selected in inventory but if you want check for selection of inventory item I suggest to use the GT_USED_INVENTORY_ITEM global trigger.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
TRNG Index. Animation Index for Selected Animation Memory</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This is the index used to locate the animation memory to check or modiy with flipeffect/conditions "variables. memory ... Selected Animation memory"<BR>
You can change this value to choose the animation structure to check/modify</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
TRNG Index. Index of found Item</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This is the index of item found with some trng conditions, like TestPosition command or with GT_DISTANCE_FROM_ITEM globaltrigger.<BR>
In TriggerGroup command you can force the usage of this indxe with the TGROUP_USE_FOUND_ITEM_INDEX flag, in this way the futher indices in action triggers present in the exported trigger, will be ignored and at their place will be used this index about last item found from trng functions.<BR>
This index is very importat to perform an action trigger on some item with its index stored in some of your variables: just you copy the index in this "Found Index" field and then perform an exported trigger with the  TGROUP_USE_FOUND_ITEM_INDEX flag.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
TRNG Index. Index of moveable performing last AnimComand</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This is the index of moveable that owns the last AnimCommand performed.<BR>
In triggergroup you can force the usage of this index with the TGROUP_USE_OWNER_ANIM_ITEM_INDEX flag.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
TRNG Index. Item Index for Selected Item Memory</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This is the index used to choose what item structure modify with variable. memory flipeffect working on Selected Item Memory.<BR>
Usually you'll use an action trigger to set what is the item memory to use, but if you want pass via variables this index you can type in this index the number of the wished item and in following flipeffect about Item Memory it will be read/written the memory of this wished item.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
TRNG Index. Slot Index for Selected Slot Memory</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This is a trng index.<BR>
When you perform operation about variables and Slot Memory, the trng engine uses this index to know what slot will be used.<BR>
So you can write in this index the slot index about the slot memory you want check or modify.<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=39% >
<B><FONT COLOR=000000>
TRNG Organizer Timer</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This is the timer used by trng to compute the Organizer command.<BR>
This field will be always updated for each frame, indifferently if there are organizer or less.<BR>
For this reason you can use it to detect how much time elapsed from some event.<BR>
See "Tips & Tricks" chapter.<BR>
<BR>
Remark: this timer will be updated in game but it will stopped while we are in inventory or pause phase.<BR>
</FONT>
</B></TD>
</TR>
</TABLE>
 <BR>
 <A NAME="LINK17"></A> <BR>
<BR><HR WIDTH=90%><BR><FONT COLOR=#FF0000><CENTER><H2>The Code Memory Zone</H2></CENTER></FONT><TABLE WIDTH=95% BORDER=2 BGCOLOR=80FFFF ALIGN=CENTER CELLPADDING=4>
 <TR>
 <TD COLSPAN=3 BGCOLOR=80FFFF>
<B><FONT COLOR=000000>
<CENTER><H2>Code Memory Description</H2></CENTER>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=FF0000 ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B>
<FONT COLOR=FFFF00>
Field Name</FONT>
</B>
</TD>
<TD WIDTH=8% >
<B>
<FONT COLOR=FFFF00>
Size</FONT>
</B>
</TD>
<TD WIDTH=59% >
<B>
<FONT COLOR=FFFF00>
Field Description</FONT>
</B>
</TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Audio Track Number on Channel 1</FONT>
</B></TD>
<TD WIDTH=8% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=59% >
<B><FONT COLOR=000000>
This field works only when you are using bass.dll features.<BR>
In this field you find the number of audio track is currently playing on channel1, or -1 if no audio track is playing.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Audio Track Number on Channel 2</FONT>
</B></TD>
<TD WIDTH=8% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=59% >
<B><FONT COLOR=000000>
This field works like above but for channel 2</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Camera Mode Now<BR>
Camera Mode Next</FONT>
</B></TD>
<TD WIDTH=8% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=59% >
<B><FONT COLOR=000000>
These fields containg an indication about the kind of camera, i.e. the camera mode.<BR>
<BR>
0 = Follow me camera<BR>
1 = Fixed camera<BR>
2 = Look camera<BR>
3 = Combat camera<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Current Level number</FONT>
</B></TD>
<TD WIDTH=8% >
<B><FONT COLOR=000000>
Byte</FONT>
</B></TD>
<TD WIDTH=59% >
<B><FONT COLOR=000000>
This field stores the current level number, where 0 is the title and 1 is the first playable level.<BR>
Remark: this value is more update than "Level number" you find in savegame memory.<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Dash Bar Value</FONT>
</B></TD>
<TD WIDTH=8% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=59% >
<B><FONT COLOR=000000>
This is the value in the dash bar (with lara runs with rush).<BR>
The max value is 120</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Earthquake vertical movement</FONT>
</B></TD>
<TD WIDTH=8% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=59% >
<B><FONT COLOR=000000>
When there is an earthquake effect in this field there is a negative values about the distance on y axis of vertical movements of the camview</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Frame 3d Counter</FONT>
</B></TD>
<TD WIDTH=8% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=59% >
<B><FONT COLOR=000000>
This field works like "Frame System Counter", the only difference is that this "Frame 3d Counter" will be stopped in pause mode.<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Frame System Counter.</FONT>
</B></TD>
<TD WIDTH=8% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=59% >
<B><FONT COLOR=000000>
This is the main counter in tick frame of the game.<BR>
It works in savegame and pause mode, too.<BR>
For above reason it's not a good choice about the signed time method described in "Tips & Tricks" section, since the time goes on also in inventory.<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Inventory Item required in game</FONT>
</B></TD>
<TD WIDTH=8% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=59% >
<B><FONT COLOR=000000>
In this field will be store temporary the slot number of inventory item required by some interative object like switch (asking a key), doors (asking a crowbor), jeep (asking the key for the jeep) ect.<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
KeyBoard Game Command hit</FONT>
</B></TD>
<TD WIDTH=8% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=59% >
<B><FONT COLOR=000000>
This is a bit mask where each bit signal a game command enabled from player in this moment.<BR>
You can test the values or (theorically) modify them using bit operations (set bit / clear bit)<BR>
<BR>
About the values they are in absolute value the same of KEY1_ and KEY2_ constants you find in [Reference] panel of NG_Center program.<BR>
Remark: if you want test a KEY2_  value you have to add four zero "0000" at right to get the real absolute value.<BR>
<BR>
For example if you want verify if currently there is the:<BR>
<BR>
$4000 KEY2_DASH<BR>
<BR>
You should see this value like "$40000000" (added four "0" at right)<BR>
And as bit number it will be:<BR>
<BR>
 Bit 30  ($40000000 ; 1073741824)<BR>
<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Music volume</FONT>
</B></TD>
<TD WIDTH=8% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=59% >
<B><FONT COLOR=000000>
In  this field there is instensity of volume for audio tracks.<BR>
The max value is 100.<BR>
If you modify this field trng engine will change the volume but it'll work only if you are using bass.dll features</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Screen. <BR>
Width game screen in pixel<BR>
Height game screen in pixel</FONT>
</B></TD>
<TD WIDTH=8% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=59% >
<B><FONT COLOR=000000>
In these fields there are the current screen size of tomb raider screen<BR>
It's not very useful since it's not enough change this value to do modify the current resolution, anyway you could use it only to check if the screen is very little and to advise the player with a conditon trigger + print ng string to suggest to change the current video mode with setup program</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Script Dat. Level Flags</FONT>
</B></TD>
<TD WIDTH=8% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=59% >
<B><FONT COLOR=000000>
This is the bit mask with the flags from script.dat for current level.<BR>
<BR>
$0001 = YoungLara<BR>
$0002 = Weather<BR>
$0004 = Horizon<BR>
$0008 = Layer1<BR>
$0010 = Layer2<BR>
$0020 = StarField<BR>
$0040 = Lightning<BR>
$0080 = Train<BR>
$0100 = Pulse<BR>
<BR>
                      0x0200  ColAddHorizon<BR>
                      0x0400  ResetHub<BR>
                      0x0800  LensFlare<BR>
                      0x1000  Timer<BR>
                      0x2000  Mirror<BR>
                      0x4000  RemoveAmulet<BR>
                      0x8000  NoLevel</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Script Dat. Option Flags</FONT>
</B></TD>
<TD WIDTH=8% >
<B><FONT COLOR=000000>
Byte</FONT>
</B></TD>
<TD WIDTH=59% >
<B><FONT COLOR=000000>
This field is a mask bit to store some setting of script.dat file.<BR>
You can read or change the single bits to your risk.<BR>
<BR>
$01 = FlyCheat enabled<BR>

$02 = LoadSave enabled<BR>
$04 = There is a Title level<BR>
$08 = PlayAnyLevel enabled<BR>
$80 = DemoDisk enabled<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Sound SFX volume</FONT>
</B></TD>
<TD WIDTH=8% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=59% >
<B><FONT COLOR=000000>
The volume for sound effect.<BR>
Max value = 100</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Speed Layer1<BR>
Speed Layer2</FONT>
</B></TD>
<TD WIDTH=8% >
<B><FONT COLOR=000000>
Byte</FONT>
</B></TD>
<TD WIDTH=59% >
<B><FONT COLOR=000000>
These field host the values type in fourth field of Layer1 (or Layer2) script command.<BR>
<BR>
Range values:  -16   +16 <BR>
If you use negative values the movement of animation  will be inverted</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Test. Disable Fog Bulbs</FONT>
</B></TD>
<TD WIDTH=8% >
<B><FONT COLOR=000000>
Byte</FONT>
</B></TD>
<TD WIDTH=59% >
<B><FONT COLOR=000000>
This field permits to disable via software the fog bulbs.<BR>
When this field = 1 the fog bulbs will be hidden in game</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Test. How entered in current game</FONT>
</B></TD>
<TD WIDTH=8% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=59% >
<B><FONT COLOR=000000>
In this field there are values to signal the way this game section has been started.<BR>
I don't know all values, anyway 0 = New Level and 4= loaded from savegame.<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Test. There is a Flyby in progress</FONT>
</B></TD>
<TD WIDTH=8% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=59% >
<B><FONT COLOR=000000>
When there is a flyby in progress this field is = 1, while is 0 if no flyby is in progress</FONT>
</B></TD>
</TR>
</TABLE>
 <BR>
 <A NAME="LINK18"></A> <BR>
<BR><HR WIDTH=90%><BR><FONT COLOR=#FF0000><CENTER><H2>The Slot Memory Zone</H2></CENTER></FONT><TABLE WIDTH=95% BORDER=2 BGCOLOR=80FFFF ALIGN=CENTER CELLPADDING=4>
 <TR>
 <TD COLSPAN=3 BGCOLOR=80FFFF>
<B><FONT COLOR=000000>
<CENTER><H2>Slot Memory Description</H2></CENTER>
Before perform operations on Slot Memory remember to select the slot index used for following operations. You can use the flipeffect "Variables. Memory. Set the <&>Slot as Selected Slot Memory"</FONT>
</B></TD>
</TR>
<TR BGCOLOR=FF0000 ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B>
<FONT COLOR=FFFF80>
Field Name</FONT>
</B>
</TD>
<TD WIDTH=7% >
<B>
<FONT COLOR=FFFF80>
Size</FONT>
</B>
</TD>
<TD WIDTH=60% >
<B>
<FONT COLOR=FFFF80>
Field Description</FONT>
</B>
</TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Explosion Mask.</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=60% >
<B><FONT COLOR=000000>
It is a mask bit: each bit could be a weapon able to do explode it. (to verify)</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
First Animation Index</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=60% >
<B><FONT COLOR=000000>
This is the absolute index of first animation used by current items.<BR>
This field is important to compute the relative number of animation about an item.<BR>
See also the "Animation Now" field of Item memory.<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
First Mesh Index</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=60% >
<B><FONT COLOR=000000>
This is the absolute number of first mesh of current moveable<BR>
It should be used to get the relative mesh index of some mesh of the moveable.<BR>
Currently this field is not useful</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Flags. Main flags</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=60% >
<B><FONT COLOR=000000>
This is a bit mask to signal many features about current slot.<BR>
<BR>
$0001 = This slot is present (if 0 is missing in this level)<BR>
$0002 = Creature. Item with AI features<BR>
$0008 = The position of these items should be saved and restored in savegame<BR>
$0010 = Unknown but pheraps it means "Moveable of ground"<BR>
$0020 = Unknown but it could be "this item could be moved in the level"<BR>
$0040 = Unknown but it could be "this item has collisions"<BR>

$1000 = Sound effect on this item (if 0 then alway in main scene)<BR>
$2000 = Creature resistant to light weapons (pistols, uzi) to verify</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
FootStep</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=60% >
<B><FONT COLOR=000000>
Shadow below Lara or enemies (to verify how it works)</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
HP. Max Vitality at start</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=60% >
<B><FONT COLOR=000000>
In this field there is the default starting vitality for all items of current slot type.<BR>
If the slot is not killable in this field could be $c000 value</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Number of Meshes</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=60% >
<B><FONT COLOR=000000>
This is the number of meshes of current moveable.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Pointer for Collision Procedure</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=60% >
<B><FONT COLOR=000000>
The collision procedure check for collision between current item and Lara.<BR>
If you place 0 in this field all items with this slot will lose the collisions and lara will be able to across them</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Pointer for Draw Extra Procedure</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=60% >
<B><FONT COLOR=000000>
Pointer of procedure to draw some extra optional of the item.<BR>
It used for jeep and sidecar.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Pointer for Emitter Procedure</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=60% >
<B><FONT COLOR=000000>
If the item is able to emit other items the code for this operation in this pointer.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Pointer for Initialization Procedure</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=60% >
<B><FONT COLOR=000000>
All moveable with this slot will be initialized by the procedure with address stored in this field.<BR>
It's not useful change this field</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Pointer for Main Control Procedure</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=60% >
<B><FONT COLOR=000000>
Address of Main Control procedure.<BR>
The main controll procedure applies the AI, move the item, and perorm other "animated" features about current item type.<BR>
If you place a 0 in this field all items with this slot will be frozen.<BR>
Anyway if you want freeze some item it's better you use the Action trigger to freeze moveable.<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Pointer for Special Ceiling Procedure</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=60% >
<B><FONT COLOR=000000>
This procedure should handle the item about the ceiling but it's a bit misterious.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Pointer for Special Floor Procedure</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=60% >
<B><FONT COLOR=000000>
The pointer for a special procedure present only in seldom moveable.<BR>
I presume it was to permit to lara to walk over these items but I'm not sure.<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Test Attack Lara</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=60% >
<B><FONT COLOR=000000>
It could be a signal for moveable of enemy type, i.e. item should attack lara. (To verify)<BR>
<BR>
Value 1 = attack lara<BR>
Value 0 = ignore lara</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Unknown1</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=60% >
<B><FONT COLOR=000000>
Pheraps distance to enable the MIP version</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Unknown2</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=60% >
<B><FONT COLOR=000000>
Usually it has value 50</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Unknown3</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=60% >
<B><FONT COLOR=000000>
It will be copied in Custom_B field of Item structure</FONT>
</B></TD>
</TR>
<TR BGCOLOR=80FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Unknown4</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=60% >
<B><FONT COLOR=000000>
No idea about this</FONT>
</B></TD>
</TR>
</TABLE>
 <BR>
 <A NAME="LINK19"></A> <BR>
<BR><HR WIDTH=90%><BR><FONT COLOR=#FF0000><CENTER><H2>The Animation Memory Zone</H2></CENTER></FONT><TABLE WIDTH=95% BORDER=2 BGCOLOR=00FFFF ALIGN=CENTER CELLPADDING=4>
 <TR>
 <TD COLSPAN=3 BGCOLOR=00FFFF>
<B><FONT COLOR=000000>
<CENTER><H2>Animation Memory Descriptions</H2></CENTER>
Before using the Animation Memory triggers, remember to select the current memory animation with the flipeffect: "Variables. Memory. Set <&>Animation as Seleted Animation Memory.<BR>
Remark: In this table have been described only known or useful fields, while others have been ignored, anyway you can find all fields in Selected Animation Memory flipeffects</FONT>
</B></TD>
</TR>
<TR BGCOLOR=FF0000 ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B>
<FONT COLOR=FFFF00>
Field Name</FONT>
</B>
</TD>
<TD WIDTH=7% >
<B>
<FONT COLOR=FFFF00>
Size</FONT>
</B>
</TD>
<TD WIDTH=60% >
<B>
<FONT COLOR=FFFF00>
Field Description</FONT>
</B>
</TD>
</TR>
<TR BGCOLOR=00FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
First absolute Frame index</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=60% >
<B><FONT COLOR=000000>
This field is the index of first frame used by this animation.<BR>
You can use this field to discover the current relative frame number.<BR>
See also the "Frame Now" field of Memory Item.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=00FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Frame Rate</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Byte</FONT>
</B></TD>
<TD WIDTH=60% >
<B><FONT COLOR=000000>
This field multiply the repeated frames, so when this number is bigger the animation will seem more slow.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=00FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Frame Size</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Byte</FONT>
</B></TD>
<TD WIDTH=60% >
<B><FONT COLOR=000000>
This field indicates the bytes required by frames, anyway you can use this field only on read to discover if current animation is present or less.<BR>
When the FrameSIze = 0 the animation is missing.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=00FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Next Animation index</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=60% >
<B><FONT COLOR=000000>
This is the index of animation that will be performed at end this.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=00FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Number of Animation Commands</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=60% >
<B><FONT COLOR=000000>
If this animation contains AnimCommands, in this field there is the number of AnimCommands, otherwise it will be 0<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=00FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Number of State Changes</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=60% >
<B><FONT COLOR=000000>
In this field there is the number of State Change record for this animation.<BR>
The State ranges are a bit complicated, they are used to choose the correct frame to pass between current animation and another animation with same state-id than Next State id field of moveable.<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=00FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
Speed</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=60% >
<B><FONT COLOR=000000>
The speed should modify the current horizonal speed of moveable, anyway this field is very often 0.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=00FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=33% >
<B><FONT COLOR=000000>
State Id</FONT>
</B></TD>
<TD WIDTH=7% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=60% >
<B><FONT COLOR=000000>
When the animation will be performed this state id will be set for the moveable</FONT>
</B></TD>
</TR>
</TABLE>
 <BR>
 <A NAME="LINK29"></A> <BR>
<BR><HR WIDTH=90%><BR><FONT COLOR=#FF0000><CENTER><H2>The Inventory Memory Zone</H2></CENTER></FONT><TABLE WIDTH=95% BORDER=2 BGCOLOR=00FFFF ALIGN=CENTER CELLPADDING=4>
 <TR>
 <TD COLSPAN=3 BGCOLOR=00FFFF>
<B><FONT COLOR=000000>
<CENTER><H2>Inventory Memory Zone</H2></CENTER>
Before performing operations on Inventory Memory fields, remember to start always the triggergroup with the flipeffect to set the Selected Inventory Memory on what you wish work.<BR>
The flipeffect is: <BR>
"Variables. Memory. Set the <&>Inventory item as Selected Inventory Memory"</FONT>
</B></TD>
</TR>
<TR BGCOLOR=FF0000 ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=36% >
<B>
<FONT COLOR=FFFF00>
Field Name</FONT>
</B>
</TD>
<TD WIDTH=10% >
<B>
<FONT COLOR=FFFF00>
Size</FONT>
</B>
</TD>
<TD WIDTH=54% >
<B>
<FONT COLOR=FFFF00>
Description</FONT>
</B>
</TD>
</TR>
<TR BGCOLOR=00FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=36% >
<B><FONT COLOR=000000>
Distance of Cam.</FONT>
</B></TD>
<TD WIDTH=10% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This value said what is the distance of item from the cam.<BR>
When the distance grows the item will appear littler, while if the distance is shorter the item will appear bigger.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=00FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=36% >
<B><FONT COLOR=000000>
Slot of Mesh to show in Inventory</FONT>
</B></TD>
<TD WIDTH=10% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
In this field there is the slot number of the item.<BR>
The slot will be used only to show the correct mesh on the inventory screen.<BR>
For example for Large Medipack the slot number is 368</FONT>
</B></TD>
</TR>
<TR BGCOLOR=00FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=36% >
<B><FONT COLOR=000000>
String index of Name</FONT>
</B></TD>
<TD WIDTH=10% >
<B><FONT COLOR=000000>
short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
In this field there is the index of string (from english.dat) with the name to show on screen below the item.<BR>
For example for "Load" item, the number will be 78<BR>
</FONT>
</B></TD>
</TR>
<TR BGCOLOR=00FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=36% >
<B><FONT COLOR=000000>
Top Border in 2d plane.</FONT>
</B></TD>
<TD WIDTH=10% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This value is an adjustment in 2d view to move the object upward or downstair.<BR>
If in the inventory the item is too up you can increase this field to move down the item, while if the item is too low you can decrease this field move up the item.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=00FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=36% >
<B><FONT COLOR=000000>
Type Flags</FONT>
</B></TD>
<TD WIDTH=10% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This field hosts flags, i.e. one or more single values each of them used to enable a specific feature.<BR>
<BR>
This field should be not confused with "View Flags", since they are different fields.<BR>
The Type Flags, indicateds some interactive feature of this item.<BR>
<BR>
These are the acceptable flags:<BR>
<BR>
$0001 = Show this item (it is present)<BR>
$0002 = Show text "EQUIP" text (used for weapons)<BR>
$0004 = Show text "USE" text (used for many pickups and keys) <BR>
$0008 = Show the "COMBINE" text (waterskin / puzzle combos, weapon + laser-sight)
	<BR>
$0010 = Show the "SEPARATE" text (On weapons with lasersight)<BR>
$0020 = show the "EXAMINE" text <BR>
$0040 = Shot-gun ammo (allows to choose normal or wide-shot)<BR>
$0080 = Cross-bow ammo (allows to choose normal, poisoned, explosive)$0100 = Greande ammo (allows to choose: normal, super, flash)<BR>
$0200 = UZI ammo<BR>
$0400 = Pistol ammo<BR>
$1000 = LOAD the game<BR>
$2000 = SAVE the game</FONT>
</B></TD>
</TR>
<TR BGCOLOR=00FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=36% >
<B><FONT COLOR=000000>
Unknown</FONT>
</B></TD>
<TD WIDTH=10% >
<B><FONT COLOR=000000>
Long</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
I don't know the mean of this field.<BR>
I know only that this field has always only two values: +1 or -1<BR>
If you type 0 or other number different that 1, +1, the mesh of item seems disappear from inventory.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=00FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=36% >
<B><FONT COLOR=000000>
View Flags</FONT>
</B></TD>
<TD WIDTH=10% >
<B><FONT COLOR=000000>
short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This field hosts flags, i.e. one or more single values each of them used to enable a specific feature.<BR>
I don't know the mean of each value.<BR>
Surely the value 2 means: turn continuosly the item<BR>
While the flags  $4000 and $8000 have some link with usage method but I don't understand very well how they work.</FONT>
</B></TD>
</TR>
<TR BGCOLOR=00FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=36% >
<B><FONT COLOR=000000>
X Facing about the cam view on X Axis</FONT>
</B></TD>
<TD WIDTH=10% >
<B><FONT COLOR=000000>
Short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This field has the same value of field Orient_X of Puzzle script command</FONT>
</B></TD>
</TR>
<TR BGCOLOR=00FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=36% >
<B><FONT COLOR=000000>
Y Facing of an ideal cam placed in front of the item.</FONT>
</B></TD>
<TD WIDTH=10% >
<B><FONT COLOR=000000>
short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This field has the same value of field Orient_Y of Puzzle script command</FONT>
</B></TD>
</TR>
<TR BGCOLOR=00FFFF ALIGN=LEFT VALIGN=TOP>
<TD WIDTH=36% >
<B><FONT COLOR=000000>
Z Facing about the cam view on Z Axis</FONT>
</B></TD>
<TD WIDTH=10% >
<B><FONT COLOR=000000>
short</FONT>
</B></TD>
<TD WIDTH=54% >
<B><FONT COLOR=000000>
This field has the same value of field Orient_Z of Puzzle script command</FONT>
</B></TD>
</TR>
</TABLE>
 <BR>
 <A NAME="LINK20"></A> <BR>
<BR><HR WIDTH=90%><BR><FONT COLOR=#FF0000><CENTER><H2>The Variables Demo Project</H2></CENTER></FONT>The demo project about TRNG Variables contains some demonstratio about advanced usage of variables, critical memory and some new global triggers.<BR>
If you have not yet played the demo it's better you play it now, otherwise you'll be not able to understand this chapter.<BR>
<BR>
 <A NAME="LINK21"></A> <BR>
<FONT COLOR=#FF0000><H3>TRNG Timer and gained MediPacks</H3></FONT>To realize this effect we used a local trng timer to perform a countdown starting from 30 seconds with these three flipeffect triggers:<BR>
<BR>
<FONT COLOR=#FF00FF>Start a trng timer</FONT><BR>; &lt;#&gt; : Variables. Timer. Initialize &lt;&&gt;TRNG Timer to (E)Seconds<BR>
; &lt;&&gt; : Global Timer<BR>
; (E) : Seconds=   30<BR>
<BR>
; &lt;#&gt; : Variables. Timer. Start the &lt;&&gt;TRNG Timer in (E)Mode<BR>
; &lt;&&gt; : Global Timer<BR>
; (E) : Decreasing Timer (Countdown)<BR>
<BR>
; &lt;#&gt; : Variables. Timer. Show &lt;&&gt;TRNG Timer in (E)Position<BR>
; &lt;&&gt; : Global Timer<BR>
; (E) : POSITION_TOP_CENTER<BR>
<BR>
How you can see it's necessary: <BR>
<BR>
1) set the value for timer<BR>
2) start the timer <BR>
3) and also show it, because you could use also an hidden timer in some circustances<BR>
<BR>
<FONT COLOR=#FF00FF>Detect if timer reaches a given value</FONT><BR>Then we placed a globaltrigger command to detect if the timer reach 0 time.<BR>
When this happen it means the player was not able to save seconds and we'll show simply a text to signal the end of the time:<BR>
<BR>
; Exporting: TRIGGER(259:0) for FLIPEFFECT(66)<BR>
; &lt;#&gt; : Text. Set &lt;&&gt;color and (E)position for next Print String flipeffect<BR>
; &lt;&&gt; : Red<BR>
; (E) : Bottom line, central alignment<BR>
; Values to add in script command: $2000, 66, $103<BR>
<BR>
; Exporting: TRIGGER(772:0) for FLIPEFFECT(64)<BR>
; &lt;#&gt; : Text. Print ExtraNG &lt;&&gt;string on screen for (E) seconds<BR>
; &lt;&&gt; : 4: The time is completed<BR>
; (E) :    5 seconds<BR>
; Values to add in script command:  $2000, 64, $504<BR>
<BR>
; Exporting: TRIGGER(513:0) for FLIPEFFECT(270)<BR>
; &lt;#&gt; : Variables. Timer. Hide &lt;&&gt;TRNG Timer in (E)Seconds<BR>
; &lt;&&gt; : Global Timer<BR>
; (E) : Seconds=    2<BR>
; Values to add in script command: $2000, 270, $201<BR>
<BR>
TriggerGroup=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, $2000, 66, $103, $2000, 64, $304, $2000, 270, $201<BR>
<BR>
GlobalTrigger=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, IGNORE, GT_TRNG_G_TIMER_EQUALS, 0, IGNORE, 1<BR>
<BR>
<FONT COLOR=#FF00FF>Convert the saved seconds in medipacks</FONT><BR>Differently it's most interesting when the player is able to stop the timer reaching the trigger at  end of the race.<BR>
In that sector there is a trigger to perform the TriggerGroup=2  in script.dat file:<BR>
<BR>
; Exporting: TRIGGER(1:1) for FLIPEFFECT(265)<BR>
; &lt;#&gt; : Variables. Timer. Stop the &lt;&&gt;TRNG Timer<BR>
; &lt;&&gt; : Global Timer<BR>
; (E) : <BR>
; Values to add in script command: $2000, 265, $1<BR>
<BR>
; Exporting: TRIGGER(769:1) for FLIPEFFECT(270)<BR>
; &lt;#&gt; : Variables. Timer. Hide &lt;&&gt;TRNG Timer in (E)Seconds<BR>
; &lt;&&gt; : Global Timer<BR>
; (E) : Seconds=    3<BR>
; Values to add in script command: $2000, 270, $301<BR>
<BR>
; Exporting: TRIGGER(51:0) for FLIPEFFECT(271)<BR>
; &lt;#&gt; : Variables. Numeric. Copy &lt;&&gt;Numeric Variable to CurrentValue<BR>
; &lt;&&gt; : Global Long Timer<BR>
; (E) : <BR>
; Values to add in script command: $2000, 271, $33<BR>
<BR>
; Exporting: TRIGGER(7935:0) for FLIPEFFECT(253)<BR>
; &lt;#&gt; : Variables. Numeric. Divide &lt;&&gt;Numeric Variable by (E)Value<BR>
; &lt;&&gt; : Current Value<BR>
; (E) : Value    30<BR>
; Values to add in script command: $2000, 253, $1EFF<BR>
<BR>
; Exporting: TRIGGER(58:0) for FLIPEFFECT(273)<BR>
; &lt;#&gt; : Variables. Memory. Add to &lt;&&gt;Savegame Memory the CurrentValue<BR>
; &lt;&&gt; : Inventory. Small medikit (Short)<BR>
; (E) : <BR>
; Values to add in script command: $2000, 273, $3A<BR>
<BR>
; Exporting: TRIGGER(1286:0) for FLIPEFFECT(64)<BR>
; &lt;#&gt; : Text. Print ExtraNG &lt;&&gt;string on screen for (E) seconds<BR>
; &lt;&&gt; : 6: You saved #0800 seconds\ntherefore you gained #0800 medipacks.<BR>
; (E) :    5 seconds<BR>
; Values to add in script command: $2000, 64, $506<BR>
<BR>
TriggerGroup=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2, $2000, 265, $1,    $2000, 270, $301, $2000, 271, $33, &gt;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   $2000, 253, $1EFF, $2000, 273, $3A,  $2000, 64, $506<BR>
<BR>
We performed the operations:<BR>
<BR>
1) Stop the timer<BR>
2) Hide the timer (otherwise the timer will remain on screen forever in spite it is still)<BR>
3) Then we read the resulting time from local timer variable<BR>
4) And divided that value by 30, because the timer works in tick frames unit, where each second is 30 units<BR>
5) Now we have in CurrentValue variable the number of saved seconds and we can convert it in medipacks<BR>
6) adding the currentvalue to field of savegame memory with number of little medipakcs in inventory<BR>
7) At end we show the result, using a text where we type the placefolder of CurrentValue:  #0800<BR>
 <A NAME="LINK22"></A> <BR>
<FONT COLOR=#FF0000><H3>The skill about Jump Gain</H3></FONT>You can see all exported triggers used for this skill in script.txt file with comments.<BR>
Here I prefer describe in natural language the method used and the problems that has been necessary to solve in this procedure.<BR>
<BR>
<FONT COLOR=#FF00FF>The compute to enhance the jumping</FONT><BR>To increase the length of jump we have different way: we could increase the horizzontal speed so to get, in same time of the jump, a bigger distance.<BR>
Another way is to keep "up" lara modifying its Y position, that set the vertical position of lara in 3d world.<BR>
The Y coordinates move up with negative values, and move down with positive values, so to keep up lara we should subtract values to her Y Position (or to add negative values, since is the same thing.<BR>
We used both method in same time to get more realistic the jump.<BR>
<BR>
<FONT COLOR=#FF00FF>From where could we take the value for Jump Gain?</FONT><BR>Once we decided how increase the jump we have to choose what value we'll use to perform this compute, i.e. the value of jump gain to use in above mathematic formula.<BR>
<BR>
We chose the residual dash speed in dash bar, since we have this value in Code Memory and it is consistent with the pyshics: if lara run faster before jumping she should peform a bigger jump.<BR>
In the reality there was a boring problem in this method to get the jump gain value: the engine doesn't allow to jump when lara is in rush phase, it waits that lara comes back to normal speed and only in that moment the engine will permit to her to jump.<BR>
<BR>
To avoid this problem I placed a trigger to catch the residual dash speed, on the sector closed to start jump.<BR>
In this way the trigger group used to catch the residual speed will work some instant before the real jumping and so it could have yet a meaningful value (differently when lara jumps that value is always 0).<BR>
<BR>
<FONT COLOR=#FF00FF>Future enhancements</FONT><BR>This is boring because we should place these sector strips closed to all jump zone. <BR>
Anyway this is only a sample used to describe the method to add new skills, and not the best skill you can get.<BR>
You should find anoter method to get a starting value to use as jump-gain,  better if you get this value using a global trigger and some condition, both with triggers placed in all jump zones.<BR>
For example you could use a variable where add the powerness of lara and this value could be incresed with the training: more lara jumps and more jump skill she will get, like it happens in many games.<BR>
<BR>
<FONT COLOR=#FF00FF>Catch the Jump Gain value</FONT><BR>1) Lara touches the sector closed to jump zone<BR>
2) The TrigggerGroup=3 will be performed<BR>
3) In this TriggerGroup 3 will be read the value of code memory "Dash Bar Value" <BR>
4)Since when there is no dash bar the value in "Dash Bar Value" is 120, we'll perform the operation 120 - "Dash Bar Value", getting in this way our value to use as Jump Gain<BR>
5) We'll perform a condition to verify that the Jump Gain is &gt;= 1<BR>
6) If the condition is true (Jump Gain &gt;= 1) we'll set a bit to signal that there is a Jump Gain to use<BR>
7) We used the bit 0 (with absolute value $01) of Local Long Alfa<BR>
8) Now we start the local trng timer to remember the moment when we catched a valid jump gain. The reason of this operation is to give a max time to perform the super jump, while when this time has elapsed the jump gain will be aborted. The reason of this expiry time is to avoid that a rush value created and not used immediatly may be used many time later.<BR>
<BR>
<FONT COLOR=#FF00FF>Detect the jump and apply the Jump Gain</FONT><BR>1) Using the GlobalTrigger =2 we check if lara is jumping and in same time the bit 0 (value $01) of Local Long Alfa is set. This condition are in TriggerGroup=4 and this triggergroup will be place in ConditionTriggerGroup field of GlobalTrigger=2<BR>
2) If both conditions are true we can apply the jump gain<BR>
3) The triggers to modify speed and Y Position are in TriggerGroup=5, and we place the Id =5 in PerformTriggerGroup field of our GlobalTrigger=2<BR>
4) We replace the Horizontal Speed with the value computed in this way: Jump Gain (saved in Local Short Beta1 variable) + 75, where 75 is the common horizontal speed in forward jump, so we can increase the standard hspeed only of jump gain value. This method it's better than adding directly the Jump Gain to H_Speed value becuase otherwise we could create a huge H_Speed with a continue growing.<BR>
5) Then we decrease Y Position to move lara upward, but for this compute we cann't use the original Jump Gain in LS_Beta1 becuase it could be too big and lara could fly away instead or falling down as is the normal.<BR>
6) So we reduce temproary the jump gain value before subtracting it to Y Position<BR>
7) We divide the Jump Gain by 4 and then subtract this value to Y Position<BR>
8) Now we print a text showing the jump gain. We used a text with a time of only one second, because it will repeated continuosly until the jump mode is on<BR>
9) At end we clear and start newly the local timer. This is to have another expiry time. In this case we need to clear the bit 0 (value $01) when the jump has been completed. So, while the jump is on the timer will be continuosly cleared all will work, while when lara touches the ground and the condtiion for globaltrigger=2 will be false, the local timer will be able to continue.<BR>
<BR>
<FONT COLOR=#FF00FF>Clear all when the jump has been completed</FONT><BR>1) Now we have yet the bit 0 of LL_Alfa set to signal the jump gain, but we have to clear this variable when the jump has been completed<BR>
2) We use the GlobalTrigger=3 to clear all.<BR>
3) In GlobalTrigger3 we used the GT_TRNG_L_TIMER_EQUALS = 45 (tick frames, i.e. 1.5 seconds) condtion, so when it elapsed 1.5 seconds by the end of jump the condition will be true<BR>
4)When the local timer is at 1.5 seconds, the TriggerGroup=6 will be performed<BR>
5)In TriggerGroup=6, we clear the bit 0 of LL_Alfa, and we clear also LS_Beta1 value and the local timer<BR>
6)Now all variabels used to remember the jump gain mode have been cleared<BR>
<BR>
 <A NAME="LINK25"></A> <BR>
<FONT COLOR=#FF0000><H3>The wooden Door: how save and restore our changes</H3></FONT>The method to remove the collision from the wooden door is a bit idiot, ok, but that example has been necessary to describe a very important operation, about saving and restoring of our patches, that we could have to perform in some circustances.<BR>
When we modify some memory zone with the flipeffect we get immediatly some result, but these effects could be temporary since when the player will save and then will reload the game our changes could disappear.<BR>
The reason of this disappearance is that many memory fields will be not saved and restored with savegame byself, and therefore, when the player will reload the savegame all these memory zones will be reset to their default values.<BR>
To avoid this situation we have to save in savegame some signal to rmember the changes we made, to have then the chance to restore them newly when the savegame has been just reloaded.<BR>
<BR>
<FONT COLOR=#FF00FF>The global triggers: GT_BEFORE_SAVING_VARIABLES and GT_AFTER_RELOADING_VARIABLES</FONT><BR>We can use some new global triggers to detect when the game is to be saved, or when it has been just reloaded.<BR>
In this way we can perform some triggergroup (linked with GlobalTrigger) when these two fundamental operations will happen.<BR>
<BR>
First step is to understand what should be saved (and then restored) in savegame.<BR>
<BR>
Please, don't confuse this speech with the requirement to save and reload the trng variables: it's is not this the true. All trng variables will be saved and reloaded in automatic way.<BR>
<BR>
Differently we have to save and restore only the changes we made in some memory zone and to remmeber what we made we'll use some variable where storing a signal.<BR>
<BR>
When you created some new skill you should verify if it is persistent, i.e. if it remains also after the saving and then reloading of the game.<BR>
If it remains then it's perfect: you have no need of saving anything.<BR>
<BR>
While when you see it disappears after reloading you'll have to perform following operations<BR>
<BR>
<FONT COLOR=#FF00FF>Standard procedure to saving our patch</FONT><BR>1) We have to decide (and noting it) what variable (and bit) we'll use to signal this patch to save/restore<BR>
2) In our demo project we used the bit 1 (value 2) of Local Long Alfa variabile, since the bit 0 (value 1) had already used to signal the jump gain mode.<BR>
3) When our patch is only about a true/false (or applied/not applied) state we can use a single bit, while if we make a change using a number that could have different values we'll have to use a whole variable, saving the specific number used in our patch in that variable<BR>
4) When the game is to be saved and the global trigger GT_BEFORE_SAVING_VARIABLES has been enabled, we have to detect if our patch is really activated in that moment, because it could be not yet applied, of course<BR>
5) If in game we discover it has been applied, we'll have to put our signal: the bit 1 (value 2) of LL_Alfa will be set.<BR>
6) In our project to verify if the patch had already applied just check the memory field that could be changed: the Slot.Pointer Collision procedure.<BR>
7) If that field is zero, this means we have already applied the patch, and we set the bit 1 in LL_Alfa<BR>
<BR>
<FONT COLOR=#FF00FF>Standard procedure to reloading our patches</FONT><BR>1) When the it will be activated the GT_AFTER_RELOADING_VARIABLES global triggers, we'll perform a trigger group to test if our signal is present.<BR>
2) In our example we have to test only the bit 1 of LL_Alfa variable, but if we had many patches we should have to test many different memory fields<BR>
3) If we found the signal, we have to apply newly the same patch, therefore we'll write newly a 0 in Slot.Pointer Collision memory field<BR>
4) While if the signal is missing, this means there was no patch applied when the game has been saved, so we have nothing to change because the defalt values will be already restored by load game procedure.<BR>
<A NAME="LINK23"></A> <BR>
<BR><HR WIDTH=90%><BR><FONT COLOR=#FF0000><CENTER><H2>Tips & Tricks</H2></CENTER></FONT>In this chapter we'll see some little tricks to use in best way the variable features.<BR>
 <A NAME="LINK24"></A> <BR>
<FONT COLOR=#FF0000><H3>How discover the sense of some memory fields</H3></FONT>The descriptions of many memory fields are missing or inaccurate, because I'm not the author of Tomb Raider engine and therefore I only tried to understand how it works but in this operation I could have wronged in many circustances.<BR>
The best way to understand how works a field is to see in what way it changes during the game.<BR>
So, if  you want understand how a given field works , i.e. what values will be written in that field from the tomb4, and what those values mean, you can use this easy method:<BR>
<BR>
1) Create a TriggerGroup that read the content of memory field you want study and copy this value in a common numeric variable.<BR>
2) Now, using a GlobalTrigger with the GT_ALWAYS, perform continuosly (i.e. ALWAYS) above trigger group<BR>
3) Now we'll have in some variable the content of our memory field to study<BR>
4) Now we can simply enable the diagnostic for variables to have on screen that value continuosly updated<BR>
5) Then, in the case it  changes too fastly, we could show this value also in the log file created with the tomb4_log.exe utiltiy<BR>
6) To print our value in log file just we add to our triggergroup also the flipeffect "Variables. Log. Print in log file the &lt;&&gt;Extra NG String"<BR>
7) We use as Extra NG String  a text with a variable placefolder to show the current value of that variable.<BR>
8) Now, in game we can see how the contents of that field changes in according with our actions  in game.<BR>
<BR>
<FONT COLOR=#FF00FF>Insert in Diagnostic messages the content of memory field</FONT><BR>Now we'll create a pratical example of above procedure.<BR>
Let say we want study better the working of "Flags of Item" field of Memory Item.<BR>
As first step we'll place in our project the enemy we'll use for this study, and we create an action trigger on this item to set the Selected Item Memory for it.:<BR>
<BR>
; Exporting: TRIGGER(54:0) for ACTION(495)<BR>
; &lt;#&gt; : HARPY                      ID:495    in sector:(10,7) of Room70<BR>
; &lt;&&gt; : Variables. Set the index of &lt;#&gt;moveable as Selected Item<BR>
; (E) : <BR>
; Values to add in script command: $5000, 495, $36<BR>
<BR>
We chose the Harpy item.<BR>
Now copy above exported trigger in script.txt<BR>
<BR>
Then we add other exported trigger to copy the value of "Flags of Item" field to the variable Local Long Delta<BR>
<BR>
; Exporting: TRIGGER(10098:0) for FLIPEFFECT(256)<BR>
; &lt;#&gt; : Variables. Memory. Copy to &lt;&&gt; Numeric Variable the (E)Selected Item Memory<BR>
; &lt;&&gt; : Local Long Delta<BR>
; (E) : Flags of Item (Long)<BR>
; Values to add in script command: $2000, 256, $2772<BR>
<BR>
To have a list of all changes in "Flags of Item" field we add also a trigger to print the content of LL_Delta variable in the log file created with the utiltiy Tomb4_log.exe:<BR>
<BR>
; Exporting: TRIGGER(1650:0) for FLIPEFFECT(309)<BR>
; &lt;#&gt; : Variables. Log. Print the value of &lt;&&gt;Numeric Variable in (E)Format<BR>
; &lt;&&gt; : Local Long Delta<BR>
; (E) : Hexadecimal and Binary<BR>
; Values to add in script command: $2000, 309, $672<BR>
<BR>
Now we copy all above triggers in a new TriggerGroup:<BR>
<BR>
TriggerGroup= 15, $5000, 495, $36, $2000, 256, $2772, $2000, 309, $672<BR>
<BR>
And, at end, we create our GlobalTrigger to perform always above TriggerGroup 15:<BR>
<BR>
GlobalTrigger=  8, IGNORE, GT_ALWAYS, IGNORE, IGNORE, 15<BR>
<BR>
Then we have to enable the diagnostic for variables in the [Options] section of the script:<BR>
<BR>
Diagnostic=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ENABLED<BR>
DiagnosticType=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DGX_COMMON_VARIABLES, IGNORE<BR>
<BR>
Well done. Now we completed the job on the script.txt file.<BR>
<BR>
In the project we'll place somewhere a trigger to enable out item, the Harpy, because it will be interesting to see the value of "Flags of Item" first of activation and then we triggered the item.<BR>
<BR>
Now we can build the script and the level, we'll start the "Tomb4_log.exe" utility, if we wish having the list of log file, and then we play the game.<BR>
On the screen we'll see the Delta variable changes when the "Flags of Item" changes, while in log file we'll be able to see all the list of changes in progression.<BR>
<BR>
<FONT COLOR=#FF00FF>Study the log file</FONT><BR>In our example I got these changes of values in the log:<PRE><BR>
   6859:   Local Long Delta =  %00000000000000000000000000100110 $26  ;not yet enabled<BR>
  26078:   Local Long Delta =  %00000000000000000000000000100011 $23  ;enabled in game<BR>
  67266:   Local Long Delta =  %00000000000000000000000000110011 $33  ;lara shots harpy<BR>
  67297:   Local Long Delta =  %00000000000000000000000000100011 $23  ;nothing<BR>
  67609:   Local Long Delta =  %00000000000000000000000000110011 $33  ;lara shots harpy<BR>
  67641:   Local Long Delta =  %00000000000000000000000000101011 $2B  ;harpy touches lara<BR>
  67906:   Local Long Delta =  %00000000000000000000000000100011 $23  ;nothing<BR>
  70078:   Local Long Delta =  %00000000000000000000000000000100 $4   ;harpy has been killed<BR>
</PRE><BR>
I chose the log of variable with binary format to recognize immediatly the single bit changing.<BR>
<BR>
I added the comments at right about what I was doing when it occured that change in Flags of Item<BR>
<BR>
Looking above log we can discover for example that, when lara hits the harpy the bit $10 will be added for a short instant (from $23 to $33 = + $10), so the $10 bit should mean "Current item has been injured"<BR>
<BR>
Then we could discover other interesting facts (really already known, see the <A HREF="#LINK15">The Item Memory Zone</A> )<BR>
The bit $20 is present when the harpy has not yet been enabled, and it remains when it has been enabled, but it disappears when the harpy has been killed.<BR>
So we could think about the $20 bit as "The enemy is yet interesting for the game. It is to enable or it is living". While when the bit $20 is missing the enmey is dead and it will be no more used.<BR>
<BR>
<FONT COLOR=#FF00FF>Find an usage for our discoveries</FONT><BR>Once we discovered some interesting flag, we could perform an experiment modifying with some trigger that flag to see if we can get some of interesting in this way.<BR>
For example, about above discovery, we could try to write in "Flags of Iitem" of Harpy, atfter it has been killed, the value $26, i.e. the value was present before its activation, to verify if then this operation we can enable it newly, in spite it was already killed.<BR>
These experiments are useful also like a verification about our discoveries.<BR>
<BR>
<FONT COLOR=#FF00FF>Perform Experiments</FONT><BR>Another method to discover the sense of some field or flags in a given field, is to write in that field some value and then see what happens in the game.<BR>
For example there are many flags of "Flags of Item" that I've not ever found in the game, but pheraps some of them is really usefull in some matter. A way to discover is: to try it.<BR>
For example I'm not sure about what means the bit $0002 in the "Flags of Item" field.<BR>
A mode to discover is try to enable that bit while the harpy is living to see what happen in the game in that moment.<BR>
Remember that to enable a single bit you have to use a "Bit operation". To create that bit you use "Set bit" while to remove that bit you use "Clear bit"<BR>
<BR>
When you perform these experiments it's probably you'll have often the feeling that nothing happened, but pheraps you should only apply different actions on that item to test the change in better way.<BR>
<BR>
For example you could place other creatures to see if your change modifies the rapport between our harpy and other enemies. <BR>
You could try to shoot the harpy to see if there are some differences in combat phase now.<BR>
You could try to place some AI items below the harpy to see if at least in this way there is some change.<BR>
Ect.<BR>
 <A NAME="LINK26"></A> <BR>
<FONT COLOR=#FF0000><H3>Enable the debugging for script commands</H3></FONT>The building of new skills is a complicated matter.<BR>
You'll have to create many TriggerGroups,  conditional triggers and perform mathematic operations with variabile, other (in some cases) to have to save and reload your changes in variables before saving the game.<BR>
It's probably that for these reason, your code doesn't works fine at first attempt.<BR>
When you don't understand becuase your script commands don't work it's advisable enable the debugging for script commands, so to have the chance to see what happens in the trng engine while you are testing your new skills.<BR>
<BR>
<FONT COLOR=#FF00FF>Full debugging or concise debugging</FONT><BR>To enable the debugging you use the script commands for diagnostics:<BR>
<BR>
Diagnostic=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ENABLED<BR>
DiagnosticType=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DGX_LOG_SCRIPT_COMMANDS, IGNORE<BR>
<BR>
When you use the DGX_LOG_SCRIPT_COMMANDS flag in DiagnosticType command, no new value will be showed on the screen but you'll have in log file created with Tomb4_log.exe utiltiy (you find it in TRLE\TOOLS folder) a long list of diagnostic mexages everytime trng performs some TriggerGroup, GlobalTrigger, Organizer or Switch.<BR>
<BR>
There are two kind of script debugging: the full debug, that you enable with the command:<BR>
<BR>
DiagnosticType=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DGX_LOG_SCRIPT_COMMANDS, IGNORE<BR>
<BR>
And the concise debugging that you enable adding to above command the EDGX_CONCISE_SCRIPT_LOG value <BR>
<BR>
DiagnosticType=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DGX_LOG_SCRIPT_COMMANDS, EDGX_CONCISE_SCRIPT_LOG<BR>
<BR>
About advantages and disadvantages of this choice you can consider that:<BR>
<BR>
The full debugging has more informations, so you can really find all that happens in your script commands, but it has the disadvante to create a huge log file, where it will be more difficultous find the right point to analyse.<BR>
While the concise debugging is the opposite: you have less informations but you get a more concise log file that it will more easy to read.<BR>
<BR>
I suggest you to perform you first attempt with concise debugging, and only if you don't find the problem you may try with full debugging.<BR>
<BR>
<FONT COLOR=#FF00FF>Example of Script Debugging</FONT><BR>Here we have an example of concise log of demo project, when Lara stops the timer countdown and she gains some medipacks<BR>
<TT><BR>
  95485:   {Global Long Timer} = 900<BR>
 108266:   Perform TriggerGroup=2<BR>
 108266:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perform Trigger: [$2002, 265, $1]<BR>
 108266:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Variables. Timer. Stop the &lt;&&gt;TRNG Timer"  &lt;&lt;&&gt; = 1  (E) = 0&gt;<BR>
 108266:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TriggerResult=true<BR>
 108281:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perform Trigger: [$2002, 270, $301]<BR>
 108281:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Variables. Timer. Hide &lt;&&gt;TRNG Timer in (E)Seconds"  &lt;&lt;&&gt; = 1  (E) = 3&gt;<BR>
 108281:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TriggerResult=true<BR>
 108281:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perform Trigger: [$2002, 271, $33]<BR>
 108281:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Variables. Numeric. Copy &lt;&&gt;Numeric Variable to CurrentValue"  &lt;&lt;&&gt; = 51  (E) = 0&gt;<BR>
 108281:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{Global Long Timer} = 518<BR>
 108297:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{CurrentValue} = 518<BR>
 108297:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TriggerResult=true<BR>
 108297:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perform Trigger: [$2002, 253, $1EFF]<BR>
 108297:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Variables. Numeric. Divide &lt;&&gt;Numeric Variable by (E)Value"  &lt;&lt;&&gt; = 255  (E) = 30&gt;<BR>
 108297:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{CurrentValue} = 518<BR>
 108297:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{CurrentValue} = 17<BR>
 108297:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TriggerResult=true<BR>
 108313:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perform Trigger: [$2002, 273, $3A]<BR>
 108313:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Variables. Memory. Add to &lt;&&gt;Savegame Memory the CurrentValue"  &lt;&lt;&&gt; = 58  (E) = 0&gt;<BR>
 108313:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{Inventory. Small medikit} = 3<BR>
 108313:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{CurrentValue} = 17<BR>
 108313:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{Inventory. Small medikit} = 20<BR>
 108313:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TriggerResult=true<BR>
 108328:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perform Trigger: [$2002, 64, $506]<BR>
 108328:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Text. Print ExtraNG &lt;&&gt;string on screen for (E) seconds"  &lt;&lt;&&gt; = 6  (E) = 5&gt;<BR>
 108328:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TriggerResult=true<BR>
</TT><BR>
<BR>
How you can see from above log, everytime a variable has been used (read, written or tested with a condition) its value will be showed in the log.<BR>
This feature is very often a big help to understand what doesn't work in your script commands.<BR>
<BR>
<FONT COLOR=#FF00FF>Conditional Triggers</FONT><BR>About that "TriggerResult=true" you see in above log, it could seem weird since they are not conditions, anyway this is normal: also the common triggers return always a result and for the command triggers it will be always "true" while for condition triggers the result could be true or false, of course.<BR>
Thanks to this method you can insert in a conditional TriggerGroup also some common (non conditional) triggers, and this chance is very important when you need to move a value from a variable to another before performing a condition.<BR>
<BR>
See this example of log file in full mode:<BR>
<TT><BR>
   5735:   SCAN GlobalTrigger=2<BR>
   5750:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GlobalTrigger=2, check for ConditionTriggerGoup=4<BR>
   5750:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perform TriggerGroup=4<BR>
   5750:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perform Trigger: [$8002, 112, $2C]<BR>
   5750:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Variables. The &lt;#&gt;Numeric Variable has the (E)Bit set"  &lt;&lt;#&gt; = 112 (E) = 0&gt;<BR>
   5750:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Required to use index of trigger (TGROUP_USE_TRIGGER_ITEM_INDEX)<BR>
   5750:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{Local Long Alfa} = 1<BR>
   5750:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TrigggerResult=true<BR>
   5766:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perform Trigger: [$2002, 256, $4FF]<BR>
   5766:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Variables. Memory. Copy to &lt;&&gt; Numeric Variable the (E)Selected Item Memory"  &lt;&lt;&&gt; = 255  (E) = 4&gt;<BR>
   5766:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Required to use index of trigger (TGROUP_USE_TRIGGER_ITEM_INDEX)<BR>
   5766:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{State Id Now} = 1<BR>
   5766:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{CurrentValue} = 1<BR>
   5766:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TriggerResult=true<BR>
   5781:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perform Trigger: [$8002, 3, $30]<BR>
   5781:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Variables. The Current Value variable is = than &lt;#&gt;Value"  &lt;&lt;#&gt; = 3 (E) = 0&gt;<BR>
   5781:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Required to use index of trigger (TGROUP_USE_TRIGGER_ITEM_INDEX)<BR>
   5781:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{CurrentValue} = 1<BR>
   5781:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TrigggerResult=false<BR>
   5781:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Conditional block is false<BR>
   5797:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;END TriggerGroup=4<BR>
   5797:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ConditionTriggerGroup = false<BR>
   5797:   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;END GlobalTrigger=2<BR>
   5797:   XXXXXXXXXXXXXXXXXXXXX  START NEW GAME FRAME XXXXXXXXXXXXXXXXXXXXX<BR>
</TT><BR>
<BR>
In above conditional trigger we tested two conditions:<BR>
1) Verify if in Local Long Alfa variable the bit 0 (value 1) is set<BR>
2) And if the current state id of lara is 3 <BR>
<BR>
While for first condition we can perform it with a single trigger, with other condition for state id of lara is not possible because we need to move the value from "State-id" item field to a common variable before checking it with a condition trigger.<BR>
Luckly this operation is possible since the non-conditional trigger to move the value from state-id to current value don't modify anything in the conditional list.<BR>
<BR>
<FONT COLOR=#FF00FF>Break and resume the debugging log</FONT><BR>When you use the full debugging the quantity of text written in the log file is huge. <BR>
If you need of some time to reach the correct position for your test you could get some MB of log file for nothing.<BR>
In this case you can use the function key F9 to break temporary the debugging mode, and resume it later, always using the F9 key.<BR>
 <A NAME="LINK27"></A> <BR>
<FONT COLOR=#FF0000><H3>Force the saving of coordinates about some Moveable</H3></FONT>If you use some variable flipeffect to change the position of facing of some moveable you could need to use an  Action trigger to say to trng engine to save and then reload the coordinates (and facing) of this moveable in the savegame.<BR>
To realize this target you have to use following action trigger:<BR>
<BR>
"Enemy. Save the coordinates and facing of &lt;#&gt;Moveable in savegame"<BR>
<BR>
There some considerations we can do about this situation:<BR>
<BR>
1) If it's possible it's better using the standard Action triggers to move items or change their facing, both to re-build an your own procedure to do the same thing.<BR>
The trng action triggers have been tested for a long time and they save and reload byself the position and facing of changed items.<BR>
2) It's not always necessary perform above action trigger, you have no need of it, for example, if the item is a creature, because all creatures (moveables with AI features) will be always saved and reloaed in/from savegame.<BR>
 <A NAME="LINK28"></A> <BR>
<FONT COLOR=#FF0000><H3>How detect time intervals  without using the timer</H3></FONT>In the variable project we used the trng timer to check when it elapsed 1.5 seconds from start of super jump.<BR>
There are many situations where we wish keep the control of elapsed time.<BR>
<BR>
If we have too new skills working togheter the two trng timers could be not enough for all our requests.<BR>
Fortunately there is an easy trick to have many counter in same moment and it's not necessary using trng timers.<BR>
<BR>
You can use the Organizer Timer value, you can read it in Savegame Memory.<BR>
The Organizer timer  will be always updated while the program is in game mode (no inventory or pause screen).<BR>
Thanks to this timer we can save the current Organizer timer, and then verify how much tick frames have elapsed from last reading.<BR>
<BR>
For example if we want compute when it will be elapsed 30 tick frames from a given moment, just we copy the Organizer Timer in a long variable, for example the Beta variable, and in following cycles we could check how much time has elapsed with the formula:<BR>
<BR>
TimeNow = OrganizerTimer - Beta<BR>
<BR>
This method permits to have multiple timers to syncornize our effects.<BR>
<BR>
<BR></B></BODY></HTML>
