; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\Dominik\Google Drive\TLD\Script\Plugin_Renaissance\Source\trng.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??$_Pow_int@M@@YAMMH@Z				; _Pow_int<float>
PUBLIC	?pow@@YAMMH@Z					; pow
PUBLIC	_sqrtf
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?enumSAVT@@3UStrEnumSAVT@@A			; enumSAVT
PUBLIC	?enumPHASE@@3UStrEnumPHASE@@A			; enumPHASE
PUBLIC	?enumFWEAP@@3UStrEnumFWEAP@@A			; enumFWEAP
PUBLIC	?enumFSLOT@@3UStrEnumFSLOT@@A			; enumFSLOT
PUBLIC	?enumCOLF@@3UStrEnumCOLF@@A			; enumCOLF
PUBLIC	?enumDENV@@3UStrEnumDENV@@A			; enumDENV
PUBLIC	?enumFC@@3UStrEnumFC@@A				; enumFC
PUBLIC	?enumSMAIN@@3UStrEnumSMAIN@@A			; enumSMAIN
PUBLIC	?enumWTF@@3UStrEnumWTF@@A			; enumWTF
PUBLIC	?enumAPPC@@3UStrEnumAPPC@@A			; enumAPPC
PUBLIC	?enumCPU@@3UStrEnumCPU@@A			; enumCPU
PUBLIC	?enumFIND@@3UStrEnumFIND@@A			; enumFIND
PUBLIC	?enumCTRET@@3UStrEnumCTRET@@A			; enumCTRET
PUBLIC	?enumFLH@@3UStrEnumFLH@@A			; enumFLH
PUBLIC	?enumCBEET@@3UStrEnumCBEET@@A			; enumCBEET
PUBLIC	?enumJOINT@@3UStrEnumJOINT@@A			; enumJOINT
PUBLIC	?enumFITEM@@3UStrEnumFITEM@@A			; enumFITEM
PUBLIC	?enumWSKIN@@3UStrEnumWSKIN@@A			; enumWSKIN
PUBLIC	?enumSC@@3UStrEnumSC@@A				; enumSC
PUBLIC	?enumSCANF@@3UStrEnumSCANF@@A			; enumSCANF
PUBLIC	?enumGET@@3UStrEnumGET@@A			; enumGET
PUBLIC	?enumFTS@@3UStrEnumFTS@@A			; enumFTS
PUBLIC	?enumSRET@@3UStrEnumSRET@@A			; enumSRET
PUBLIC	?enumTRET@@3UStrEnumTRET@@A			; enumTRET
PUBLIC	?enumFROOM@@3UStrEnumFROOM@@A			; enumFROOM
PUBLIC	?enumKCOMBO@@3UStrEnumKCOMBO@@A			; enumKCOMBO
PUBLIC	?enumSLOPE@@3UStrEnumSLOPE@@A			; enumSLOPE
PUBLIC	?enumCB@@3UStrEnumCB@@A				; enumCB
PUBLIC	?enumCOMBO@@3UStrEnumCOMBO@@A			; enumCOMBO
PUBLIC	?GET@@3UStrGetLocator@@A			; GET
PUBLIC	?enumFAN@@3UStrEnumFAN@@A			; enumFAN
PUBLIC	?enumPCOMBO@@3UStrEnumPCOMBO@@A			; enumPCOMBO
PUBLIC	?enumEDGX@@3UStrEnumEDGX@@A			; enumEDGX
PUBLIC	?enumCMD@@3UStrEnumCMD@@A			; enumCMD
PUBLIC	?enumMEMT@@3UStrEnumMEMT@@A			; enumMEMT
PUBLIC	?Trng@@3UStrTrngInfos@@A			; Trng
PUBLIC	?BufferLog@@3PADA				; BufferLog
PUBLIC	?enumSLOT@@3UStrEnumSLOT@@A			; enumSLOT
PUBLIC	?enumPRET@@3UStrEnumPRET@@A			; enumPRET
PUBLIC	?FLOOR@@3UStrFloorAnalyse@@A			; FLOOR
PUBLIC	?enumEX16@@3UStrEnumEX16@@A			; enumEX16
PUBLIC	?enumSKIP@@3UStrEnumSKIP@@A			; enumSKIP
PUBLIC	?enumHOLD@@3UStrEnumHOLD@@A			; enumHOLD
PUBLIC	?enumCBT@@3UStrEnumCBT@@A			; enumCBT
PUBLIC	?enumFT@@3UStrEnumFT@@A				; enumFT
PUBLIC	?enumFL2@@3UStrEnumFL2@@A			; enumFL2
PUBLIC	?enumRIB@@3UStrEnumRIB@@A			; enumRIB
PUBLIC	?FIND@@3UStrFind@@A				; FIND
PUBLIC	?enumFL@@3UStrEnumFL@@A				; enumFL
PUBLIC	?LOF@@3UStrLOFData@@A				; LOF
PUBLIC	?enumLLF@@3UStrEnumLLF@@A			; enumLLF
PUBLIC	?enumSLEV@@3UStrEnumSLEV@@A			; enumSLEV
PUBLIC	?COLLIDE@@3UStrCollisionLast@@A			; COLLIDE
PUBLIC	?enumIRET@@3UStrEnumIRET@@A			; enumIRET
PUBLIC	?enumSRV@@3UStrEnumSRV@@A			; enumSRV
PUBLIC	?enumMESH@@3UStrEnumMESH@@A			; enumMESH
PUBLIC	?enumSTRING@@3UStrEnumSTRING@@A			; enumSTRING
PUBLIC	?enumDGX@@3UStrEnumDGX@@A			; enumDGX
PUBLIC	?enumD3D@@3UStrEnumD3D@@A			; enumD3D
PUBLIC	?enumSSLOT@@3UStrEnumSSLOT@@A			; enumSSLOT
PUBLIC	?enumORIENT@@3UStrEnumORIENT@@A			; enumORIENT
PUBLIC	?enumFIL@@3UStrEnumFIL@@A			; enumFIL
PUBLIC	?enumENV@@3UStrEnumENV@@A			; enumENV
PUBLIC	?enumADD@@3UStrEnumADD@@A			; enumADD
PUBLIC	?enumCONV@@3UStrEnumCONV@@A			; enumCONV
PUBLIC	??_C@_0CM@HFDDJGMI@ERROR?3?5missing?5animation?5number?5@ ; `string'
PUBLIC	??_C@_0FE@OBHJENKO@ERROR?3?5cann?8t?5find?5the?5ngle?5stat@ ; `string'
PUBLIC	??_C@_0DK@IAPOPOKF@ERROR?3?5static?5ngle?5index?5?$DN?5?$CFd?5is@ ; `string'
PUBLIC	??_C@_0EK@GFPCLJHC@ERROR?3?5GetAlignedOrient?$CI?$CJ?3?5no?5al@ ; `string'
PUBLIC	??_C@_0CC@BEHLMMOJ@ERROR?3?5cann?8t?5locate?5plugin?3?5?$CC?$CFs@ ; `string'
PUBLIC	??_C@_0GN@CMHLICFP@WARNING?3?5in?5AddNGToken?$CI?$CJ?3?5Size?5o@ ; `string'
PUBLIC	??_C@_0DP@MGGJAMLA@ERROR?3?5the?5tomb4?5index?5?$CFd?5doesn?8@ ; `string'
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_0FC@LGLKDBFF@ERROR?3?5failed?5check?5of?5alignment@ ; `string'
PUBLIC	??_C@_0EH@DLBKKJCI@ERROR?5it?5has?5not?5been?5set?5the?5ID@ ; `string'
PUBLIC	??_C@_0EN@EBIKAGHH@INTERNAL?5ERROR?3?5not?5found?5the?5Co@ ; `string'
PUBLIC	??_C@_0FK@GKKFMDDI@ERROR?3?5required?5conversion?5from?5@ ; `string'
PUBLIC	??_C@_0DJ@ECJKDKJD@WARNING?3?5unknown?5CONV_?5value?5?$CI?$CFd@ ; `string'
PUBLIC	??_C@_0EM@KFPEOBDF@ERROR?3?5Get?$CIGET_ITEM?$CJ?5invalid?5ite@ ; `string'
PUBLIC	??_C@_0EO@LBHMNKCM@ERROR?3?5Get?$CIGET_STATIC?$CJ?5Invalid?5r@ ; `string'
PUBLIC	??_C@_0FA@OLEPCMLI@ERROR?3?5Get?$CIGET_STATIC?$CJ?5Invalid?5s@ ; `string'
PUBLIC	??_C@_0EH@KLJPBKDN@ERROR?3?5Get?$CIGET_ROOM?$CJ?5invalid?5ind@ ; `string'
PUBLIC	??_C@_0P@MLPNHJIJ@Get?$CI?$CJ?5function?$AA@	; `string'
PUBLIC	??_C@_0FA@KOJKINJA@ERROR?3?5Get?$CIGET_COLL_BOX?$CJ?5invalid@ ; `string'
PUBLIC	??_C@_0FN@HCAHGEMN@ERROR?3?5Get?$CIGET_STATIC_COLL?1?1VIEW@ ; `string'
PUBLIC	??_C@_0FO@LCPLCGCJ@ERROR?3?5Get?$CIGET_STATIC_COLL?1VIEW_@ ; `string'
PUBLIC	??_C@_0FE@CGMNPFNF@ERROR?3?5Get?$CIGET_DOOR_OF_ROOM?$CJ?5inv@ ; `string'
PUBLIC	??_C@_0EI@CNKPJEBI@ERROR?3?5not?5found?5my?5PARAMETERS?5o@ ; `string'
PUBLIC	??_C@_0EA@IEIDMNEG@WARNING?3?5not?5found?5my?5CUSTOMIZE?5@ ; `string'
PUBLIC	??_C@_0FM@KHLDPOBM@ERROR?3?5Get?$CIGET_BIG_NUMBER?$CJ?5inval@ ; `string'
PUBLIC	??_C@_0EK@GOOBMJEN@ERROR?3?5Get?$CIGET_AI_ITEM?$CJ?5invalid?5@ ; `string'
PUBLIC	??_C@_0EN@IINEOOAJ@ERROR?3?5Get?$CIGET_LIGHT?$CJ?5invalid?5ro@ ; `string'
PUBLIC	??_C@_0FB@NIKDIKMG@ERROR?3?5Get?$CIGET_LIGHT?$CJ?5invalid?5Se@ ; `string'
PUBLIC	??_C@_0EK@DFOFGCKG@ERROR?3?5Get?$CIGET_CAMERA?$CJ?0?5invalid?5@ ; `string'
PUBLIC	??_C@_0EO@OCOFIECI@ERROR?3?5Get?$CIGET_CAMERA_FLY?$CJ?0?5inva@ ; `string'
PUBLIC	??_C@_0EN@GIKIANME@ERROR?3?5Get?$CIGET_SLOT?$CJ?5Invalid?5ind@ ; `string'
PUBLIC	??_C@_0DI@DEBNJFPA@ERROR?3?5unknown?5meaning?5of?5GET_?5c@ ; `string'
PUBLIC	??_C@_0DO@KCFEDCDJ@ERROR?3?5in?5Get?$CIFIND_STATICS_SECTO@ ; `string'
PUBLIC	??_C@_0DO@HKNFJDMA@ERROR?3?5in?5Get?$CIFIND_STATICS_NEARB@ ; `string'
PUBLIC	??_C@_0DM@HFEHHMNJ@ERROR?3?5in?5Get?$CIFIND_ITEMS_NEARBY?0@ ; `string'
PUBLIC	??_C@_0DM@KNMGNNCA@ERROR?3?5in?5Get?$CIFIND_ITEMS_SECTOR?0@ ; `string'
EXTRN	__imp__vsprintf:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	__imp__strcmpi:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp__realloc:PROC
EXTRN	__imp__fseek:PROC
EXTRN	__imp__ftell:PROC
EXTRN	__imp___stat64i32:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp__fread:PROC
?enumSAVT@@3UStrEnumSAVT@@A DB 0cH DUP (?)		; enumSAVT
?enumPHASE@@3UStrEnumPHASE@@A DB 028H DUP (?)		; enumPHASE
?enumFWEAP@@3UStrEnumFWEAP@@A DB 014H DUP (?)		; enumFWEAP
?enumFSLOT@@3UStrEnumFSLOT@@A DB 034H DUP (?)		; enumFSLOT
?enumCOLF@@3UStrEnumCOLF@@A DQ 01H DUP (?)		; enumCOLF
?enumDENV@@3UStrEnumDENV@@A DB 010H DUP (?)		; enumDENV
?enumFC@@3UStrEnumFC@@A DB 020H DUP (?)			; enumFC
?enumSMAIN@@3UStrEnumSMAIN@@A DB 014H DUP (?)		; enumSMAIN
?enumWTF@@3UStrEnumWTF@@A DB 024H DUP (?)		; enumWTF
?enumAPPC@@3UStrEnumAPPC@@A DB 03cH DUP (?)		; enumAPPC
?enumCPU@@3UStrEnumCPU@@A DB 010H DUP (?)		; enumCPU
?enumFIND@@3UStrEnumFIND@@A DB 044H DUP (?)		; enumFIND
?enumCTRET@@3UStrEnumCTRET@@A DB 020H DUP (?)		; enumCTRET
?enumFLH@@3UStrEnumFLH@@A DB 014H DUP (?)		; enumFLH
?enumCBEET@@3UStrEnumCBEET@@A DB 0cH DUP (?)		; enumCBEET
?enumJOINT@@3UStrEnumJOINT@@A DB 038H DUP (?)		; enumJOINT
?enumFITEM@@3UStrEnumFITEM@@A DB 040H DUP (?)		; enumFITEM
?enumWSKIN@@3UStrEnumWSKIN@@A DB 014H DUP (?)		; enumWSKIN
?enumSC@@3UStrEnumSC@@A DB 01cH DUP (?)			; enumSC
?enumSCANF@@3UStrEnumSCANF@@A DB 020H DUP (?)		; enumSCANF
?enumGET@@3UStrEnumGET@@A DB 074H DUP (?)		; enumGET
?enumFTS@@3UStrEnumFTS@@A DB 014H DUP (?)		; enumFTS
?enumSRET@@3UStrEnumSRET@@A DB 0cH DUP (?)		; enumSRET
?enumTRET@@3UStrEnumTRET@@A DB 010H DUP (?)		; enumTRET
?enumFROOM@@3UStrEnumFROOM@@A DB 034H DUP (?)		; enumFROOM
?enumKCOMBO@@3UStrEnumKCOMBO@@A DB 040H DUP (?)		; enumKCOMBO
?enumSLOPE@@3UStrEnumSLOPE@@A DB 014H DUP (?)		; enumSLOPE
?enumCB@@3UStrEnumCB@@A DB 0dcH DUP (?)			; enumCB
?enumCOMBO@@3UStrEnumCOMBO@@A DB 040H DUP (?)		; enumCOMBO
?GET@@3UStrGetLocator@@A DB 0254H DUP (?)		; GET
?enumFAN@@3UStrEnumFAN@@A DB 064H DUP (?)		; enumFAN
?enumPCOMBO@@3UStrEnumPCOMBO@@A DB 040H DUP (?)		; enumPCOMBO
?enumEDGX@@3UStrEnumEDGX@@A DB 020H DUP (?)		; enumEDGX
?enumCMD@@3UStrEnumCMD@@A DB 058H DUP (?)		; enumCMD
?enumMEMT@@3UStrEnumMEMT@@A DB 018H DUP (?)		; enumMEMT
?Trng@@3UStrTrngInfos@@A DB 034H DUP (?)		; Trng
?BufferLog@@3PADA DB 01000H DUP (?)			; BufferLog
?enumSLOT@@3UStrEnumSLOT@@A DB 0824H DUP (?)		; enumSLOT
?enumPRET@@3UStrEnumPRET@@A DB 0cH DUP (?)		; enumPRET
?FLOOR@@3UStrFloorAnalyse@@A DB 04bH DUP (?)		; FLOOR
	ALIGN	4

?enumEX16@@3UStrEnumEX16@@A DB 040H DUP (?)		; enumEX16
?enumSKIP@@3UStrEnumSKIP@@A DB 02cH DUP (?)		; enumSKIP
?enumHOLD@@3UStrEnumHOLD@@A DB 044H DUP (?)		; enumHOLD
?enumCBT@@3UStrEnumCBT@@A DB 01cH DUP (?)		; enumCBT
?enumFT@@3UStrEnumFT@@A DB 020H DUP (?)			; enumFT
?enumFL2@@3UStrEnumFL2@@A DB 01cH DUP (?)		; enumFL2
?enumRIB@@3UStrEnumRIB@@A DB 034H DUP (?)		; enumRIB
?FIND@@3UStrFind@@A DB 014aeH DUP (?)			; FIND
	ALIGN	4

?enumFL@@3UStrEnumFL@@A DB 01cH DUP (?)			; enumFL
?LOF@@3UStrLOFData@@A DB 036H DUP (?)			; LOF
	ALIGN	4

?enumLLF@@3UStrEnumLLF@@A DB 014H DUP (?)		; enumLLF
?enumSLEV@@3UStrEnumSLEV@@A DB 040H DUP (?)		; enumSLEV
?COLLIDE@@3UStrCollisionLast@@A DB 03cH DUP (?)		; COLLIDE
?enumIRET@@3UStrEnumIRET@@A DB 0cH DUP (?)		; enumIRET
?enumSRV@@3UStrEnumSRV@@A DB 0f4H DUP (?)		; enumSRV
?enumMESH@@3UStrEnumMESH@@A DB 03cH DUP (?)		; enumMESH
?enumSTRING@@3UStrEnumSTRING@@A DB 030H DUP (?)		; enumSTRING
?enumDGX@@3UStrEnumDGX@@A DB 040H DUP (?)		; enumDGX
?enumD3D@@3UStrEnumD3D@@A DB 018H DUP (?)		; enumD3D
?enumSSLOT@@3UStrEnumSSLOT@@A DB 0284H DUP (?)		; enumSSLOT
?enumORIENT@@3UStrEnumORIENT@@A DB 020H DUP (?)		; enumORIENT
?enumFIL@@3UStrEnumFIL@@A DB 018H DUP (?)		; enumFIL
?enumENV@@3UStrEnumENV@@A DB 014cH DUP (?)		; enumENV
?enumADD@@3UStrEnumADD@@A DB 020H DUP (?)		; enumADD
?enumCONV@@3UStrEnumCONV@@A DB 030H DUP (?)		; enumCONV
;	COMDAT ??_C@_0DM@KNMGNNCA@ERROR?3?5in?5Get?$CIFIND_ITEMS_SECTOR?0@
CONST	SEGMENT
??_C@_0DM@KNMGNNCA@ERROR?3?5in?5Get?$CIFIND_ITEMS_SECTOR?0@ DB 'ERROR: in'
	DB	' Get(FIND_ITEMS_SECTOR,): missing valid room index', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@HFEHHMNJ@ERROR?3?5in?5Get?$CIFIND_ITEMS_NEARBY?0@
CONST	SEGMENT
??_C@_0DM@HFEHHMNJ@ERROR?3?5in?5Get?$CIFIND_ITEMS_NEARBY?0@ DB 'ERROR: in'
	DB	' Get(FIND_ITEMS_NEARBY,): missing valid room index', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@HKNFJDMA@ERROR?3?5in?5Get?$CIFIND_STATICS_NEARB@
CONST	SEGMENT
??_C@_0DO@HKNFJDMA@ERROR?3?5in?5Get?$CIFIND_STATICS_NEARB@ DB 'ERROR: in '
	DB	'Get(FIND_STATICS_NEARBY,): missing valid room index', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@KCFEDCDJ@ERROR?3?5in?5Get?$CIFIND_STATICS_SECTO@
CONST	SEGMENT
??_C@_0DO@KCFEDCDJ@ERROR?3?5in?5Get?$CIFIND_STATICS_SECTO@ DB 'ERROR: in '
	DB	'Get(FIND_STATICS_SECTOR,): missing valid room index', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@DEBNJFPA@ERROR?3?5unknown?5meaning?5of?5GET_?5c@
CONST	SEGMENT
??_C@_0DI@DEBNJFPA@ERROR?3?5unknown?5meaning?5of?5GET_?5c@ DB 'ERROR: unk'
	DB	'nown meaning of GET_ constant with value = %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@GIKIANME@ERROR?3?5Get?$CIGET_SLOT?$CJ?5Invalid?5ind@
CONST	SEGMENT
??_C@_0EN@GIKIANME@ERROR?3?5Get?$CIGET_SLOT?$CJ?5Invalid?5ind@ DB 'ERROR:'
	DB	' Get(GET_SLOT) Invalid index value (%d), outside of valid ran'
	DB	'ge 0 - %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@OCOFIECI@ERROR?3?5Get?$CIGET_CAMERA_FLY?$CJ?0?5inva@
CONST	SEGMENT
??_C@_0EO@OCOFIECI@ERROR?3?5Get?$CIGET_CAMERA_FLY?$CJ?0?5inva@ DB 'ERROR:'
	DB	' Get(GET_CAMERA_FLY), invalid index (%d), outside of valid ra'
	DB	'nge 0 - %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@DFOFGCKG@ERROR?3?5Get?$CIGET_CAMERA?$CJ?0?5invalid?5@
CONST	SEGMENT
??_C@_0EK@DFOFGCKG@ERROR?3?5Get?$CIGET_CAMERA?$CJ?0?5invalid?5@ DB 'ERROR'
	DB	': Get(GET_CAMERA), invalid index (%d), outside of valid range'
	DB	' 0 - %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@NIKDIKMG@ERROR?3?5Get?$CIGET_LIGHT?$CJ?5invalid?5Se@
CONST	SEGMENT
??_C@_0FB@NIKDIKMG@ERROR?3?5Get?$CIGET_LIGHT?$CJ?5invalid?5Se@ DB 'ERROR:'
	DB	' Get(GET_LIGHT) invalid SecondaryIndex (%d), outside of valid'
	DB	' range 0 - %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@IINEOOAJ@ERROR?3?5Get?$CIGET_LIGHT?$CJ?5invalid?5ro@
CONST	SEGMENT
??_C@_0EN@IINEOOAJ@ERROR?3?5Get?$CIGET_LIGHT?$CJ?5invalid?5ro@ DB 'ERROR:'
	DB	' Get(GET_LIGHT) invalid room index (%d), outside of valid ran'
	DB	'ge 0 - %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@GOOBMJEN@ERROR?3?5Get?$CIGET_AI_ITEM?$CJ?5invalid?5@
CONST	SEGMENT
??_C@_0EK@GOOBMJEN@ERROR?3?5Get?$CIGET_AI_ITEM?$CJ?5invalid?5@ DB 'ERROR:'
	DB	' Get(GET_AI_ITEM) invalid index (%d), outside of valid range '
	DB	'0 - %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FM@KHLDPOBM@ERROR?3?5Get?$CIGET_BIG_NUMBER?$CJ?5inval@
CONST	SEGMENT
??_C@_0FM@KHLDPOBM@ERROR?3?5Get?$CIGET_BIG_NUMBER?$CJ?5inval@ DB 'ERROR: '
	DB	'Get(GET_BIG_NUMBER) invalid index (%d) for big number, outsid'
	DB	'e of valid range 0 - %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@IEIDMNEG@WARNING?3?5not?5found?5my?5CUSTOMIZE?5@
CONST	SEGMENT
??_C@_0EA@IEIDMNEG@WARNING?3?5not?5found?5my?5CUSTOMIZE?5@ DB 'WARNING: n'
	DB	'ot found my CUSTOMIZE with CUST_ value=%d and ID = %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@CNKPJEBI@ERROR?3?5not?5found?5my?5PARAMETERS?5o@
CONST	SEGMENT
??_C@_0EI@CNKPJEBI@ERROR?3?5not?5found?5my?5PARAMETERS?5o@ DB 'ERROR: not'
	DB	' found my PARAMETERS of PARAM_ type %d with (further) ID = %d'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0FE@CGMNPFNF@ERROR?3?5Get?$CIGET_DOOR_OF_ROOM?$CJ?5inv@
CONST	SEGMENT
??_C@_0FE@CGMNPFNF@ERROR?3?5Get?$CIGET_DOOR_OF_ROOM?$CJ?5inv@ DB 'ERROR: '
	DB	'Get(GET_DOOR_OF_ROOM) invalid door index (%d), outside of val'
	DB	'id range 0 - %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FO@LCPLCGCJ@ERROR?3?5Get?$CIGET_STATIC_COLL?1VIEW_@
CONST	SEGMENT
??_C@_0FO@LCPLCGCJ@ERROR?3?5Get?$CIGET_STATIC_COLL?1VIEW_@ DB 'ERROR: Get'
	DB	'(GET_STATIC_COLL/VIEW_BOX) Invalid static index (%d), outside'
	DB	' of valid range 0 - %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FN@HCAHGEMN@ERROR?3?5Get?$CIGET_STATIC_COLL?1?1VIEW@
CONST	SEGMENT
??_C@_0FN@HCAHGEMN@ERROR?3?5Get?$CIGET_STATIC_COLL?1?1VIEW@ DB 'ERROR: Ge'
	DB	't(GET_STATIC_COLL//VIEW_BOX) Invalid room index (%d), outside'
	DB	' of valid range 0 - %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@KOJKINJA@ERROR?3?5Get?$CIGET_COLL_BOX?$CJ?5invalid@
CONST	SEGMENT
??_C@_0FA@KOJKINJA@ERROR?3?5Get?$CIGET_COLL_BOX?$CJ?5invalid@ DB 'ERROR: '
	DB	'Get(GET_COLL_BOX) invalid item index (%d), outside of valid r'
	DB	'ange 0 - %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MLPNHJIJ@Get?$CI?$CJ?5function?$AA@
CONST	SEGMENT
??_C@_0P@MLPNHJIJ@Get?$CI?$CJ?5function?$AA@ DB 'Get() function', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@KLJPBKDN@ERROR?3?5Get?$CIGET_ROOM?$CJ?5invalid?5ind@
CONST	SEGMENT
??_C@_0EH@KLJPBKDN@ERROR?3?5Get?$CIGET_ROOM?$CJ?5invalid?5ind@ DB 'ERROR:'
	DB	' Get(GET_ROOM) invalid index (%d), outside of valid range 0 -'
	DB	' %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@OLEPCMLI@ERROR?3?5Get?$CIGET_STATIC?$CJ?5Invalid?5s@
CONST	SEGMENT
??_C@_0FA@OLEPCMLI@ERROR?3?5Get?$CIGET_STATIC?$CJ?5Invalid?5s@ DB 'ERROR:'
	DB	' Get(GET_STATIC) Invalid static index (%d), outside of valid '
	DB	'range 0 - %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@LBHMNKCM@ERROR?3?5Get?$CIGET_STATIC?$CJ?5Invalid?5r@
CONST	SEGMENT
??_C@_0EO@LBHMNKCM@ERROR?3?5Get?$CIGET_STATIC?$CJ?5Invalid?5r@ DB 'ERROR:'
	DB	' Get(GET_STATIC) Invalid room index (%d), outside of valid ra'
	DB	'nge 0 - %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@KFPEOBDF@ERROR?3?5Get?$CIGET_ITEM?$CJ?5invalid?5ite@
CONST	SEGMENT
??_C@_0EM@KFPEOBDF@ERROR?3?5Get?$CIGET_ITEM?$CJ?5invalid?5ite@ DB 'ERROR:'
	DB	' Get(GET_ITEM) invalid item index (%d), outside of valid rang'
	DB	'e 0 - %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@ECJKDKJD@WARNING?3?5unknown?5CONV_?5value?5?$CI?$CFd@
CONST	SEGMENT
??_C@_0DJ@ECJKDKJD@WARNING?3?5unknown?5CONV_?5value?5?$CI?$CFd@ DB 'WARNI'
	DB	'NG: unknown CONV_ value (%d) for Convert() function', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FK@GKKFMDDI@ERROR?3?5required?5conversion?5from?5@
CONST	SEGMENT
??_C@_0FK@GKKFMDDI@ERROR?3?5required?5conversion?5from?5@ DB 'ERROR: requ'
	DB	'ired conversion from StrItem to item index but the pointer fo'
	DB	'r StrItem is NULL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@EBIKAGHH@INTERNAL?5ERROR?3?5not?5found?5the?5Co@
CONST	SEGMENT
??_C@_0EN@EBIKAGHH@INTERNAL?5ERROR?3?5not?5found?5the?5Co@ DB 'INTERNAL E'
	DB	'RROR: not found the ColorRgb command with id = %d (called fro'
	DB	'm %s)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@DLBKKJCI@ERROR?5it?5has?5not?5been?5set?5the?5ID@
CONST	SEGMENT
??_C@_0EH@DLBKKJCI@ERROR?5it?5has?5not?5been?5set?5the?5ID@ DB 'ERROR it '
	DB	'has not been set the ID for ColorRbg in the script command %s'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0FC@LGLKDBFF@ERROR?3?5failed?5check?5of?5alignment@
CONST	SEGMENT
??_C@_0FC@LGLKDBFF@ERROR?3?5failed?5check?5of?5alignment@ DB 'ERROR: fail'
	DB	'ed check of alignment value of GlobTomb4 structure for 1.3.0.'
	DB	'0 version', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@MGGJAMLA@ERROR?3?5the?5tomb4?5index?5?$CFd?5doesn?8@
CONST	SEGMENT
??_C@_0DP@MGGJAMLA@ERROR?3?5the?5tomb4?5index?5?$CFd?5doesn?8@ DB 'ERROR:'
	DB	' the tomb4 index %d doesn''t correspond to any ngle index', 00H ; `string'
CONST	ENDS
;	COMDAT ?MexNotFound@?1??GetString@@YAPADH@Z@4PADA
_DATA	SEGMENT
?MexNotFound@?1??GetString@@YAPADH@Z@4PADA DB 'STRING NOT FOUND', 00H ; `GetString'::`2'::MexNotFound
_DATA	ENDS
;	COMDAT ?p2StringheScriptDat@?1??GetString@@YAPADH@Z@4PAPADA
_DATA	SEGMENT
?p2StringheScriptDat@?1??GetString@@YAPADH@Z@4PAPADA DD 07fd198H ; `GetString'::`2'::p2StringheScriptDat
_DATA	ENDS
;	COMDAT ?p2IndiciStringheDat@?1??GetString@@YAPADH@Z@4PAPAGA
_DATA	SEGMENT
?p2IndiciStringheDat@?1??GetString@@YAPADH@Z@4PAPAGA DD 07fd154H ; `GetString'::`2'::p2IndiciStringheDat
_DATA	ENDS
;	COMDAT ??_C@_0GN@CMHLICFP@WARNING?3?5in?5AddNGToken?$CI?$CJ?3?5Size?5o@
CONST	SEGMENT
??_C@_0GN@CMHLICFP@WARNING?3?5in?5AddNGToken?$CI?$CJ?3?5Size?5o@ DB 'WARN'
	DB	'ING: in AddNGToken(): Size of structure for Tag=0x%X is not e'
	DB	'ven (%d). It has been added one extra byte.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BEHLMMOJ@ERROR?3?5cann?8t?5locate?5plugin?3?5?$CC?$CFs@
CONST	SEGMENT
??_C@_0CC@BEHLMMOJ@ERROR?3?5cann?8t?5locate?5plugin?3?5?$CC?$CFs@ DB 'ERR'
	DB	'OR: cann''t locate plugin: "%s"', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@GFPCLJHC@ERROR?3?5GetAlignedOrient?$CI?$CJ?3?5no?5al@
CONST	SEGMENT
??_C@_0EK@GFPCLJHC@ERROR?3?5GetAlignedOrient?$CI?$CJ?3?5no?5al@ DB 'ERROR'
	DB	': GetAlignedOrient(): no aligned orient found for source orie'
	DB	'nt 0x%X', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@IAPOPOKF@ERROR?3?5static?5ngle?5index?5?$DN?5?$CFd?5is@
CONST	SEGMENT
??_C@_0DK@IAPOPOKF@ERROR?3?5static?5ngle?5index?5?$DN?5?$CFd?5is@ DB 'ERR'
	DB	'OR: static ngle index = %d is not a valid static index', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FE@OBHJENKO@ERROR?3?5cann?8t?5find?5the?5ngle?5stat@
CONST	SEGMENT
??_C@_0FE@OBHJENKO@ERROR?3?5cann?8t?5find?5the?5ngle?5stat@ DB 'ERROR: ca'
	DB	'nn''t find the ngle static index that matched with (room=%d S'
	DB	'taticIndex=%d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@HFDDJGMI@ERROR?3?5missing?5animation?5number?5@
CONST	SEGMENT
??_C@_0CM@HFDDJGMI@ERROR?3?5missing?5animation?5number?5@ DB 'ERROR: miss'
	DB	'ing animation number %d for Lara', 00H	; `string'
CONST	ENDS
;	COMDAT ?pTombWind4@?1??SendToLog@@YA_NPADZZ@4PAKA
_DATA	SEGMENT
?pTombWind4@?1??SendToLog@@YA_NPADZZ@4PAKA DD 075385cH	; `SendToLog'::`2'::pTombWind4
_DATA	ENDS
PUBLIC	?GetNewProgrAction@@YAPAUStrProgressiveAction@@XZ ; GetNewProgrAction
; Function compile flags: /Ogtp
; File c:\users\dominik\google drive\tld\script\plugin_renaissance\source\trng.cpp
;	COMDAT ?GetNewProgrAction@@YAPAUStrProgressiveAction@@XZ
_TEXT	SEGMENT
?GetNewProgrAction@@YAPAUStrProgressiveAction@@XZ PROC	; GetNewProgrAction, COMDAT

; 3835 : 	
; 3836 : 	StrProgressiveAction *pAction;
; 3837 : 	int i;
; 3838 : 
; 3839 : 	pAction= &MyData.VetProgrActions[0];
; 3840 : 
; 3841 : 	// look for first free record
; 3842 : 	for (i=0;i<MyData.TotProgrActions;i++) {

  00000	8b 0d 15 00 00
	00		 mov	 ecx, DWORD PTR ?MyData@@3UStrMyData@@A+21
  00006	33 d2		 xor	 edx, edx
  00008	b8 1d 00 00 00	 mov	 eax, OFFSET ?MyData@@3UStrMyData@@A+29
  0000d	85 c9		 test	 ecx, ecx
  0000f	7e 0e		 jle	 SHORT $LN4@GetNewProg
$LL6@GetNewProg:

; 3843 : 		if (pAction->ActionType == AXN_FREE) {

  00011	66 83 38 00	 cmp	 WORD PTR [eax], 0
  00015	74 42		 je	 SHORT $LN7@GetNewProg

; 3844 : 
; 3845 : 			return pAction;
; 3846 : 		}
; 3847 : 		pAction++;

  00017	42		 inc	 edx
  00018	83 c0 20	 add	 eax, 32			; 00000020H
  0001b	3b d1		 cmp	 edx, ecx
  0001d	7c f2		 jl	 SHORT $LL6@GetNewProg
$LN4@GetNewProg:

; 3848 : 	}
; 3849 : 	// no record free
; 3850 : 	// increase number of allocated records
; 3851 : 	if (MyData.TotProgrActions >= MAX_MYPROGR_ACTIONS) {

  0001f	83 f9 64	 cmp	 ecx, 100		; 00000064H
  00022	7c 24		 jl	 SHORT $LN2@GetNewProg

; 3852 : 		// already reached max number of record (bad matter)
; 3853 : 		// stole the record to older progressive action and send an error message if debug is on
; 3854 : 		i= MyData.LastProgrActionIndex;

  00024	8b 0d 19 00 00
	00		 mov	 ecx, DWORD PTR ?MyData@@3UStrMyData@@A+25

; 3855 : 
; 3856 : 		pAction = &MyData.VetProgrActions[i];

  0002a	8b c1		 mov	 eax, ecx
  0002c	c1 e0 05	 shl	 eax, 5
  0002f	05 1d 00 00 00	 add	 eax, OFFSET ?MyData@@3UStrMyData@@A+29

; 3857 : 
; 3858 : 
; 3859 : 		
; 3860 : #ifdef DEBUG_ON
; 3861 : 
; 3862 : 		SendToLog("ERROR from GetNewProgrAction(): no more available StrProgressiveAction records. Cleared old ProgrAction with ActionType = %d and ItemIndex=%d",
; 3863 : 			pAction->ActionType, pAction->ItemIndex);
; 3864 : 	
; 3865 : 	
; 3866 : #endif
; 3867 : 		pAction->ActionType= AXN_FREE;

  00034	33 d2		 xor	 edx, edx

; 3868 : 		// update next index to stole for older prograction
; 3869 : 		i++;

  00036	41		 inc	 ecx
  00037	66 89 10	 mov	 WORD PTR [eax], dx

; 3870 : 		if (i >= MAX_MYPROGR_ACTIONS) {

  0003a	83 f9 64	 cmp	 ecx, 100		; 00000064H
  0003d	7c 02		 jl	 SHORT $LN1@GetNewProg

; 3871 : 			i = 0;

  0003f	33 c9		 xor	 ecx, ecx
$LN1@GetNewProg:

; 3872 : 		}
; 3873 : 		MyData.LastProgrActionIndex = i;

  00041	89 0d 19 00 00
	00		 mov	 DWORD PTR ?MyData@@3UStrMyData@@A+25, ecx

; 3882 : 	return pAction;
; 3883 : 
; 3884 : }

  00047	c3		 ret	 0
$LN2@GetNewProg:

; 3874 : 
; 3875 : 		return pAction;
; 3876 : 	}
; 3877 : 	// allocate new record
; 3878 : 	i = MyData.TotProgrActions;

  00048	8b c1		 mov	 eax, ecx

; 3879 : 	pAction= &MyData.VetProgrActions[i];
; 3880 : 
; 3881 : 	MyData.TotProgrActions++;

  0004a	41		 inc	 ecx
  0004b	c1 e0 05	 shl	 eax, 5
  0004e	89 0d 15 00 00
	00		 mov	 DWORD PTR ?MyData@@3UStrMyData@@A+21, ecx
  00054	05 1d 00 00 00	 add	 eax, OFFSET ?MyData@@3UStrMyData@@A+29
$LN7@GetNewProg:

; 3882 : 	return pAction;
; 3883 : 
; 3884 : }

  00059	c3		 ret	 0
?GetNewProgrAction@@YAPAUStrProgressiveAction@@XZ ENDP	; GetNewProgrAction
_TEXT	ENDS
PUBLIC	?GetCallBack@@YA_NHHGPAX@Z			; GetCallBack
; Function compile flags: /Ogtp
;	COMDAT ?GetCallBack@@YA_NHHGPAX@Z
_TEXT	SEGMENT
?GetCallBack@@YA_NHHGPAX@Z PROC				; GetCallBack, COMDAT
; _CallBackCB$ = ecx
; _pProc$ = eax

; 3594 : 
; 3595 : 	return Trng.RequireCallBack(Trng.IdMyPlugin, CallBackCB, CBT_Flags, Index, pProc);

  00000	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR ?Trng@@3UStrTrngInfos@@A
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	6a 00		 push	 0
  0000c	51		 push	 ecx
  0000d	52		 push	 edx
  0000e	ff 15 08 00 00
	00		 call	 DWORD PTR ?Trng@@3UStrTrngInfos@@A+8

; 3596 : }

  00014	c3		 ret	 0
?GetCallBack@@YA_NHHGPAX@Z ENDP				; GetCallBack
_TEXT	ENDS
PUBLIC	?FreeMemory@@YAXPAX@Z				; FreeMemory
; Function compile flags: /Ogtp
;	COMDAT ?FreeMemory@@YAXPAX@Z
_TEXT	SEGMENT
?FreeMemory@@YAXPAX@Z PROC				; FreeMemory, COMDAT
; _pMem$ = eax

; 3584 : 
; 3585 : 
; 3586 : 	free(pMem);

  00000	50		 push	 eax
  00001	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00007	59		 pop	 ecx

; 3587 : 
; 3588 : }

  00008	c3		 ret	 0
?FreeMemory@@YAXPAX@Z ENDP				; FreeMemory
_TEXT	ENDS
PUBLIC	?GetString@@YAPADH@Z				; GetString
; Function compile flags: /Ogtp
;	COMDAT ?GetString@@YAPADH@Z
_TEXT	SEGMENT
?GetString@@YAPADH@Z PROC				; GetString, COMDAT
; _StringIndex$ = eax

; 3488 : 	char *pChar;
; 3489 : 	int i;
; 3490 : 	WORD Indice;
; 3491 : 	static WORD ** p2IndiciStringheDat = (WORD **) 0x7FD154;
; 3492 : 	WORD *pIndiceStringheDat;
; 3493 : 	static char **p2StringheScriptDat = (char**) 0x7FD198;
; 3494 : 	char *pStringheScriptDat;
; 3495 : 	static char MexNotFound[]= "STRING NOT FOUND";
; 3496 : 
; 3497 : 	pIndiceStringheDat = *p2IndiciStringheDat;

  00000	8b 0d 54 d1 7f
	00		 mov	 ecx, DWORD PTR ds:8376660

; 3498 : 	pStringheScriptDat = *p2StringheScriptDat;

  00006	8b 15 98 d1 7f
	00		 mov	 edx, DWORD PTR ds:8376728

; 3499 : 
; 3500 : 	if (StringIndex & STRING_NG) {

  0000c	a9 00 80 00 00	 test	 eax, 32768		; 00008000H
  00011	74 43		 je	 SHORT $LN5@GetString

; 3501 : 		// extra NG string
; 3502 : 		Indice= StringIndex & MASK_STRING_INDEX;

  00013	56		 push	 esi
  00014	25 ff 7f 00 00	 and	 eax, 32767		; 00007fffH
  00019	57		 push	 edi

; 3503 : 
; 3504 : 		for (i=0;i<Trng.pGlobTomb4->TotExtraStrings;i++) {

  0001a	8b 3d 04 00 00
	00		 mov	 edi, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  00020	8b 8f 08 08 1b
	00		 mov	 ecx, DWORD PTR [edi+1771528]
  00026	8b f0		 mov	 esi, eax
  00028	33 c0		 xor	 eax, eax
  0002a	85 c9		 test	 ecx, ecx
  0002c	7e 13		 jle	 SHORT $LN2@GetString

; 3501 : 		// extra NG string
; 3502 : 		Indice= StringIndex & MASK_STRING_INDEX;

  0002e	8d 97 0c 08 1b
	00		 lea	 edx, DWORD PTR [edi+1771532]
$LL4@GetString:

; 3505 : 			if (Trng.pGlobTomb4->VetExtraStrings[i].Indice == Indice) {

  00034	66 39 32	 cmp	 WORD PTR [edx], si
  00037	74 10		 je	 SHORT $LN9@GetString

; 3503 : 
; 3504 : 		for (i=0;i<Trng.pGlobTomb4->TotExtraStrings;i++) {

  00039	40		 inc	 eax
  0003a	83 c2 06	 add	 edx, 6
  0003d	3b c1		 cmp	 eax, ecx
  0003f	7c f3		 jl	 SHORT $LL4@GetString
$LN2@GetString:
  00041	5f		 pop	 edi

; 3509 : 			}
; 3510 : 		}
; 3511 : 		// not found. if we are in debug version lets a mexage in tomb4_log
; 3512 : #ifdef DEBUG_ON
; 3513 : 		SendToLog("ERROR: cann't locate extra ng string with index = %d", StringIndex & MASK_STRING_INDEX);
; 3514 : #endif
; 3515 : 		return MexNotFound;

  00042	b8 00 00 00 00	 mov	 eax, OFFSET ?MexNotFound@?1??GetString@@YAPADH@Z@4PADA
  00047	5e		 pop	 esi

; 3522 : 
; 3523 : }

  00048	c3		 ret	 0
$LN9@GetString:

; 3506 : 				pChar = Trng.pGlobTomb4->VetExtraStrings[i].pTesto;

  00049	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]

; 3507 : 
; 3508 : 				return pChar;

  0004c	8b 84 47 0e 08
	1b 00		 mov	 eax, DWORD PTR [edi+eax*2+1771534]
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi

; 3522 : 
; 3523 : }

  00055	c3		 ret	 0
$LN5@GetString:

; 3516 : 
; 3517 : 	}
; 3518 : 	// string is not of extra ng kind
; 3519 : 	Indice = pIndiceStringheDat[StringIndex];
; 3520 : 	pChar = &pStringheScriptDat[Indice];
; 3521 : 	return pChar;

  00056	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  0005a	03 c2		 add	 eax, edx

; 3522 : 
; 3523 : }

  0005c	c3		 ret	 0
?GetString@@YAPADH@Z ENDP				; GetString
_TEXT	ENDS
PUBLIC	?ParseNgField@@YA_NPAGKPAUStrParseNGField@@@Z	; ParseNgField
; Function compile flags: /Ogtp
;	COMDAT ?ParseNgField@@YA_NPAGKPAUStrParseNGField@@@Z
_TEXT	SEGMENT
?ParseNgField@@YA_NPAGKPAUStrParseNGField@@@Z PROC	; ParseNgField, COMDAT
; _pNgArray$ = ebx
; _CurrentIndex$ = eax
; _pParseNGField$ = esi

; 3449 : {

  00000	57		 push	 edi
  00001	8b f8		 mov	 edi, eax

; 3450 : 	DWORD Word1, NumberOfWords;
; 3451 : 	int i;
; 3452 : 	DWORD ExtraWords;
; 3453 : 
; 3454 : 
; 3455 : 	i = CurrentIndex;
; 3456 : 
; 3457 : 
; 3458 : 	if (pNgArray[i] & 0x8000) {

  00003	0f b7 04 7b	 movzx	 eax, WORD PTR [ebx+edi*2]

; 3459 : 		// size e' DWORD
; 3460 : 		Word1 = pNgArray[i++] & 0x7fff;

  00007	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  0000a	a9 00 80 00 00	 test	 eax, 32768		; 00008000H
  0000f	74 18		 je	 SHORT $LN3@ParseNgFie
  00011	25 ff 7f 00 00	 and	 eax, 32767		; 00007fffH
  00016	8b d0		 mov	 edx, eax

; 3461 : 		NumberOfWords = Word1 * 65536 + pNgArray[i++];

  00018	0f b7 04 4b	 movzx	 eax, WORD PTR [ebx+ecx*2]
  0001c	c1 e2 10	 shl	 edx, 16			; 00000010H
  0001f	03 c2		 add	 eax, edx
  00021	41		 inc	 ecx

; 3462 : 		ExtraWords = 3;

  00022	ba 03 00 00 00	 mov	 edx, 3

; 3463 : 	}else {

  00027	eb 05		 jmp	 SHORT $LN2@ParseNgFie
$LN3@ParseNgFie:

; 3464 : 		// size e' WORD
; 3465 : 		NumberOfWords = pNgArray[i++];
; 3466 : 		ExtraWords = 2;

  00029	ba 02 00 00 00	 mov	 edx, 2
$LN2@ParseNgFie:

; 3467 : 	}
; 3468 : 	
; 3469 : 	if (NumberOfWords == NGTAG_END_SEQUENCE) return false;

  0002e	85 c0		 test	 eax, eax
  00030	75 04		 jne	 SHORT $LN1@ParseNgFie
  00032	32 c0		 xor	 al, al
  00034	5f		 pop	 edi

; 3478 : }

  00035	c3		 ret	 0
$LN1@ParseNgFie:

; 3470 : 
; 3471 : 	pParseNGField->NextIndex = CurrentIndex + NumberOfWords;

  00036	03 f8		 add	 edi, eax
  00038	89 3e		 mov	 DWORD PTR [esi], edi

; 3472 : 	pParseNGField->Type = pNgArray[i++];

  0003a	66 8b 3c 4b	 mov	 di, WORD PTR [ebx+ecx*2]
  0003e	41		 inc	 ecx

; 3473 : 	pParseNGField->pData = &pNgArray[i];
; 3474 : 	pParseNGField->StartDataIndex = i;
; 3475 : 	pParseNGField->SizeData = (NumberOfWords-ExtraWords) * 2;

  0003f	2b c2		 sub	 eax, edx
  00041	66 89 7e 10	 mov	 WORD PTR [esi+16], di
  00045	8d 3c 4b	 lea	 edi, DWORD PTR [ebx+ecx*2]
  00048	03 c0		 add	 eax, eax
  0004a	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  0004d	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00050	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx

; 3476 : 	
; 3477 : 	return true;

  00053	b0 01		 mov	 al, 1
  00055	5f		 pop	 edi

; 3478 : }

  00056	c3		 ret	 0
?ParseNgField@@YA_NPAGKPAUStrParseNGField@@@Z ENDP	; ParseNgField
_TEXT	ENDS
PUBLIC	?GetMemory@@YAPAXK@Z				; GetMemory
; Function compile flags: /Ogtp
;	COMDAT ?GetMemory@@YAPAXK@Z
_TEXT	SEGMENT
?GetMemory@@YAPAXK@Z PROC				; GetMemory, COMDAT
; _SizeOfMemory$ = eax

; 3257 : 	void *pMem;
; 3258 : 
; 3259 : 	pMem = malloc(SizeOfMemory);

  00000	50		 push	 eax
  00001	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00007	83 c4 04	 add	 esp, 4

; 3260 : 	
; 3261 : #ifdef DEBUG_ON
; 3262 : 	if (pMem == NULL) {
; 3263 : 		SendToLog("ERROR: failed the attempt to get dynamic free memory of %d bytes",SizeOfMemory);
; 3264 : 		
; 3265 : 	}
; 3266 : #endif
; 3267 : return pMem;
; 3268 : 
; 3269 : }

  0000a	c3		 ret	 0
?GetMemory@@YAPAXK@Z ENDP				; GetMemory
_TEXT	ENDS
PUBLIC	?CallFromTrng@@YAHXZ				; CallFromTrng
; Function compile flags: /Ogtp
;	COMDAT ?CallFromTrng@@YAHXZ
_TEXT	SEGMENT
?CallFromTrng@@YAHXZ PROC				; CallFromTrng, COMDAT

; 3207 : 	xor eax, eax

  00000	33 c0		 xor	 eax, eax

; 3208 : 	retn

  00002	c3		 ret	 0
?CallFromTrng@@YAHXZ ENDP				; CallFromTrng
_TEXT	ENDS
PUBLIC	?FindSkipPhase@@YAKXZ				; FindSkipPhase
; Function compile flags: /Ogtp
;	COMDAT ?FindSkipPhase@@YAKXZ
_TEXT	SEGMENT
?FindSkipPhase@@YAKXZ PROC				; FindSkipPhase, COMDAT

; 2982 : 	DWORD FlagsSkip;
; 2983 : 
; 2984 : 
; 2985 : 	FlagsSkip= SKIP_NONE;
; 2986 : 
; 2987 : 	if (*Trng.pGlobTomb4->pAdr->pFadeScreen) FlagsSkip |= SKIP_FADE;

  00000	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  00006	8b 8a 4a 34 19
	00		 mov	 ecx, DWORD PTR [edx+1651786]
  0000c	56		 push	 esi
  0000d	8b b1 c4 01 00
	00		 mov	 esi, DWORD PTR [ecx+452]
  00013	33 c0		 xor	 eax, eax
  00015	66 39 06	 cmp	 WORD PTR [esi], ax
  00018	74 05		 je	 SHORT $LN10@FindSkipPh
  0001a	b8 08 00 00 00	 mov	 eax, 8
$LN10@FindSkipPh:

; 2988 : 
; 2989 : 	if (*Trng.pGlobTomb4->pAdr->pTestLoading) FlagsSkip |= SKIP_LOADING_LEVEL;

  0001f	8b b1 c0 01 00
	00		 mov	 esi, DWORD PTR [ecx+448]
  00025	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00028	74 03		 je	 SHORT $LN9@FindSkipPh
  0002a	83 c8 04	 or	 eax, 4
$LN9@FindSkipPh:

; 2990 :   
; 2991 : 	if (*Trng.pGlobTomb4->pAdr->Camera.pModeCameraNow  == 1) FlagsSkip |= SKIP_FIXED_CAMERA;	

  0002d	8b b1 fc 00 00
	00		 mov	 esi, DWORD PTR [ecx+252]
  00033	83 3e 01	 cmp	 DWORD PTR [esi], 1
  00036	75 03		 jne	 SHORT $LN8@FindSkipPh
  00038	83 c8 01	 or	 eax, 1
$LN8@FindSkipPh:

; 2992 : 
; 2993 : 	if (*Trng.pGlobTomb4->pAdr->pTestFlybyInProgress) FlagsSkip |= SKIP_FLY_CAMERA;

  0003b	8b b1 14 01 00
	00		 mov	 esi, DWORD PTR [ecx+276]
  00041	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00044	74 03		 je	 SHORT $LN7@FindSkipPh
  00046	83 c8 02	 or	 eax, 2
$LN7@FindSkipPh:

; 2994 : 
; 2995 : 	if (*Trng.pGlobTomb4->pAdr->pLevelNow == 0 &&
; 2996 : 		(*Trng.pGlobTomb4->pAdr->pScriptMainFlags & 0x04)) FlagsSkip |= SKIP_TITLE_LEVEL;

  00049	8b b1 b8 00 00
	00		 mov	 esi, DWORD PTR [ecx+184]
  0004f	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00052	75 0e		 jne	 SHORT $LN6@FindSkipPh
  00054	8b b1 c0 00 00
	00		 mov	 esi, DWORD PTR [ecx+192]
  0005a	f6 06 04	 test	 BYTE PTR [esi], 4
  0005d	74 03		 je	 SHORT $LN6@FindSkipPh
  0005f	83 c8 10	 or	 eax, 16			; 00000010H
$LN6@FindSkipPh:

; 2997 : 
; 2998 : 	if (*Trng.pGlobTomb4->pAdr->pTestGrayScreen) FlagsSkip |= SKIP_GRAY_SCREEN;

  00062	8b b1 bc 01 00
	00		 mov	 esi, DWORD PTR [ecx+444]
  00068	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0006b	74 03		 je	 SHORT $LN5@FindSkipPh
  0006d	83 c8 20	 or	 eax, 32			; 00000020H
$LN5@FindSkipPh:

; 2999 : 
; 3000 : 	if (Trng.pGlobTomb4->TestSuspendObjectShowing == true) FlagsSkip |= SKIP_NO_VIEW_OGGETTI;

  00070	80 ba 3a 22 20
	00 01		 cmp	 BYTE PTR [edx+2105914], 1
  00077	75 03		 jne	 SHORT $LN4@FindSkipPh
  00079	83 c8 40	 or	 eax, 64			; 00000040H
$LN4@FindSkipPh:

; 3001 : 
; 3002 : 	if (*Trng.pGlobTomb4->pAdr->pZoomFactor != 0 && *Trng.pGlobTomb4->pAdr->pTestLaserSight ==0) FlagsSkip |= SKIP_BINOCULARS;

  0007c	8b b1 b8 01 00
	00		 mov	 esi, DWORD PTR [ecx+440]
  00082	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00085	74 10		 je	 SHORT $LN3@FindSkipPh
  00087	8b b1 b4 01 00
	00		 mov	 esi, DWORD PTR [ecx+436]
  0008d	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00090	75 05		 jne	 SHORT $LN3@FindSkipPh
  00092	0d 80 00 00 00	 or	 eax, 128		; 00000080H
$LN3@FindSkipPh:

; 3003 : 
; 3004 : 	if (*Trng.pGlobTomb4->pAdr->pTestLaserSight && (*Trng.pGlobTomb4->pAdr->pInputExtGameCommands & 0x200) != 0) FlagsSkip |= SKIP_LASER_SIGHT;

  00097	8b b1 b4 01 00
	00		 mov	 esi, DWORD PTR [ecx+436]
  0009d	80 3e 00	 cmp	 BYTE PTR [esi], 0
  000a0	5e		 pop	 esi
  000a1	74 10		 je	 SHORT $LN2@FindSkipPh
  000a3	8b 49 74	 mov	 ecx, DWORD PTR [ecx+116]
  000a6	f7 01 00 02 00
	00		 test	 DWORD PTR [ecx], 512	; 00000200H
  000ac	74 05		 je	 SHORT $LN2@FindSkipPh
  000ae	0d 00 01 00 00	 or	 eax, 256		; 00000100H
$LN2@FindSkipPh:

; 3005 : 
; 3006 : 	if (Trng.pGlobTomb4->TestOverlapImage==true) FlagsSkip |= SKIP_FULL_IMAGE;

  000b3	80 ba 9e 50 21
	00 01		 cmp	 BYTE PTR [edx+2183326], 1
  000ba	75 05		 jne	 SHORT $LN1@FindSkipPh
  000bc	0d 00 02 00 00	 or	 eax, 512		; 00000200H
$LN1@FindSkipPh:

; 3007 : 
; 3008 : 	return FlagsSkip;
; 3009 : 
; 3010 : }

  000c1	c3		 ret	 0
?FindSkipPhase@@YAKXZ ENDP				; FindSkipPhase
_TEXT	ENDS
PUBLIC	?IsFullScreenMode@@YA_NXZ			; IsFullScreenMode
; Function compile flags: /Ogtp
;	COMDAT ?IsFullScreenMode@@YA_NXZ
_TEXT	SEGMENT
?IsFullScreenMode@@YA_NXZ PROC				; IsFullScreenMode, COMDAT

; 2789 : 	BYTE **p2_BaseGlobale = (BYTE **) 0x754468;
; 2790 : 	BYTE *pBaseGlobale;
; 2791 : 
; 2792 : 	pBaseGlobale = *p2_BaseGlobale;

  00000	a1 68 44 75 00	 mov	 eax, DWORD PTR ds:7685224

; 2793 : 
; 2794 : 	if (pBaseGlobale==NULL) return false;

  00005	85 c0		 test	 eax, eax
  00007	75 03		 jne	 SHORT $LN2@IsFullScre
  00009	32 c0		 xor	 al, al

; 2797 : 	return true;
; 2798 : 
; 2799 : }

  0000b	c3		 ret	 0
$LN2@IsFullScre:

; 2795 : 
; 2796 : 	if (pBaseGlobale[0x4c] & 0x02)  return false;

  0000c	8a 40 4c	 mov	 al, BYTE PTR [eax+76]
  0000f	d0 e8		 shr	 al, 1
  00011	f6 d0		 not	 al
  00013	24 01		 and	 al, 1

; 2797 : 	return true;
; 2798 : 
; 2799 : }

  00015	c3		 ret	 0
?IsFullScreenMode@@YA_NXZ ENDP				; IsFullScreenMode
_TEXT	ENDS
PUBLIC	?ClearMemory@@YAXPAXK@Z				; ClearMemory
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
;	COMDAT ?ClearMemory@@YAXPAXK@Z
_TEXT	SEGMENT
?ClearMemory@@YAXPAXK@Z PROC				; ClearMemory, COMDAT
; _pZone$ = ecx
; _SizeBytes$ = eax

; 2253 : 	memset(pZone, 0, SizeBytes);

  00000	50		 push	 eax
  00001	6a 00		 push	 0
  00003	51		 push	 ecx
  00004	e8 00 00 00 00	 call	 _memset
  00009	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2254 : 
; 2255 : }

  0000c	c3		 ret	 0
?ClearMemory@@YAXPAXK@Z ENDP				; ClearMemory
_TEXT	ENDS
PUBLIC	?RestoreLara@@YAXPAUStrBackupLara@@PAUStrItemTr4@@@Z ; RestoreLara
; Function compile flags: /Ogtp
;	COMDAT ?RestoreLara@@YAXPAUStrBackupLara@@PAUStrItemTr4@@@Z
_TEXT	SEGMENT
?RestoreLara@@YAXPAUStrBackupLara@@PAUStrItemTr4@@@Z PROC ; RestoreLara, COMDAT
; _pBack$ = eax
; _pOggetto$ = ecx

; 2107 : 
; 2108 : 	DWORD *pCopiaOrientamento = (DWORD *)  0x80DF64; //   ;ZonaSave_FB_CopiaOrientamento
; 2109 : 
; 2110 : 	*pCopiaOrientamento = pBack->CopiaOrientamento;

  00000	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  00003	89 15 64 df 80
	00		 mov	 DWORD PTR ds:8445796, edx

; 2111 : 
; 2112 : 	pOggetto->AnimationNow = pBack->AnimationNow;

  00009	0f b7 10	 movzx	 edx, WORD PTR [eax]
  0000c	66 89 51 14	 mov	 WORD PTR [ecx+20], dx

; 2113 : 	pOggetto->FrameNow =pBack->FrameNow;

  00010	0f b7 50 06	 movzx	 edx, WORD PTR [eax+6]
  00014	66 89 51 16	 mov	 WORD PTR [ecx+22], dx

; 2114 : 	pOggetto->StateIdCurrent = pBack->StateIdCurrent;

  00018	0f b7 50 02	 movzx	 edx, WORD PTR [eax+2]
  0001c	66 89 51 0e	 mov	 WORD PTR [ecx+14], dx

; 2115 : 	pOggetto->StateIdNext =	pBack->StateIdNext;

  00020	0f b7 50 04	 movzx	 edx, WORD PTR [eax+4]
  00024	66 89 51 10	 mov	 WORD PTR [ecx+16], dx

; 2116 : 	pOggetto->Room = pBack->LaraRoom;

  00028	0f b7 50 14	 movzx	 edx, WORD PTR [eax+20]
  0002c	66 89 51 18	 mov	 WORD PTR [ecx+24], dx

; 2117 : 	pOggetto->CordX = pBack->LaraX;

  00030	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00033	89 51 40	 mov	 DWORD PTR [ecx+64], edx

; 2118 : 	pOggetto->CordY = pBack->LaraY;

  00036	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00039	89 51 44	 mov	 DWORD PTR [ecx+68], edx

; 2119 : 	pOggetto->CordZ = pBack->LaraZ;

  0003c	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0003f	89 51 48	 mov	 DWORD PTR [ecx+72], edx

; 2120 : 	pOggetto->OrientationH= pBack->Orient;

  00042	0f b7 50 16	 movzx	 edx, WORD PTR [eax+22]
  00046	66 89 51 4e	 mov	 WORD PTR [ecx+78], dx

; 2121 : 	pOggetto->SpeedH=pBack->SpeedH;

  0004a	0f b7 50 18	 movzx	 edx, WORD PTR [eax+24]

; 2122 : 	pOggetto->SpeedV = pBack->SpeedV;

  0004e	66 8b 40 1a	 mov	 ax, WORD PTR [eax+26]
  00052	66 89 51 1e	 mov	 WORD PTR [ecx+30], dx
  00056	66 89 41 20	 mov	 WORD PTR [ecx+32], ax

; 2123 : 
; 2124 : 
; 2125 : }

  0005a	c3		 ret	 0
?RestoreLara@@YAXPAUStrBackupLara@@PAUStrItemTr4@@@Z ENDP ; RestoreLara
_TEXT	ENDS
PUBLIC	?BackupLara@@YAXPAUStrBackupLara@@PAUStrItemTr4@@@Z ; BackupLara
; Function compile flags: /Ogtp
;	COMDAT ?BackupLara@@YAXPAUStrBackupLara@@PAUStrItemTr4@@@Z
_TEXT	SEGMENT
?BackupLara@@YAXPAUStrBackupLara@@PAUStrItemTr4@@@Z PROC ; BackupLara, COMDAT
; _pBack$ = eax
; _pOggetto$ = ecx

; 2088 : 	DWORD *pCopiaOrientamento = (DWORD *)  0x80DF64; //   ;ZonaSave_FB_CopiaOrientamento
; 2089 : 
; 2090 : 	pBack->CopiaOrientamento = *pCopiaOrientamento;

  00000	8b 15 64 df 80
	00		 mov	 edx, DWORD PTR ds:8445796
  00006	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 2091 : 	pBack->AnimationNow  = pOggetto->AnimationNow;

  00009	0f b7 51 14	 movzx	 edx, WORD PTR [ecx+20]
  0000d	66 89 10	 mov	 WORD PTR [eax], dx

; 2092 : 	pBack->FrameNow  = pOggetto->FrameNow;

  00010	0f b7 51 16	 movzx	 edx, WORD PTR [ecx+22]
  00014	66 89 50 06	 mov	 WORD PTR [eax+6], dx

; 2093 : 	pBack->StateIdCurrent  =pOggetto->StateIdCurrent;

  00018	0f b7 51 0e	 movzx	 edx, WORD PTR [ecx+14]
  0001c	66 89 50 02	 mov	 WORD PTR [eax+2], dx

; 2094 : 	pBack->StateIdNext  = pOggetto->StateIdNext;

  00020	0f b7 51 10	 movzx	 edx, WORD PTR [ecx+16]
  00024	66 89 50 04	 mov	 WORD PTR [eax+4], dx

; 2095 : 	pBack->LaraRoom = pOggetto->Room;

  00028	0f b7 51 18	 movzx	 edx, WORD PTR [ecx+24]
  0002c	66 89 50 14	 mov	 WORD PTR [eax+20], dx

; 2096 : 	pBack->LaraX = pOggetto->CordX;

  00030	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00033	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 2097 : 	pBack->LaraY = pOggetto->CordY;

  00036	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00039	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 2098 : 	pBack->LaraZ = pOggetto->CordZ;

  0003c	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  0003f	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 2099 : 	pBack->Orient = pOggetto->OrientationH;

  00042	0f b7 51 4e	 movzx	 edx, WORD PTR [ecx+78]
  00046	66 89 50 16	 mov	 WORD PTR [eax+22], dx

; 2100 : 	pBack->SpeedH = pOggetto->SpeedH;

  0004a	0f b7 51 1e	 movzx	 edx, WORD PTR [ecx+30]

; 2101 : 	pBack->SpeedV = pOggetto->SpeedV;

  0004e	66 8b 49 20	 mov	 cx, WORD PTR [ecx+32]
  00052	66 89 50 18	 mov	 WORD PTR [eax+24], dx
  00056	66 89 48 1a	 mov	 WORD PTR [eax+26], cx

; 2102 : 
; 2103 : }

  0005a	c3		 ret	 0
?BackupLara@@YAXPAUStrBackupLara@@PAUStrItemTr4@@@Z ENDP ; BackupLara
_TEXT	ENDS
PUBLIC	?FromNgleIndexToTomb4Index@@YAHH@Z		; FromNgleIndexToTomb4Index
; Function compile flags: /Ogtp
;	COMDAT ?FromNgleIndexToTomb4Index@@YAHH@Z
_TEXT	SEGMENT
?FromNgleIndexToTomb4Index@@YAHH@Z PROC			; FromNgleIndexToTomb4Index, COMDAT
; _NgleIndex$ = ecx

; 1975 : 	int i;
; 1976 : 
; 1977 : 	i= Trng.pGlobTomb4->VetRemapObjects[NgleIndex];
; 1978 : #ifdef DEBUG_ON
; 1979 : 	if (i == -1) {
; 1980 : 		SendToLog("ERROR: the Ngle index %d doesn't correspond to any tomb4 index",
; 1981 : 			NgleIndex);
; 1982 : 	}
; 1983 : #endif
; 1984 : 	
; 1985 : 	return i;

  00000	a1 04 00 00 00	 mov	 eax, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  00005	0f bf 84 48 74
	2c 1a 00	 movsx	 eax, WORD PTR [eax+ecx*2+1715316]

; 1986 : }

  0000d	c3		 ret	 0
?FromNgleIndexToTomb4Index@@YAHH@Z ENDP			; FromNgleIndexToTomb4Index
_TEXT	ENDS
PUBLIC	?AbsDiffY@@YAHHH@Z				; AbsDiffY
; Function compile flags: /Ogtp
;	COMDAT ?AbsDiffY@@YAHHH@Z
_TEXT	SEGMENT
_Second$ = 8						; size = 4
?AbsDiffY@@YAHHH@Z PROC					; AbsDiffY, COMDAT
; _First$ = eax

; 1773 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1774 : 
; 1775 : 	return abs(First - Second);

  00003	2b 45 08	 sub	 eax, DWORD PTR _Second$[ebp]
  00006	99		 cdq
  00007	33 c2		 xor	 eax, edx
  00009	2b c2		 sub	 eax, edx

; 1776 : }

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?AbsDiffY@@YAHHH@Z ENDP					; AbsDiffY
_TEXT	ENDS
PUBLIC	?AbsDiff@@YAHKK@Z				; AbsDiff
; Function compile flags: /Ogtp
;	COMDAT ?AbsDiff@@YAHKK@Z
_TEXT	SEGMENT
_Second$ = 8						; size = 4
?AbsDiff@@YAHKK@Z PROC					; AbsDiff, COMDAT
; _First$ = eax

; 1766 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1767 : 	return (int) abs((int) First - (int) Second);

  00003	2b 45 08	 sub	 eax, DWORD PTR _Second$[ebp]
  00006	99		 cdq
  00007	33 c2		 xor	 eax, edx
  00009	2b c2		 sub	 eax, edx

; 1768 : 
; 1769 : }

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?AbsDiff@@YAHKK@Z ENDP					; AbsDiff
_TEXT	ENDS
PUBLIC	?Service@@YAHKZZ				; Service
; Function compile flags: /Ogtp
;	COMDAT ?Service@@YAHKZZ
_TEXT	SEGMENT
_SRV_Type$ = 8						; size = 4
?Service@@YAHKZZ PROC					; Service, COMDAT

; 1691 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1692 : 	va_list pArgs;
; 1693 : 	
; 1694 : 	va_start(pArgs, SRV_Type);
; 1695 : 	
; 1696 : 	
; 1697 : 
; 1698 : 	return Trng.Service(Trng.IdMyPlugin, SRV_Type, pArgs);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _SRV_Type$[ebp]
  00006	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?Trng@@3UStrTrngInfos@@A
  0000c	8d 45 0c	 lea	 eax, DWORD PTR _SRV_Type$[ebp+4]
  0000f	50		 push	 eax
  00010	51		 push	 ecx
  00011	52		 push	 edx
  00012	ff 15 10 00 00
	00		 call	 DWORD PTR ?Trng@@3UStrTrngInfos@@A+16

; 1699 : }

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?Service@@YAHKZZ ENDP					; Service
_TEXT	ENDS
PUBLIC	?InitialiseEnums@@YAXXZ				; InitialiseEnums
; Function compile flags: /Ogtp
;	COMDAT ?InitialiseEnums@@YAXXZ
_TEXT	SEGMENT
?InitialiseEnums@@YAXXZ PROC				; InitialiseEnums, COMDAT

; 158  : {

  00000	53		 push	 ebx

; 159  : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumD3D----------------------
; 160  : 	enumD3D.NO_LIGHT = D3D_NO_LIGHT;
; 161  : 	enumD3D.SUN = D3D_SUN;
; 162  : 	enumD3D.LIGHT = D3D_LIGHT;

  00001	b8 01 00 00 00	 mov	 eax, 1

; 163  : 	enumD3D.SPOT_OR_EFFECT = D3D_SPOT_OR_EFFECT;

  00006	b9 02 00 00 00	 mov	 ecx, 2
  0000b	56		 push	 esi

; 164  : 	enumD3D.SHADOW = D3D_SHADOW;
; 165  : 	enumD3D.FOG_BULB = D3D_FOG_BULB;

  0000c	ba 04 00 00 00	 mov	 edx, 4
  00011	33 f6		 xor	 esi, esi

; 166  : 
; 167  : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumCOLF----------------------
; 168  : 	enumCOLF.WINDOWS_COLOR = COLF_WINDOWS_COLOR;
; 169  : 	enumCOLF.TOMB_COLOR = COLF_TOMB_COLOR;
; 170  : 
; 171  : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumFIL----------------------
; 172  : 	enumFIL.FROM_SAVEGAME = FIL_FROM_SAVEGAME;
; 173  : 	enumFIL.FROM_NEW_LEVEL = FIL_FROM_NEW_LEVEL;
; 174  : 	enumFIL.FROM_LEVEL_JUMP = FIL_FROM_LEVEL_JUMP;
; 175  : 	enumFIL.PRESERVE_LARA = FIL_PRESERVE_LARA;
; 176  : 	enumFIL.PRESERVE_LEVEL = FIL_PRESERVE_LEVEL;
; 177  : 	enumFIL.FROM_LIKE_SAVEGAME = FIL_FROM_LIKE_SAVEGAME;

  00013	bb 20 00 00 00	 mov	 ebx, 32			; 00000020H
  00018	57		 push	 edi
  00019	bf 10 00 00 00	 mov	 edi, 16			; 00000010H
  0001e	89 35 04 00 00
	00		 mov	 DWORD PTR ?enumD3D@@3UStrEnumD3D@@A+4, esi
  00024	89 35 00 00 00
	00		 mov	 DWORD PTR ?enumCOLF@@3UStrEnumCOLF@@A, esi
  0002a	be 08 00 00 00	 mov	 esi, 8
  0002f	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?enumD3D@@3UStrEnumD3D@@A, -1
  00039	a3 08 00 00 00	 mov	 DWORD PTR ?enumD3D@@3UStrEnumD3D@@A+8, eax
  0003e	89 0d 0c 00 00
	00		 mov	 DWORD PTR ?enumD3D@@3UStrEnumD3D@@A+12, ecx
  00044	c7 05 10 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?enumD3D@@3UStrEnumD3D@@A+16, 3
  0004e	89 15 14 00 00
	00		 mov	 DWORD PTR ?enumD3D@@3UStrEnumD3D@@A+20, edx
  00054	a3 04 00 00 00	 mov	 DWORD PTR ?enumCOLF@@3UStrEnumCOLF@@A+4, eax
  00059	a3 00 00 00 00	 mov	 DWORD PTR ?enumFIL@@3UStrEnumFIL@@A, eax
  0005e	89 0d 04 00 00
	00		 mov	 DWORD PTR ?enumFIL@@3UStrEnumFIL@@A+4, ecx
  00064	89 15 08 00 00
	00		 mov	 DWORD PTR ?enumFIL@@3UStrEnumFIL@@A+8, edx
  0006a	89 35 0c 00 00
	00		 mov	 DWORD PTR ?enumFIL@@3UStrEnumFIL@@A+12, esi
  00070	89 3d 10 00 00
	00		 mov	 DWORD PTR ?enumFIL@@3UStrEnumFIL@@A+16, edi
  00076	89 1d 14 00 00
	00		 mov	 DWORD PTR ?enumFIL@@3UStrEnumFIL@@A+20, ebx

; 178  : 
; 179  : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumSAVT----------------------
; 180  : 	enumSAVT.LOCAL_DATA = SAVT_LOCAL_DATA;

  0007c	a3 00 00 00 00	 mov	 DWORD PTR ?enumSAVT@@3UStrEnumSAVT@@A, eax

; 181  : 	enumSAVT.GLOBAL_DATA = SAVT_GLOBAL_DATA;

  00081	89 0d 04 00 00
	00		 mov	 DWORD PTR ?enumSAVT@@3UStrEnumSAVT@@A+4, ecx

; 182  : 	enumSAVT.COMPLETED = SAVT_COMPLETED;

  00087	c7 05 08 00 00
	00 00 08 00 00	 mov	 DWORD PTR ?enumSAVT@@3UStrEnumSAVT@@A+8, 2048 ; 00000800H

; 183  : 
; 184  : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumCONV----------------------
; 185  : 	enumCONV.ItemIndexFromNgleToTomb = CONV_ItemIndexFromNgleToTomb;

  00091	a3 00 00 00 00	 mov	 DWORD PTR ?enumCONV@@3UStrEnumCONV@@A, eax

; 186  : 	enumCONV.ItemIndexFromTombToNgle = CONV_ItemIndexFromTombToNgle;

  00096	89 0d 04 00 00
	00		 mov	 DWORD PTR ?enumCONV@@3UStrEnumCONV@@A+4, ecx

; 187  : 	enumCONV.StaticIndexFromNgleToTomb = CONV_StaticIndexFromNgleToTomb;

  0009c	c7 05 08 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?enumCONV@@3UStrEnumCONV@@A+8, 3

; 188  : 	enumCONV.StaticIndexFromTombToNgle = CONV_StaticIndexFromTombToNgle;

  000a6	89 15 0c 00 00
	00		 mov	 DWORD PTR ?enumCONV@@3UStrEnumCONV@@A+12, edx

; 189  : 	enumCONV.RectFromMicroUnitsToPixels = CONV_RectFromMicroUnitsToPixels;

  000ac	c7 05 10 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?enumCONV@@3UStrEnumCONV@@A+16, 5

; 190  : 	enumCONV.AnimIndexFromRelativeToAbs = CONV_AnimIndexFromRelativeToAbs;

  000b6	c7 05 14 00 00
	00 06 00 00 00	 mov	 DWORD PTR ?enumCONV@@3UStrEnumCONV@@A+20, 6

; 191  : 	enumCONV.AnimIndexFromAbsToRelative = CONV_AnimIndexFromAbsToRelative;

  000c0	c7 05 18 00 00
	00 07 00 00 00	 mov	 DWORD PTR ?enumCONV@@3UStrEnumCONV@@A+24, 7

; 192  : 	enumCONV.ItemFromStrItemTr4ToIndex = CONV_ItemFromStrItemTr4ToIndex;

  000ca	89 35 1c 00 00
	00		 mov	 DWORD PTR ?enumCONV@@3UStrEnumCONV@@A+28, esi

; 193  : 	enumCONV.RoomIndexFromNgleToTomb = CONV_RoomIndexFromNgleToTomb;

  000d0	c7 05 20 00 00
	00 09 00 00 00	 mov	 DWORD PTR ?enumCONV@@3UStrEnumCONV@@A+32, 9

; 194  : 	enumCONV.RoomIndexFromTombToNgle = CONV_RoomIndexFromTombToNgle;

  000da	c7 05 24 00 00
	00 0a 00 00 00	 mov	 DWORD PTR ?enumCONV@@3UStrEnumCONV@@A+36, 10 ; 0000000aH

; 195  : 	enumCONV.FrameIndexFromAbsToRelative = CONV_FrameIndexFromAbsToRelative;

  000e4	c7 05 28 00 00
	00 0b 00 00 00	 mov	 DWORD PTR ?enumCONV@@3UStrEnumCONV@@A+40, 11 ; 0000000bH

; 196  : 	enumCONV.FrameIndexFromRelativeToAbs = CONV_FrameIndexFromRelativeToAbs;

  000ee	c7 05 2c 00 00
	00 0c 00 00 00	 mov	 DWORD PTR ?enumCONV@@3UStrEnumCONV@@A+44, 12 ; 0000000cH

; 197  : 
; 198  : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumFL----------------------
; 199  : 	enumFL.HOLDS_FLARE_OR_TORCH = FL_HOLDS_FLARE_OR_TORCH;

  000f8	a3 00 00 00 00	 mov	 DWORD PTR ?enumFL@@3UStrEnumFL@@A, eax

; 200  : 	enumFL.UNKNOWN_02 = FL_UNKNOWN_02;

  000fd	89 0d 04 00 00
	00		 mov	 DWORD PTR ?enumFL@@3UStrEnumFL@@A+4, ecx

; 201  : 	enumFL.SPECIAL_STATE = FL_SPECIAL_STATE;

  00103	89 15 08 00 00
	00		 mov	 DWORD PTR ?enumFL@@3UStrEnumFL@@A+8, edx

; 202  : 	enumFL.IS_BURNING = FL_IS_BURNING;

  00109	89 35 0c 00 00
	00		 mov	 DWORD PTR ?enumFL@@3UStrEnumFL@@A+12, esi

; 203  : 	enumFL.ON_ALL_FOUR = FL_ON_ALL_FOUR;

  0010f	89 3d 10 00 00
	00		 mov	 DWORD PTR ?enumFL@@3UStrEnumFL@@A+16, edi

; 204  : 	enumFL.SELF_ALIGNMENT = FL_SELF_ALIGNMENT;

  00115	89 1d 14 00 00
	00		 mov	 DWORD PTR ?enumFL@@3UStrEnumFL@@A+20, ebx

; 205  : 	enumFL.UNDER_MONKEY_SECTOR = FL_UNDER_MONKEY_SECTOR;

  0011b	c7 05 18 00 00
	00 40 00 00 00	 mov	 DWORD PTR ?enumFL@@3UStrEnumFL@@A+24, 64 ; 00000040H

; 206  : 
; 207  : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumRIB----------------------
; 208  : 	enumRIB.ONLY_DIGITS = RIB_ONLY_DIGITS;

  00125	a3 00 00 00 00	 mov	 DWORD PTR ?enumRIB@@3UStrEnumRIB@@A, eax

; 209  : 	enumRIB.ONLY_LETTERS = RIB_ONLY_LETTERS;

  0012a	89 0d 04 00 00
	00		 mov	 DWORD PTR ?enumRIB@@3UStrEnumRIB@@A+4, ecx

; 210  : 	enumRIB.HIDE_CARET = RIB_HIDE_CARET;

  00130	89 15 08 00 00
	00		 mov	 DWORD PTR ?enumRIB@@3UStrEnumRIB@@A+8, edx

; 211  : 	enumRIB.BLINK_CARET = RIB_BLINK_CARET;

  00136	89 35 0c 00 00
	00		 mov	 DWORD PTR ?enumRIB@@3UStrEnumRIB@@A+12, esi

; 212  : 	enumRIB.SOUND_ON_KEY = RIB_SOUND_ON_KEY;

  0013c	89 3d 10 00 00
	00		 mov	 DWORD PTR ?enumRIB@@3UStrEnumRIB@@A+16, edi

; 213  : 	enumRIB.PRINT_ONLY = RIB_PRINT_ONLY;

  00142	89 1d 14 00 00
	00		 mov	 DWORD PTR ?enumRIB@@3UStrEnumRIB@@A+20, ebx

; 214  : 	enumRIB.ALIGN_CENTER = RIB_ALIGN_CENTER;

  00148	c7 05 18 00 00
	00 40 00 00 00	 mov	 DWORD PTR ?enumRIB@@3UStrEnumRIB@@A+24, 64 ; 00000040H

; 215  : 	enumRIB.ONLY_CAPS = RIB_ONLY_CAPS;

  00152	c7 05 1c 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?enumRIB@@3UStrEnumRIB@@A+28, 128 ; 00000080H

; 216  : 	enumRIB.PRINT_BIG_TEXT = RIB_PRINT_BIG_TEXT;

  0015c	c7 05 20 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?enumRIB@@3UStrEnumRIB@@A+32, 256 ; 00000100H

; 217  : 	enumRIB.INPUT_BELOW_BIG_TEXT = RIB_INPUT_BELOW_BIG_TEXT;

  00166	c7 05 24 00 00
	00 00 02 00 00	 mov	 DWORD PTR ?enumRIB@@3UStrEnumRIB@@A+36, 512 ; 00000200H

; 218  : 	enumRIB.ADD_SCANCODE_LIST = RIB_ADD_SCANCODE_LIST;

  00170	c7 05 28 00 00
	00 00 04 00 00	 mov	 DWORD PTR ?enumRIB@@3UStrEnumRIB@@A+40, 1024 ; 00000400H

; 219  : 	enumRIB.SHORTCUT_KEY = RIB_SHORTCUT_KEY;

  0017a	c7 05 2c 00 00
	00 00 08 00 00	 mov	 DWORD PTR ?enumRIB@@3UStrEnumRIB@@A+44, 2048 ; 00000800H

; 220  : 	enumRIB.HIDE_TEXT = RIB_HIDE_TEXT;

  00184	c7 05 30 00 00
	00 00 10 00 00	 mov	 DWORD PTR ?enumRIB@@3UStrEnumRIB@@A+48, 4096 ; 00001000H

; 221  : 
; 222  : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumWTF----------------------
; 223  : 	enumWTF.FLYING_TEXT = WTF_FLYING_TEXT;

  0018e	a3 00 00 00 00	 mov	 DWORD PTR ?enumWTF@@3UStrEnumWTF@@A, eax

; 224  : 	enumWTF.PULSING_TEXT = WTF_PULSING_TEXT;

  00193	89 0d 04 00 00
	00		 mov	 DWORD PTR ?enumWTF@@3UStrEnumWTF@@A+4, ecx

; 225  : 	enumWTF.CHANGE_COLOR = WTF_CHANGE_COLOR;

  00199	89 15 08 00 00
	00		 mov	 DWORD PTR ?enumWTF@@3UStrEnumWTF@@A+8, edx

; 226  : 	enumWTF.OVER_INVENTORY = WTF_OVER_INVENTORY;

  0019f	89 35 0c 00 00
	00		 mov	 DWORD PTR ?enumWTF@@3UStrEnumWTF@@A+12, esi

; 227  : 	enumWTF.OVER_IMAGE = WTF_OVER_IMAGE;

  001a5	89 3d 10 00 00
	00		 mov	 DWORD PTR ?enumWTF@@3UStrEnumWTF@@A+16, edi

; 228  : 	enumWTF.OVER_FLYCAMERA = WTF_OVER_FLYCAMERA;

  001ab	89 1d 14 00 00
	00		 mov	 DWORD PTR ?enumWTF@@3UStrEnumWTF@@A+20, ebx

; 229  : 	enumWTF.OVER_FIXCAMERA = WTF_OVER_FIXCAMERA;

  001b1	c7 05 18 00 00
	00 40 00 00 00	 mov	 DWORD PTR ?enumWTF@@3UStrEnumWTF@@A+24, 64 ; 00000040H

; 230  : 	enumWTF.OVER_BINOCULAR = WTF_OVER_BINOCULAR;

  001bb	c7 05 1c 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?enumWTF@@3UStrEnumWTF@@A+28, 128 ; 00000080H

; 231  : 	enumWTF.OVER_LASER_SIGHT = WTF_OVER_LASER_SIGHT;

  001c5	c7 05 20 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?enumWTF@@3UStrEnumWTF@@A+32, 256 ; 00000100H

; 232  : 
; 233  : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumFT----------------------
; 234  : 	enumFT.HALF_SIZEX = FT_HALF_SIZEX;

  001cf	a3 00 00 00 00	 mov	 DWORD PTR ?enumFT@@3UStrEnumFT@@A, eax

; 235  : 	enumFT.HALF_SIZEY = FT_HALF_SIZEY;

  001d4	89 0d 04 00 00
	00		 mov	 DWORD PTR ?enumFT@@3UStrEnumFT@@A+4, ecx

; 236  : 	enumFT.DOUBLE_SIZEX = FT_DOUBLE_SIZEX;

  001da	89 15 08 00 00
	00		 mov	 DWORD PTR ?enumFT@@3UStrEnumFT@@A+8, edx

; 237  : 	enumFT.DOUBLE_SIZEY = FT_DOUBLE_SIZEY;

  001e0	89 35 0c 00 00
	00		 mov	 DWORD PTR ?enumFT@@3UStrEnumFT@@A+12, esi

; 238  : 	enumFT.LITTLE_ALWAYS = FT_LITTLE_ALWAYS;

  001e6	89 3d 10 00 00
	00		 mov	 DWORD PTR ?enumFT@@3UStrEnumFT@@A+16, edi

; 239  : 	enumFT.USE_FLOAT = FT_USE_FLOAT;

  001ec	89 1d 14 00 00
	00		 mov	 DWORD PTR ?enumFT@@3UStrEnumFT@@A+20, ebx

; 240  : 	enumFT.NO_BORDERS = FT_NO_BORDERS;

  001f2	c7 05 18 00 00
	00 40 00 00 00	 mov	 DWORD PTR ?enumFT@@3UStrEnumFT@@A+24, 64 ; 00000040H

; 241  : 	enumFT.SIZE_ATOMIC_CHAR = FT_SIZE_ATOMIC_CHAR;

  001fc	c7 05 1c 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?enumFT@@3UStrEnumFT@@A+28, 128 ; 00000080H

; 242  : 
; 243  : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumFTS----------------------
; 244  : 	enumFTS.ALIGN_LEFT = FTS_ALIGN_LEFT;

  00206	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?enumFTS@@3UStrEnumFTS@@A, 0

; 245  : 	enumFTS.STRETCH_TEXT = FTS_STRETCH_TEXT;

  00210	c7 05 04 00 00
	00 00 10 00 00	 mov	 DWORD PTR ?enumFTS@@3UStrEnumFTS@@A+4, 4096 ; 00001000H

; 246  : 	enumFTS.BLINK = FTS_BLINK;

  0021a	c7 05 08 00 00
	00 00 20 00 00	 mov	 DWORD PTR ?enumFTS@@3UStrEnumFTS@@A+8, 8192 ; 00002000H

; 247  : 	enumFTS.ALIGN_RIGHT = FTS_ALIGN_RIGHT;

  00224	c7 05 0c 00 00
	00 00 40 00 00	 mov	 DWORD PTR ?enumFTS@@3UStrEnumFTS@@A+12, 16384 ; 00004000H

; 248  : 	enumFTS.ALIGN_CENTER = FTS_ALIGN_CENTER;

  0022e	c7 05 10 00 00
	00 00 80 00 00	 mov	 DWORD PTR ?enumFTS@@3UStrEnumFTS@@A+16, 32768 ; 00008000H

; 249  : 
; 250  : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumFC----------------------
; 251  : 	enumFC.WHITE_PULSE = FC_WHITE_PULSE;

  00238	a3 00 00 00 00	 mov	 DWORD PTR ?enumFC@@3UStrEnumFC@@A, eax

; 252  : 	enumFC.WHITE = FC_WHITE;

  0023d	89 0d 04 00 00
	00		 mov	 DWORD PTR ?enumFC@@3UStrEnumFC@@A+4, ecx

; 253  : 	enumFC.RED = FC_RED;

  00243	c7 05 08 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?enumFC@@3UStrEnumFC@@A+8, 3

; 254  : 	enumFC.BLUE = FC_BLUE;

  0024d	89 15 0c 00 00
	00		 mov	 DWORD PTR ?enumFC@@3UStrEnumFC@@A+12, edx

; 255  : 	enumFC.LIGHT_GRAY = FC_LIGHT_GRAY;

  00253	c7 05 10 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?enumFC@@3UStrEnumFC@@A+16, 5

; 256  : 	enumFC.GOLD = FC_GOLD;

  0025d	c7 05 14 00 00
	00 06 00 00 00	 mov	 DWORD PTR ?enumFC@@3UStrEnumFC@@A+20, 6

; 257  : 	enumFC.DARK_GRAY = FC_DARK_GRAY;

  00267	c7 05 18 00 00
	00 07 00 00 00	 mov	 DWORD PTR ?enumFC@@3UStrEnumFC@@A+24, 7

; 258  : 	enumFC.YELLOW = FC_YELLOW;

  00271	89 35 1c 00 00
	00		 mov	 DWORD PTR ?enumFC@@3UStrEnumFC@@A+28, esi

; 259  : 
; 260  : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumPRET----------------------
; 261  : 	enumPRET.OK = PRET_OK;

  00277	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?enumPRET@@3UStrEnumPRET@@A, 0

; 262  : 	enumPRET.GO_TO_TITLE = PRET_GO_TO_TITLE;

  00281	a3 04 00 00 00	 mov	 DWORD PTR ?enumPRET@@3UStrEnumPRET@@A+4, eax

; 263  : 	enumPRET.EXECUTE_ORIGINAL = PRET_EXECUTE_ORIGINAL;

  00286	89 0d 08 00 00
	00		 mov	 DWORD PTR ?enumPRET@@3UStrEnumPRET@@A+8, ecx

; 264  : 
; 265  : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumPHASE----------------------
; 266  : 	enumPHASE.INVENTORY_MAIN = PHASE_INVENTORY_MAIN;

  0028c	a3 00 00 00 00	 mov	 DWORD PTR ?enumPHASE@@3UStrEnumPHASE@@A, eax

; 267  : 	enumPHASE.PAUSE_SCREEN = PHASE_PAUSE_SCREEN;

  00291	89 0d 04 00 00
	00		 mov	 DWORD PTR ?enumPHASE@@3UStrEnumPHASE@@A+4, ecx

; 268  : 	enumPHASE.LOAD_GAME_PANEL = PHASE_LOAD_GAME_PANEL;

  00297	c7 05 08 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?enumPHASE@@3UStrEnumPHASE@@A+8, 3

; 269  : 	enumPHASE.SAVE_GAME_PANEL = PHASE_SAVE_GAME_PANEL;

  002a1	89 15 0c 00 00
	00		 mov	 DWORD PTR ?enumPHASE@@3UStrEnumPHASE@@A+12, edx

; 270  : 	enumPHASE.OPTIONS = PHASE_OPTIONS;

  002a7	c7 05 10 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?enumPHASE@@3UStrEnumPHASE@@A+16, 5

; 271  : 	enumPHASE.OPTION_COMMANDS = PHASE_OPTION_COMMANDS;

  002b1	c7 05 14 00 00
	00 06 00 00 00	 mov	 DWORD PTR ?enumPHASE@@3UStrEnumPHASE@@A+20, 6

; 272  : 	enumPHASE.STATISTICS = PHASE_STATISTICS;

  002bb	c7 05 18 00 00
	00 07 00 00 00	 mov	 DWORD PTR ?enumPHASE@@3UStrEnumPHASE@@A+24, 7

; 273  : 	enumPHASE.NEW_LEVEL = PHASE_NEW_LEVEL;

  002c5	89 35 1c 00 00
	00		 mov	 DWORD PTR ?enumPHASE@@3UStrEnumPHASE@@A+28, esi

; 274  : 	enumPHASE.TITLE_MENU = PHASE_TITLE_MENU;

  002cb	c7 05 20 00 00
	00 09 00 00 00	 mov	 DWORD PTR ?enumPHASE@@3UStrEnumPHASE@@A+32, 9

; 275  : 	enumPHASE.INVENTORY_EXAMINE = PHASE_INVENTORY_EXAMINE;

  002d5	c7 05 24 00 00
	00 0a 00 00 00	 mov	 DWORD PTR ?enumPHASE@@3UStrEnumPHASE@@A+36, 10 ; 0000000aH

; 276  : 
; 277  : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumIRET----------------------
; 278  : 	enumIRET.OK = IRET_OK;

  002df	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?enumIRET@@3UStrEnumIRET@@A, 0

; 279  : 	enumIRET.SKIP_ORIGINAL = IRET_SKIP_ORIGINAL;

  002e9	a3 04 00 00 00	 mov	 DWORD PTR ?enumIRET@@3UStrEnumIRET@@A+4, eax

; 280  : 	enumIRET.LOADED_GAME = IRET_LOADED_GAME;

  002ee	89 0d 08 00 00
	00		 mov	 DWORD PTR ?enumIRET@@3UStrEnumIRET@@A+8, ecx

; 281  : 
; 282  : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumCPU----------------------
; 283  : 	enumCPU.CARRY = CPU_CARRY;

  002f4	a3 00 00 00 00	 mov	 DWORD PTR ?enumCPU@@3UStrEnumCPU@@A, eax

; 284  : 	enumCPU.PARITY = CPU_PARITY;

  002f9	89 15 04 00 00
	00		 mov	 DWORD PTR ?enumCPU@@3UStrEnumCPU@@A+4, edx

; 285  : 	enumCPU.ZERO = CPU_ZERO;

  002ff	c7 05 08 00 00
	00 40 00 00 00	 mov	 DWORD PTR ?enumCPU@@3UStrEnumCPU@@A+8, 64 ; 00000040H

; 286  : 	enumCPU.SIGN = CPU_SIGN;

  00309	c7 05 0c 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?enumCPU@@3UStrEnumCPU@@A+12, 128 ; 00000080H

; 287  : 
; 288  : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumAPPC----------------------
; 289  : 	enumAPPC.OK = APPC_OK;

  00313	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?enumAPPC@@3UStrEnumAPPC@@A, 0

; 290  : 	enumAPPC.WARN_PATCH_ALREADY_PERFORMED = APPC_WARN_PATCH_ALREADY_PERFORMED;

  0031d	a3 04 00 00 00	 mov	 DWORD PTR ?enumAPPC@@3UStrEnumAPPC@@A+4, eax

; 291  : 	enumAPPC.WARN_PLUGIN_REMOVED_RELOCATION_OF_PROCEDURE = APPC_WARN_PLUGIN_REMOVED_RELOCATION_OF_PROCEDURE;

  00322	89 0d 08 00 00
	00		 mov	 DWORD PTR ?enumAPPC@@3UStrEnumAPPC@@A+8, ecx

; 292  : 	enumAPPC.WARN_PATCH_IN_A_RILOC_RESTORED_PROCEDURE = APPC_WARN_PATCH_IN_A_RILOC_RESTORED_PROCEDURE;

  00328	c7 05 0c 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?enumAPPC@@3UStrEnumAPPC@@A+12, 3

; 293  : 	enumAPPC.WARN_PATCH_OVER_OLD_PATCH = APPC_WARN_PATCH_OVER_OLD_PATCH;

  00332	89 15 10 00 00
	00		 mov	 DWORD PTR ?enumAPPC@@3UStrEnumAPPC@@A+16, edx

; 294  : 	enumAPPC.WARN_PATCH_OVER_CHANGED_ARGUMENTS = APPC_WARN_PATCH_OVER_CHANGED_ARGUMENTS;

  00338	c7 05 14 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?enumAPPC@@3UStrEnumAPPC@@A+20, 5

; 295  : 	enumAPPC.ERROR_PLUGIN_ID_UNREGISTERED = APPC_ERROR_PLUGIN_ID_UNREGISTERED;

  00342	c7 05 18 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?enumAPPC@@3UStrEnumAPPC@@A+24, -1

; 296  : 	enumAPPC.ERROR_PATCH_OVERLAPPED_TO_RUNTIME_PATCH = APPC_ERROR_PATCH_OVERLAPPED_TO_RUNTIME_PATCH;

  0034c	c7 05 1c 00 00
	00 fe ff ff ff	 mov	 DWORD PTR ?enumAPPC@@3UStrEnumAPPC@@A+28, -2 ; fffffffeH

; 297  : 	enumAPPC.ERROR_PATCH_IN_RILOCATED_PROCEDURE = APPC_ERROR_PATCH_IN_RILOCATED_PROCEDURE;

  00356	c7 05 20 00 00
	00 fd ff ff ff	 mov	 DWORD PTR ?enumAPPC@@3UStrEnumAPPC@@A+32, -3 ; fffffffdH

; 298  : 	enumAPPC.ERROR_NOT_FOUND_TOMB4_IMAGE = APPC_ERROR_NOT_FOUND_TOMB4_IMAGE;

  00360	c7 05 24 00 00
	00 fc ff ff ff	 mov	 DWORD PTR ?enumAPPC@@3UStrEnumAPPC@@A+36, -4 ; fffffffcH

; 299  : 	enumAPPC.ERROR_RESTORE_ZONE_OUTSIDE_CODE_RANGE = APPC_ERROR_RESTORE_ZONE_OUTSIDE_CODE_RANGE;

  0036a	c7 05 28 00 00
	00 fb ff ff ff	 mov	 DWORD PTR ?enumAPPC@@3UStrEnumAPPC@@A+40, -5 ; fffffffbH

; 300  : 	enumAPPC.ERROR_WRONG_PATCH_FOR_RUN_TIME = APPC_ERROR_WRONG_PATCH_FOR_RUN_TIME;

  00374	c7 05 2c 00 00
	00 fa ff ff ff	 mov	 DWORD PTR ?enumAPPC@@3UStrEnumAPPC@@A+44, -6 ; fffffffaH

; 301  : 	enumAPPC.ERROR_PATCH_OUTSIDE_CODE_SEGMENT = APPC_ERROR_PATCH_OUTSIDE_CODE_SEGMENT;

  0037e	c7 05 30 00 00
	00 f9 ff ff ff	 mov	 DWORD PTR ?enumAPPC@@3UStrEnumAPPC@@A+48, -7 ; fffffff9H

; 302  : 	enumAPPC.ERROR_PATCH_OVERLAPPED_TO_RESERVED_ZONE = APPC_ERROR_PATCH_OVERLAPPED_TO_RESERVED_ZONE;

  00388	c7 05 34 00 00
	00 f8 ff ff ff	 mov	 DWORD PTR ?enumAPPC@@3UStrEnumAPPC@@A+52, -8 ; fffffff8H

; 303  : 	enumAPPC.ERROR_RESERVED_ZONE_ALREADY_USED = APPC_ERROR_RESERVED_ZONE_ALREADY_USED;

  00392	c7 05 38 00 00
	00 f7 ff ff ff	 mov	 DWORD PTR ?enumAPPC@@3UStrEnumAPPC@@A+56, -9 ; fffffff7H

; 304  : 
; 305  : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumCB----------------------
; 306  : 	enumCB.INIT_PROGRAM = CB_INIT_PROGRAM;

  0039c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A, 0

; 307  : 	enumCB.SAVING_GAME = CB_SAVING_GAME;

  003a6	a3 04 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+4, eax

; 308  : 	enumCB.LOADING_GAME = CB_LOADING_GAME;

  003ab	89 0d 08 00 00
	00		 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+8, ecx

; 309  : 	enumCB.INIT_GAME = CB_INIT_GAME;

  003b1	c7 05 0c 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+12, 3

; 310  : 	enumCB.INIT_LOAD_NEW_LEVEL = CB_INIT_LOAD_NEW_LEVEL;

  003bb	89 15 10 00 00
	00		 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+16, edx

; 311  : 	enumCB.FLIPEFFECT_MINE = CB_FLIPEFFECT_MINE;

  003c1	c7 05 14 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+20, 5

; 312  : 	enumCB.ACTION_MINE = CB_ACTION_MINE;

  003cb	c7 05 18 00 00
	00 06 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+24, 6

; 313  : 	enumCB.CONDITION_MINE = CB_CONDITION_MINE;

  003d5	c7 05 1c 00 00
	00 07 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+28, 7

; 314  : 	enumCB.CUSTOMIZE_MINE = CB_CUSTOMIZE_MINE;

  003df	89 35 20 00 00
	00		 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+32, esi

; 315  : 	enumCB.PARAMETER_MINE = CB_PARAMETER_MINE;

  003e5	c7 05 24 00 00
	00 09 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+36, 9

; 316  : 	enumCB.CYCLE_BEGIN = CB_CYCLE_BEGIN;

  003ef	c7 05 28 00 00
	00 0a 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+40, 10 ; 0000000aH

; 317  : 	enumCB.CYCLE_END = CB_CYCLE_END;

  003f9	c7 05 2c 00 00
	00 0b 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+44, 11 ; 0000000bH

; 318  : 	enumCB.GLOBAL_TRIGGER = CB_GLOBAL_TRIGGER;

  00403	c7 05 30 00 00
	00 0c 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+48, 12 ; 0000000cH

; 319  : 	enumCB.INIT_OBJECTS = CB_INIT_OBJECTS;

  0040d	c7 05 34 00 00
	00 0d 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+52, 13 ; 0000000dH

; 320  : 	enumCB.PROGR_ACTION_MINE = CB_PROGR_ACTION_MINE;

  00417	c7 05 38 00 00
	00 0e 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+56, 14 ; 0000000eH

; 321  : 	enumCB.PROGR_ACTION_DRAW_MINE = CB_PROGR_ACTION_DRAW_MINE;

  00421	c7 05 3c 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+60, 15 ; 0000000fH

; 322  : 	enumCB.INIT_LEVEL = CB_INIT_LEVEL;

  0042b	89 3d 40 00 00
	00		 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+64, edi

; 323  : 	enumCB.COMPLETED_PROGR_ACTION = CB_COMPLETED_PROGR_ACTION;

  00431	c7 05 44 00 00
	00 11 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+68, 17 ; 00000011H

; 324  : 	enumCB.VEHICLE = CB_VEHICLE;

  0043b	c7 05 48 00 00
	00 12 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+72, 18 ; 00000012H

; 325  : 	enumCB.ASSIGN_SLOT_MINE = CB_ASSIGN_SLOT_MINE;

  00445	c7 05 4c 00 00
	00 13 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+76, 19 ; 00000013H

; 326  : 	enumCB.FMV_MANAGER = CB_FMV_MANAGER;

  0044f	c7 05 50 00 00
	00 14 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+80, 20 ; 00000014H

; 327  : 	enumCB.INPUT_MANAGER = CB_INPUT_MANAGER;

  00459	c7 05 54 00 00
	00 15 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+84, 21 ; 00000015H

; 328  : 	enumCB.SAVEGAME_MANAGER = CB_SAVEGAME_MANAGER;

  00463	c7 05 58 00 00
	00 16 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+88, 22 ; 00000016H

; 329  : 	enumCB.PAUSE_MANAGER = CB_PAUSE_MANAGER;

  0046d	c7 05 5c 00 00
	00 17 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+92, 23 ; 00000017H

; 330  : 	enumCB.STATISTICS_MANAGER = CB_STATISTICS_MANAGER;

  00477	c7 05 60 00 00
	00 18 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+96, 24 ; 00000018H

; 331  : 	enumCB.TITLE_MENU_MANAGER = CB_TITLE_MENU_MANAGER;

  00481	c7 05 64 00 00
	00 19 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+100, 25 ; 00000019H

; 332  : 	enumCB.WINDOWS_FONT_CREATE = CB_WINDOWS_FONT_CREATE;

  0048b	c7 05 68 00 00
	00 1a 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+104, 26 ; 0000001aH

; 333  : 	enumCB.WINDOWS_UNICODE_CONVERT = CB_WINDOWS_UNICODE_CONVERT;

  00495	c7 05 6c 00 00
	00 1b 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+108, 27 ; 0000001bH

; 334  : 	enumCB.WINDOWS_TEXT_PRINT = CB_WINDOWS_TEXT_PRINT;

  0049f	c7 05 70 00 00
	00 1c 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+112, 28 ; 0000001cH

; 335  : 	enumCB.DIAGNOSTIC = CB_DIAGNOSTIC;

  004a9	c7 05 74 00 00
	00 1d 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+116, 29 ; 0000001dH

; 336  : 	enumCB.LARA_CONTROL = CB_LARA_CONTROL;

  004b3	c7 05 78 00 00
	00 21 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+120, 33 ; 00000021H

; 337  : 	enumCB.LARA_DRAW = CB_LARA_DRAW;

  004bd	c7 05 7c 00 00
	00 22 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+124, 34 ; 00000022H

; 338  : 	enumCB.LARA_HAIR_DRAW = CB_LARA_HAIR_DRAW;

  004c7	c7 05 80 00 00
	00 23 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+128, 35 ; 00000023H

; 339  : 	enumCB.LARA_HAIR_CONTROL = CB_LARA_HAIR_CONTROL;

  004d1	c7 05 84 00 00
	00 24 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+132, 36 ; 00000024H

; 340  : 	enumCB.INVENTORY_MAIN = CB_INVENTORY_MAIN;

  004db	c7 05 88 00 00
	00 25 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+136, 37 ; 00000025H

; 341  : 	enumCB.INVENT_BACKGROUND_CREATE = CB_INVENT_BACKGROUND_CREATE;

  004e5	c7 05 8c 00 00
	00 26 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+140, 38 ; 00000026H

; 342  : 	enumCB.INVENT_BACKGROUND_DRAW = CB_INVENT_BACKGROUND_DRAW;

  004ef	c7 05 90 00 00
	00 27 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+144, 39 ; 00000027H

; 343  : 	enumCB.INVENT_BACKGROUND_QUIT = CB_INVENT_BACKGROUND_QUIT;

  004f9	c7 05 94 00 00
	00 28 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+148, 40 ; 00000028H

; 344  : 	enumCB.ANIMATE_LARA = CB_ANIMATE_LARA;

  00503	c7 05 98 00 00
	00 29 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+152, 41 ; 00000029H

; 345  : 	enumCB.OPTIONS_MANAGER = CB_OPTIONS_MANAGER;

  0050d	c7 05 9c 00 00
	00 2a 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+156, 42 ; 0000002aH

; 346  : 	enumCB.FLIPEFFECT = CB_FLIPEFFECT;

  00517	c7 05 a0 00 00
	00 64 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+160, 100 ; 00000064H

; 347  : 	enumCB.ACTION = CB_ACTION;

  00521	c7 05 a4 00 00
	00 65 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+164, 101 ; 00000065H

; 348  : 	enumCB.CONDITION = CB_CONDITION;

  0052b	c7 05 a8 00 00
	00 66 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+168, 102 ; 00000066H

; 349  : 	enumCB.VEHICLE_CONTROL = CB_VEHICLE_CONTROL;

  00535	c7 05 ac 00 00
	00 67 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+172, 103 ; 00000067H

; 350  : 	enumCB.PROGR_ACTION = CB_PROGR_ACTION;

  0053f	c7 05 b0 00 00
	00 69 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+176, 105 ; 00000069H

; 351  : 	enumCB.NUMERIC_TRNG_PATCH = CB_NUMERIC_TRNG_PATCH;

  00549	c7 05 b4 00 00
	00 6a 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+180, 106 ; 0000006aH

; 352  : 	enumCB.SLOT_INITIALISE = CB_SLOT_INITIALISE;

  00553	c7 05 b8 00 00
	00 6b 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+184, 107 ; 0000006bH

; 353  : 	enumCB.SLOT_CONTROL = CB_SLOT_CONTROL;

  0055d	c7 05 bc 00 00
	00 6c 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+188, 108 ; 0000006cH

; 354  : 	enumCB.SLOT_COLLISION = CB_SLOT_COLLISION;

  00567	c7 05 c0 00 00
	00 6d 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+192, 109 ; 0000006dH

; 355  : 	enumCB.SLOT_DRAW = CB_SLOT_DRAW;

  00571	c7 05 c4 00 00
	00 6e 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+196, 110 ; 0000006eH

; 356  : 	enumCB.SLOT_FLOOR = CB_SLOT_FLOOR;

  0057b	c7 05 c8 00 00
	00 6f 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+200, 111 ; 0000006fH

; 357  : 	enumCB.SLOT_CEILING = CB_SLOT_CEILING;

  00585	c7 05 cc 00 00
	00 70 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+204, 112 ; 00000070H

; 358  : 	enumCB.SLOT_DRAW_EXTRA = CB_SLOT_DRAW_EXTRA;

  0058f	c7 05 d0 00 00
	00 71 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+208, 113 ; 00000071H

; 359  : 	enumCB.STATE_ID_LARA_CTRL = CB_STATE_ID_LARA_CTRL;

  00599	c7 05 d4 00 00
	00 72 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+212, 114 ; 00000072H

; 360  : 	enumCB.STATE_ID_LARA_COLLISION = CB_STATE_ID_LARA_COLLISION;

  005a3	c7 05 d8 00 00
	00 73 00 00 00	 mov	 DWORD PTR ?enumCB@@3UStrEnumCB@@A+216, 115 ; 00000073H

; 361  : 
; 362  : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumSLOT----------------------
; 363  : 	enumSLOT.LARA = SLOT_LARA;

  005ad	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A, 0

; 364  : 	enumSLOT.PISTOLS_ANIM = SLOT_PISTOLS_ANIM;

  005b7	a3 04 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+4, eax

; 365  : 	enumSLOT.UZI_ANIM = SLOT_UZI_ANIM;

  005bc	89 0d 08 00 00
	00		 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+8, ecx

; 366  : 	enumSLOT.SHOTGUN_ANIM = SLOT_SHOTGUN_ANIM;

  005c2	c7 05 0c 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+12, 3

; 367  : 	enumSLOT.CROSSBOW_ANIM = SLOT_CROSSBOW_ANIM;

  005cc	89 15 10 00 00
	00		 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+16, edx

; 368  : 	enumSLOT.GRENADE_GUN_ANIM = SLOT_GRENADE_GUN_ANIM;

  005d2	c7 05 14 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+20, 5

; 369  : 	enumSLOT.SIXSHOOTER_ANIM = SLOT_SIXSHOOTER_ANIM;

  005dc	c7 05 18 00 00
	00 06 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+24, 6

; 370  : 	enumSLOT.FLARE_ANIM = SLOT_FLARE_ANIM;

  005e6	c7 05 1c 00 00
	00 07 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+28, 7

; 371  : 	enumSLOT.LARA_SKIN = SLOT_LARA_SKIN;

  005f0	89 35 20 00 00
	00		 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+32, esi

; 372  : 	enumSLOT.LARA_SKIN_JOINTS = SLOT_LARA_SKIN_JOINTS;

  005f6	c7 05 24 00 00
	00 09 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+36, 9

; 373  : 	enumSLOT.LARA_SCREAM = SLOT_LARA_SCREAM;

  00600	c7 05 28 00 00
	00 0a 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+40, 10 ; 0000000aH

; 374  : 	enumSLOT.LARA_CROSSBOW_LASER = SLOT_LARA_CROSSBOW_LASER;

  0060a	c7 05 2c 00 00
	00 0b 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+44, 11 ; 0000000bH

; 375  : 	enumSLOT.LARA_REVOLVER_LASER = SLOT_LARA_REVOLVER_LASER;

  00614	c7 05 30 00 00
	00 0c 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+48, 12 ; 0000000cH

; 376  : 	enumSLOT.LARA_HOLSTERS = SLOT_LARA_HOLSTERS;

  0061e	c7 05 34 00 00
	00 0d 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+52, 13 ; 0000000dH

; 377  : 	enumSLOT.LARA_HOLSTERS_PISTOLS = SLOT_LARA_HOLSTERS_PISTOLS;

  00628	c7 05 38 00 00
	00 0e 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+56, 14 ; 0000000eH

; 378  : 	enumSLOT.LARA_HOLSTERS_UZIS = SLOT_LARA_HOLSTERS_UZIS;

  00632	c7 05 3c 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+60, 15 ; 0000000fH

; 379  : 	enumSLOT.LARA_HOLSTERS_SIXSHOOTER = SLOT_LARA_HOLSTERS_SIXSHOOTER;

  0063c	89 3d 40 00 00
	00		 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+64, edi

; 380  : 	enumSLOT.LARA_SPEECH_HEAD1 = SLOT_LARA_SPEECH_HEAD1;

  00642	c7 05 44 00 00
	00 11 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+68, 17 ; 00000011H

; 381  : 	enumSLOT.LARA_SPEECH_HEAD2 = SLOT_LARA_SPEECH_HEAD2;

  0064c	c7 05 48 00 00
	00 12 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+72, 18 ; 00000012H

; 382  : 	enumSLOT.LARA_SPEECH_HEAD3 = SLOT_LARA_SPEECH_HEAD3;

  00656	c7 05 4c 00 00
	00 13 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+76, 19 ; 00000013H

; 383  : 	enumSLOT.LARA_SPEECH_HEAD4 = SLOT_LARA_SPEECH_HEAD4;

  00660	c7 05 50 00 00
	00 14 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+80, 20 ; 00000014H

; 384  : 	enumSLOT.ACTOR1_SPEECH_HEAD1 = SLOT_ACTOR1_SPEECH_HEAD1;

  0066a	c7 05 54 00 00
	00 15 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+84, 21 ; 00000015H

; 385  : 	enumSLOT.ACTOR1_SPEECH_HEAD2 = SLOT_ACTOR1_SPEECH_HEAD2;

  00674	c7 05 58 00 00
	00 16 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+88, 22 ; 00000016H

; 386  : 	enumSLOT.ACTOR2_SPEECH_HEAD1 = SLOT_ACTOR2_SPEECH_HEAD1;

  0067e	c7 05 5c 00 00
	00 17 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+92, 23 ; 00000017H

; 387  : 	enumSLOT.ACTOR2_SPEECH_HEAD2 = SLOT_ACTOR2_SPEECH_HEAD2;

  00688	c7 05 60 00 00
	00 18 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+96, 24 ; 00000018H

; 388  : 	enumSLOT.LARA_WATER_MESH = SLOT_LARA_WATER_MESH;

  00692	c7 05 64 00 00
	00 19 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+100, 25 ; 00000019H

; 389  : 	enumSLOT.LARA_PETROL_MESH = SLOT_LARA_PETROL_MESH;

  0069c	c7 05 68 00 00
	00 1a 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+104, 26 ; 0000001aH

; 390  : 	enumSLOT.LARA_DIRT_MESH = SLOT_LARA_DIRT_MESH;

  006a6	c7 05 6c 00 00
	00 1b 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+108, 27 ; 0000001bH

; 391  : 	enumSLOT.CROWBAR_ANIM = SLOT_CROWBAR_ANIM;

  006b0	c7 05 70 00 00
	00 1c 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+112, 28 ; 0000001cH

; 392  : 	enumSLOT.TORCH_ANIM = SLOT_TORCH_ANIM;

  006ba	c7 05 74 00 00
	00 1d 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+116, 29 ; 0000001dH

; 393  : 	enumSLOT.HAIR = SLOT_HAIR;

  006c4	c7 05 78 00 00
	00 1e 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+120, 30 ; 0000001eH

; 394  : 	enumSLOT.MOTORBIKE = SLOT_MOTORBIKE;

  006ce	c7 05 7c 00 00
	00 1f 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+124, 31 ; 0000001fH

; 395  : 	enumSLOT.JEEP = SLOT_JEEP;

  006d8	89 1d 80 00 00
	00		 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+128, ebx

; 396  : 	enumSLOT.VEHICLE_EXTRA = SLOT_VEHICLE_EXTRA;

  006de	c7 05 84 00 00
	00 21 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+132, 33 ; 00000021H

; 397  : 	enumSLOT.ENEMY_JEEP = SLOT_ENEMY_JEEP;

  006e8	c7 05 88 00 00
	00 22 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+136, 34 ; 00000022H

; 398  : 	enumSLOT.SKELETON = SLOT_SKELETON;

  006f2	c7 05 8c 00 00
	00 23 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+140, 35 ; 00000023H

; 399  : 	enumSLOT.SKELETON_MIP = SLOT_SKELETON_MIP;

  006fc	c7 05 90 00 00
	00 24 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+144, 36 ; 00000024H

; 400  : 	enumSLOT.GUIDE = SLOT_GUIDE;

  00706	c7 05 94 00 00
	00 25 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+148, 37 ; 00000025H

; 401  : 	enumSLOT.GUIDE_MIP = SLOT_GUIDE_MIP;

  00710	c7 05 98 00 00
	00 26 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+152, 38 ; 00000026H

; 402  : 	enumSLOT.VON_CROY = SLOT_VON_CROY;

  0071a	c7 05 9c 00 00
	00 27 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+156, 39 ; 00000027H

; 403  : 	enumSLOT.VON_CROY_MIP = SLOT_VON_CROY_MIP;

  00724	c7 05 a0 00 00
	00 28 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+160, 40 ; 00000028H

; 404  : 	enumSLOT.BADDY_1 = SLOT_BADDY_1;

  0072e	c7 05 a4 00 00
	00 29 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+164, 41 ; 00000029H

; 405  : 	enumSLOT.BADDY_1_MIP = SLOT_BADDY_1_MIP;

  00738	c7 05 a8 00 00
	00 2a 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+168, 42 ; 0000002aH

; 406  : 	enumSLOT.BADDY_2 = SLOT_BADDY_2;

  00742	c7 05 ac 00 00
	00 2b 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+172, 43 ; 0000002bH

; 407  : 	enumSLOT.BADDY_2_MIP = SLOT_BADDY_2_MIP;

  0074c	c7 05 b0 00 00
	00 2c 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+176, 44 ; 0000002cH

; 408  : 	enumSLOT.SETHA = SLOT_SETHA;

  00756	c7 05 b4 00 00
	00 2d 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+180, 45 ; 0000002dH

; 409  : 	enumSLOT.SETHA_MIP = SLOT_SETHA_MIP;

  00760	c7 05 b8 00 00
	00 2e 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+184, 46 ; 0000002eH

; 410  : 	enumSLOT.MUMMY = SLOT_MUMMY;

  0076a	c7 05 bc 00 00
	00 2f 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+188, 47 ; 0000002fH

; 411  : 	enumSLOT.MUMMY_MIP = SLOT_MUMMY_MIP;

  00774	c7 05 c0 00 00
	00 30 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+192, 48 ; 00000030H

; 412  : 	enumSLOT.SPHINX = SLOT_SPHINX;

  0077e	c7 05 c4 00 00
	00 31 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+196, 49 ; 00000031H

; 413  : 	enumSLOT.SPHINX_MIP = SLOT_SPHINX_MIP;

  00788	c7 05 c8 00 00
	00 32 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+200, 50 ; 00000032H

; 414  : 	enumSLOT.CROCODILE = SLOT_CROCODILE;

  00792	c7 05 cc 00 00
	00 33 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+204, 51 ; 00000033H

; 415  : 	enumSLOT.CROCODILE_MIP = SLOT_CROCODILE_MIP;

  0079c	c7 05 d0 00 00
	00 34 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+208, 52 ; 00000034H

; 416  : 	enumSLOT.HORSEMAN = SLOT_HORSEMAN;

  007a6	c7 05 d4 00 00
	00 35 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+212, 53 ; 00000035H

; 417  : 	enumSLOT.HORSEMAN_MIP = SLOT_HORSEMAN_MIP;

  007b0	c7 05 d8 00 00
	00 36 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+216, 54 ; 00000036H

; 418  : 	enumSLOT.SCORPION = SLOT_SCORPION;

  007ba	c7 05 dc 00 00
	00 37 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+220, 55 ; 00000037H

; 419  : 	enumSLOT.SCORPION_MIP = SLOT_SCORPION_MIP;

  007c4	c7 05 e0 00 00
	00 38 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+224, 56 ; 00000038H

; 420  : 	enumSLOT.JEAN_YVES = SLOT_JEAN_YVES;

  007ce	c7 05 e4 00 00
	00 39 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+228, 57 ; 00000039H

; 421  : 	enumSLOT.JEAN_YVES_MIP = SLOT_JEAN_YVES_MIP;

  007d8	c7 05 e8 00 00
	00 3a 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+232, 58 ; 0000003aH

; 422  : 	enumSLOT.TROOPS = SLOT_TROOPS;

  007e2	c7 05 ec 00 00
	00 3b 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+236, 59 ; 0000003bH

; 423  : 	enumSLOT.TROOPS_MIP = SLOT_TROOPS_MIP;

  007ec	c7 05 f0 00 00
	00 3c 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+240, 60 ; 0000003cH

; 424  : 	enumSLOT.KNIGHTS_TEMPLAR = SLOT_KNIGHTS_TEMPLAR;

  007f6	c7 05 f4 00 00
	00 3d 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+244, 61 ; 0000003dH

; 425  : 	enumSLOT.KNIGHTS_TEMPLAR_MIP = SLOT_KNIGHTS_TEMPLAR_MIP;

  00800	c7 05 f8 00 00
	00 3e 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+248, 62 ; 0000003eH

; 426  : 	enumSLOT.MUTANT = SLOT_MUTANT;

  0080a	c7 05 fc 00 00
	00 3f 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+252, 63 ; 0000003fH

; 427  : 	enumSLOT.MUTANT_MIP = SLOT_MUTANT_MIP;

  00814	c7 05 00 01 00
	00 40 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+256, 64 ; 00000040H

; 428  : 	enumSLOT.HORSE = SLOT_HORSE;

  0081e	c7 05 04 01 00
	00 41 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+260, 65 ; 00000041H

; 429  : 	enumSLOT.HORSE_MIP = SLOT_HORSE_MIP;

  00828	c7 05 08 01 00
	00 42 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+264, 66 ; 00000042H

; 430  : 	enumSLOT.BABOON_NORMAL = SLOT_BABOON_NORMAL;

  00832	c7 05 0c 01 00
	00 43 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+268, 67 ; 00000043H

; 431  : 	enumSLOT.BABOON_NORMAL_MIP = SLOT_BABOON_NORMAL_MIP;

  0083c	c7 05 10 01 00
	00 44 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+272, 68 ; 00000044H

; 432  : 	enumSLOT.BABOON_INV = SLOT_BABOON_INV;

  00846	c7 05 14 01 00
	00 45 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+276, 69 ; 00000045H

; 433  : 	enumSLOT.BABOON_INV_MIP = SLOT_BABOON_INV_MIP;

  00850	c7 05 18 01 00
	00 46 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+280, 70 ; 00000046H

; 434  : 	enumSLOT.BABOON_SILENT = SLOT_BABOON_SILENT;

  0085a	c7 05 1c 01 00
	00 47 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+284, 71 ; 00000047H

; 435  : 	enumSLOT.BABOON_SILENT_MIP = SLOT_BABOON_SILENT_MIP;

  00864	c7 05 20 01 00
	00 48 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+288, 72 ; 00000048H

; 436  : 	enumSLOT.WILD_BOAR = SLOT_WILD_BOAR;

  0086e	c7 05 24 01 00
	00 49 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+292, 73 ; 00000049H

; 437  : 	enumSLOT.WILD_BOAR_MIP = SLOT_WILD_BOAR_MIP;

  00878	c7 05 28 01 00
	00 4a 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+296, 74 ; 0000004aH

; 438  : 	enumSLOT.HARPY = SLOT_HARPY;

  00882	c7 05 2c 01 00
	00 4b 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+300, 75 ; 0000004bH

; 439  : 	enumSLOT.HARPY_MIP = SLOT_HARPY_MIP;

  0088c	c7 05 30 01 00
	00 4c 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+304, 76 ; 0000004cH

; 440  : 	enumSLOT.DEMIGOD1 = SLOT_DEMIGOD1;

  00896	c7 05 34 01 00
	00 4d 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+308, 77 ; 0000004dH

; 441  : 	enumSLOT.DEMIGOD1_MIP = SLOT_DEMIGOD1_MIP;

  008a0	c7 05 38 01 00
	00 4e 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+312, 78 ; 0000004eH

; 442  : 	enumSLOT.DEMIGOD2 = SLOT_DEMIGOD2;

  008aa	c7 05 3c 01 00
	00 4f 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+316, 79 ; 0000004fH

; 443  : 	enumSLOT.DEMIGOD2_MIP = SLOT_DEMIGOD2_MIP;

  008b4	c7 05 40 01 00
	00 50 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+320, 80 ; 00000050H

; 444  : 	enumSLOT.DEMIGOD3 = SLOT_DEMIGOD3;

  008be	c7 05 44 01 00
	00 51 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+324, 81 ; 00000051H

; 445  : 	enumSLOT.DEMIGOD3_MIP = SLOT_DEMIGOD3_MIP;

  008c8	c7 05 48 01 00
	00 52 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+328, 82 ; 00000052H

; 446  : 	enumSLOT.LITTLE_BEETLE = SLOT_LITTLE_BEETLE;

  008d2	c7 05 4c 01 00
	00 53 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+332, 83 ; 00000053H

; 447  : 	enumSLOT.BIG_BEETLE = SLOT_BIG_BEETLE;

  008dc	c7 05 50 01 00
	00 54 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+336, 84 ; 00000054H

; 448  : 	enumSLOT.BIG_BEETLE_MIP = SLOT_BIG_BEETLE_MIP;

  008e6	c7 05 54 01 00
	00 55 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+340, 85 ; 00000055H

; 449  : 	enumSLOT.WRAITH1 = SLOT_WRAITH1;

  008f0	c7 05 58 01 00
	00 56 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+344, 86 ; 00000056H

; 450  : 	enumSLOT.WRAITH2 = SLOT_WRAITH2;

  008fa	c7 05 5c 01 00
	00 57 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+348, 87 ; 00000057H

; 451  : 	enumSLOT.WRAITH3 = SLOT_WRAITH3;

  00904	c7 05 60 01 00
	00 58 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+352, 88 ; 00000058H

; 452  : 	enumSLOT.WRAITH4 = SLOT_WRAITH4;

  0090e	c7 05 64 01 00
	00 59 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+356, 89 ; 00000059H

; 453  : 	enumSLOT.BAT = SLOT_BAT;

  00918	c7 05 68 01 00
	00 5a 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+360, 90 ; 0000005aH

; 454  : 	enumSLOT.DOG = SLOT_DOG;

  00922	c7 05 6c 01 00
	00 5b 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+364, 91 ; 0000005bH

; 455  : 	enumSLOT.DOG_MIP = SLOT_DOG_MIP;

  0092c	c7 05 70 01 00
	00 5c 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+368, 92 ; 0000005cH

; 456  : 	enumSLOT.HAMMERHEAD = SLOT_HAMMERHEAD;

  00936	c7 05 74 01 00
	00 5d 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+372, 93 ; 0000005dH

; 457  : 	enumSLOT.HAMMERHEAD_MIP = SLOT_HAMMERHEAD_MIP;

  00940	c7 05 78 01 00
	00 5e 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+376, 94 ; 0000005eH

; 458  : 	enumSLOT.SAS = SLOT_SAS;

  0094a	c7 05 7c 01 00
	00 5f 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+380, 95 ; 0000005fH

; 459  : 	enumSLOT.SAS_MIP = SLOT_SAS_MIP;

  00954	c7 05 80 01 00
	00 60 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+384, 96 ; 00000060H

; 460  : 	enumSLOT.SAS_DYING = SLOT_SAS_DYING;

  0095e	c7 05 84 01 00
	00 61 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+388, 97 ; 00000061H

; 461  : 	enumSLOT.SAS_DYING_MIP = SLOT_SAS_DYING_MIP;

  00968	c7 05 88 01 00
	00 62 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+392, 98 ; 00000062H

; 462  : 	enumSLOT.SAS_CAPTAIN = SLOT_SAS_CAPTAIN;

  00972	c7 05 8c 01 00
	00 63 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+396, 99 ; 00000063H

; 463  : 	enumSLOT.SAS_CAPTAIN_MIP = SLOT_SAS_CAPTAIN_MIP;

  0097c	c7 05 90 01 00
	00 64 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+400, 100 ; 00000064H

; 464  : 	enumSLOT.SAS_DRAG_BLOKE = SLOT_SAS_DRAG_BLOKE;

  00986	c7 05 94 01 00
	00 65 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+404, 101 ; 00000065H

; 465  : 	enumSLOT.AHMET = SLOT_AHMET;

  00990	c7 05 98 01 00
	00 66 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+408, 102 ; 00000066H

; 466  : 	enumSLOT.AHMET_MIP = SLOT_AHMET_MIP;

  0099a	c7 05 9c 01 00
	00 67 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+412, 103 ; 00000067H

; 467  : 	enumSLOT.LARA_DOUBLE = SLOT_LARA_DOUBLE;

  009a4	c7 05 a0 01 00
	00 68 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+416, 104 ; 00000068H

; 468  : 	enumSLOT.LARA_DOUBLE_MIP = SLOT_LARA_DOUBLE_MIP;

  009ae	c7 05 a4 01 00
	00 69 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+420, 105 ; 00000069H

; 469  : 	enumSLOT.SMALL_SCORPION = SLOT_SMALL_SCORPION;

  009b8	c7 05 a8 01 00
	00 6a 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+424, 106 ; 0000006aH

; 470  : 	enumSLOT.LOCUST_EMITTER = SLOT_LOCUST_EMITTER;

  009c2	c7 05 ac 01 00
	00 6b 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+428, 107 ; 0000006bH

; 471  : 	enumSLOT.GAME_PIECE1 = SLOT_GAME_PIECE1;

  009cc	c7 05 b0 01 00
	00 6c 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+432, 108 ; 0000006cH

; 472  : 	enumSLOT.GAME_PIECE2 = SLOT_GAME_PIECE2;

  009d6	c7 05 b4 01 00
	00 6d 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+436, 109 ; 0000006dH

; 473  : 	enumSLOT.GAME_PIECE3 = SLOT_GAME_PIECE3;

  009e0	c7 05 b8 01 00
	00 6e 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+440, 110 ; 0000006eH

; 474  : 	enumSLOT.ENEMY_PIECE = SLOT_ENEMY_PIECE;

  009ea	c7 05 bc 01 00
	00 6f 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+444, 111 ; 0000006fH

; 475  : 	enumSLOT.WHEEL_OF_FORTUNE = SLOT_WHEEL_OF_FORTUNE;

  009f4	c7 05 c0 01 00
	00 70 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+448, 112 ; 00000070H

; 476  : 	enumSLOT.SCALES = SLOT_SCALES;

  009fe	c7 05 c4 01 00
	00 71 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+452, 113 ; 00000071H

; 477  : 	enumSLOT.DARTS = SLOT_DARTS;

  00a08	c7 05 c8 01 00
	00 72 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+456, 114 ; 00000072H

; 478  : 	enumSLOT.DART_EMITTER = SLOT_DART_EMITTER;

  00a12	c7 05 cc 01 00
	00 73 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+460, 115 ; 00000073H

; 479  : 	enumSLOT.HOMING_DART_EMITTER = SLOT_HOMING_DART_EMITTER;

  00a1c	c7 05 d0 01 00
	00 74 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+464, 116 ; 00000074H

; 480  : 	enumSLOT.FALLING_CEILING = SLOT_FALLING_CEILING;

  00a26	c7 05 d4 01 00
	00 75 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+468, 117 ; 00000075H

; 481  : 	enumSLOT.FALLING_BLOCK = SLOT_FALLING_BLOCK;

  00a30	c7 05 d8 01 00
	00 76 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+472, 118 ; 00000076H

; 482  : 	enumSLOT.FALLING_BLOCK2 = SLOT_FALLING_BLOCK2;

  00a3a	c7 05 dc 01 00
	00 77 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+476, 119 ; 00000077H

; 483  : 	enumSLOT.SMASHABLE_BIKE_WALL = SLOT_SMASHABLE_BIKE_WALL;

  00a44	c7 05 e0 01 00
	00 78 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+480, 120 ; 00000078H

; 484  : 	enumSLOT.SMASHABLE_BIKE_FLOOR = SLOT_SMASHABLE_BIKE_FLOOR;

  00a4e	c7 05 e4 01 00
	00 79 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+484, 121 ; 00000079H

; 485  : 	enumSLOT.TRAPDOOR1 = SLOT_TRAPDOOR1;

  00a58	c7 05 e8 01 00
	00 7a 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+488, 122 ; 0000007aH

; 486  : 	enumSLOT.TRAPDOOR2 = SLOT_TRAPDOOR2;

  00a62	c7 05 ec 01 00
	00 7b 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+492, 123 ; 0000007bH

; 487  : 	enumSLOT.TRAPDOOR3 = SLOT_TRAPDOOR3;

  00a6c	c7 05 f0 01 00
	00 7c 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+496, 124 ; 0000007cH

; 488  : 	enumSLOT.FLOOR_TRAPDOOR1 = SLOT_FLOOR_TRAPDOOR1;

  00a76	c7 05 f4 01 00
	00 7d 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+500, 125 ; 0000007dH

; 489  : 	enumSLOT.FLOOR_TRAPDOOR2 = SLOT_FLOOR_TRAPDOOR2;

  00a80	c7 05 f8 01 00
	00 7e 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+504, 126 ; 0000007eH

; 490  : 	enumSLOT.CEILING_TRAPDOOR1 = SLOT_CEILING_TRAPDOOR1;

  00a8a	c7 05 fc 01 00
	00 7f 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+508, 127 ; 0000007fH

; 491  : 	enumSLOT.CEILING_TRAPDOOR2 = SLOT_CEILING_TRAPDOOR2;

  00a94	c7 05 00 02 00
	00 80 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+512, 128 ; 00000080H

; 492  : 	enumSLOT.SCALING_TRAPDOOR = SLOT_SCALING_TRAPDOOR;

  00a9e	c7 05 04 02 00
	00 81 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+516, 129 ; 00000081H

; 493  : 	enumSLOT.ROLLINGBALL = SLOT_ROLLINGBALL;

  00aa8	c7 05 08 02 00
	00 82 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+520, 130 ; 00000082H

; 494  : 	enumSLOT.SPIKEY_FLOOR = SLOT_SPIKEY_FLOOR;

  00ab2	c7 05 0c 02 00
	00 83 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+524, 131 ; 00000083H

; 495  : 	enumSLOT.TEETH_SPIKES = SLOT_TEETH_SPIKES;

  00abc	c7 05 10 02 00
	00 84 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+528, 132 ; 00000084H

; 496  : 	enumSLOT.JOBY_SPIKES = SLOT_JOBY_SPIKES;

  00ac6	c7 05 14 02 00
	00 85 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+532, 133 ; 00000085H

; 497  : 	enumSLOT.SLICER_DICER = SLOT_SLICER_DICER;

  00ad0	c7 05 18 02 00
	00 86 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+536, 134 ; 00000086H

; 498  : 	enumSLOT.CHAIN = SLOT_CHAIN;

  00ada	c7 05 1c 02 00
	00 87 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+540, 135 ; 00000087H

; 499  : 	enumSLOT.PLOUGH = SLOT_PLOUGH;

  00ae4	c7 05 20 02 00
	00 88 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+544, 136 ; 00000088H

; 500  : 	enumSLOT.STARGATE = SLOT_STARGATE;

  00aee	c7 05 24 02 00
	00 89 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+548, 137 ; 00000089H

; 501  : 	enumSLOT.HAMMER = SLOT_HAMMER;

  00af8	c7 05 28 02 00
	00 8a 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+552, 138 ; 0000008aH

; 502  : 	enumSLOT.BURNING_FLOOR = SLOT_BURNING_FLOOR;

  00b02	c7 05 2c 02 00
	00 8b 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+556, 139 ; 0000008bH

; 503  : 	enumSLOT.COG = SLOT_COG;

  00b0c	c7 05 30 02 00
	00 8c 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+560, 140 ; 0000008cH

; 504  : 	enumSLOT.SPIKEBALL = SLOT_SPIKEBALL;

  00b16	c7 05 34 02 00
	00 8d 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+564, 141 ; 0000008dH

; 505  : 	enumSLOT.FLAME = SLOT_FLAME;

  00b20	c7 05 38 02 00
	00 8e 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+568, 142 ; 0000008eH

; 506  : 	enumSLOT.FLAME_EMITTER = SLOT_FLAME_EMITTER;

  00b2a	c7 05 3c 02 00
	00 8f 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+572, 143 ; 0000008fH

; 507  : 	enumSLOT.FLAME_EMITTER2 = SLOT_FLAME_EMITTER2;

  00b34	c7 05 40 02 00
	00 90 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+576, 144 ; 00000090H

; 508  : 	enumSLOT.FLAME_EMITTER3 = SLOT_FLAME_EMITTER3;

  00b3e	c7 05 44 02 00
	00 91 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+580, 145 ; 00000091H

; 509  : 	enumSLOT.ROPE = SLOT_ROPE;

  00b48	c7 05 48 02 00
	00 92 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+584, 146 ; 00000092H

; 510  : 	enumSLOT.FIREROPE = SLOT_FIREROPE;

  00b52	c7 05 4c 02 00
	00 93 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+588, 147 ; 00000093H

; 511  : 	enumSLOT.POLEROPE = SLOT_POLEROPE;

  00b5c	c7 05 50 02 00
	00 94 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+592, 148 ; 00000094H

; 512  : 	enumSLOT.ONEBLOCK_PLATFORM = SLOT_ONEBLOCK_PLATFORM;

  00b66	c7 05 54 02 00
	00 95 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+596, 149 ; 00000095H

; 513  : 	enumSLOT.TWOBLOCK_PLATFORM = SLOT_TWOBLOCK_PLATFORM;

  00b70	c7 05 58 02 00
	00 96 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+600, 150 ; 00000096H

; 514  : 	enumSLOT.RAISING_BLOCK1 = SLOT_RAISING_BLOCK1;

  00b7a	c7 05 5c 02 00
	00 97 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+604, 151 ; 00000097H

; 515  : 	enumSLOT.RAISING_BLOCK2 = SLOT_RAISING_BLOCK2;

  00b84	c7 05 60 02 00
	00 98 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+608, 152 ; 00000098H

; 516  : 	enumSLOT.EXPANDING_PLATFORM = SLOT_EXPANDING_PLATFORM;

  00b8e	c7 05 64 02 00
	00 99 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+612, 153 ; 00000099H

; 517  : 	enumSLOT.SQUISHY_BLOCK1 = SLOT_SQUISHY_BLOCK1;

  00b98	c7 05 68 02 00
	00 9a 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+616, 154 ; 0000009aH

; 518  : 	enumSLOT.SQUISHY_BLOCK2 = SLOT_SQUISHY_BLOCK2;

  00ba2	c7 05 6c 02 00
	00 9b 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+620, 155 ; 0000009bH

; 519  : 	enumSLOT.PUSHABLE_OBJECT1 = SLOT_PUSHABLE_OBJECT1;

  00bac	c7 05 70 02 00
	00 9c 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+624, 156 ; 0000009cH

; 520  : 	enumSLOT.PUSHABLE_OBJECT2 = SLOT_PUSHABLE_OBJECT2;

  00bb6	c7 05 74 02 00
	00 9d 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+628, 157 ; 0000009dH

; 521  : 	enumSLOT.PUSHABLE_OBJECT3 = SLOT_PUSHABLE_OBJECT3;

  00bc0	c7 05 78 02 00
	00 9e 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+632, 158 ; 0000009eH

; 522  : 	enumSLOT.PUSHABLE_OBJECT4 = SLOT_PUSHABLE_OBJECT4;

  00bca	c7 05 7c 02 00
	00 9f 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+636, 159 ; 0000009fH

; 523  : 	enumSLOT.PUSHABLE_OBJECT5 = SLOT_PUSHABLE_OBJECT5;

  00bd4	c7 05 80 02 00
	00 a0 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+640, 160 ; 000000a0H

; 524  : 	enumSLOT.TRIPWIRE = SLOT_TRIPWIRE;

  00bde	c7 05 84 02 00
	00 a1 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+644, 161 ; 000000a1H

; 525  : 	enumSLOT.SENTRY_GUN = SLOT_SENTRY_GUN;

  00be8	c7 05 88 02 00
	00 a2 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+648, 162 ; 000000a2H

; 526  : 	enumSLOT.MINE = SLOT_MINE;

  00bf2	c7 05 8c 02 00
	00 a3 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+652, 163 ; 000000a3H

; 527  : 	enumSLOT.MAPPER = SLOT_MAPPER;

  00bfc	c7 05 90 02 00
	00 a4 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+656, 164 ; 000000a4H

; 528  : 	enumSLOT.OBELISK = SLOT_OBELISK;

  00c06	c7 05 94 02 00
	00 a5 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+660, 165 ; 000000a5H

; 529  : 	enumSLOT.FLOOR_4BLADE = SLOT_FLOOR_4BLADE;

  00c10	c7 05 98 02 00
	00 a6 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+664, 166 ; 000000a6H

; 530  : 	enumSLOT.ROOF_4BLADE = SLOT_ROOF_4BLADE;

  00c1a	c7 05 9c 02 00
	00 a7 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+668, 167 ; 000000a7H

; 531  : 	enumSLOT.BIRD_BLADE = SLOT_BIRD_BLADE;

  00c24	c7 05 a0 02 00
	00 a8 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+672, 168 ; 000000a8H

; 532  : 	enumSLOT.CATWALK_BLADE = SLOT_CATWALK_BLADE;

  00c2e	c7 05 a4 02 00
	00 a9 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+676, 169 ; 000000a9H

; 533  : 	enumSLOT.MOVING_BLADE = SLOT_MOVING_BLADE;

  00c38	c7 05 a8 02 00
	00 aa 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+680, 170 ; 000000aaH

; 534  : 	enumSLOT.PLINTH_BLADE = SLOT_PLINTH_BLADE;

  00c42	c7 05 ac 02 00
	00 ab 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+684, 171 ; 000000abH

; 535  : 	enumSLOT.SETH_BLADE = SLOT_SETH_BLADE;

  00c4c	c7 05 b0 02 00
	00 ac 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+688, 172 ; 000000acH

; 536  : 	enumSLOT.LIGHTNING_CONDUCTOR = SLOT_LIGHTNING_CONDUCTOR;

  00c56	c7 05 b4 02 00
	00 ad 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+692, 173 ; 000000adH

; 537  : 	enumSLOT.ELEMENT_PUZZLE = SLOT_ELEMENT_PUZZLE;

  00c60	c7 05 b8 02 00
	00 ae 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+696, 174 ; 000000aeH

; 538  : 	enumSLOT.PUZZLE_ITEM1 = SLOT_PUZZLE_ITEM1;

  00c6a	c7 05 bc 02 00
	00 af 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+700, 175 ; 000000afH

; 539  : 	enumSLOT.PUZZLE_ITEM2 = SLOT_PUZZLE_ITEM2;

  00c74	c7 05 c0 02 00
	00 b0 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+704, 176 ; 000000b0H

; 540  : 	enumSLOT.PUZZLE_ITEM3 = SLOT_PUZZLE_ITEM3;

  00c7e	c7 05 c4 02 00
	00 b1 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+708, 177 ; 000000b1H

; 541  : 	enumSLOT.PUZZLE_ITEM4 = SLOT_PUZZLE_ITEM4;

  00c88	c7 05 c8 02 00
	00 b2 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+712, 178 ; 000000b2H

; 542  : 	enumSLOT.PUZZLE_ITEM5 = SLOT_PUZZLE_ITEM5;

  00c92	c7 05 cc 02 00
	00 b3 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+716, 179 ; 000000b3H

; 543  : 	enumSLOT.PUZZLE_ITEM6 = SLOT_PUZZLE_ITEM6;

  00c9c	c7 05 d0 02 00
	00 b4 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+720, 180 ; 000000b4H

; 544  : 	enumSLOT.PUZZLE_ITEM7 = SLOT_PUZZLE_ITEM7;

  00ca6	c7 05 d4 02 00
	00 b5 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+724, 181 ; 000000b5H

; 545  : 	enumSLOT.PUZZLE_ITEM8 = SLOT_PUZZLE_ITEM8;

  00cb0	c7 05 d8 02 00
	00 b6 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+728, 182 ; 000000b6H

; 546  : 	enumSLOT.PUZZLE_ITEM9 = SLOT_PUZZLE_ITEM9;

  00cba	c7 05 dc 02 00
	00 b7 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+732, 183 ; 000000b7H

; 547  : 	enumSLOT.PUZZLE_ITEM10 = SLOT_PUZZLE_ITEM10;

  00cc4	c7 05 e0 02 00
	00 b8 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+736, 184 ; 000000b8H

; 548  : 	enumSLOT.PUZZLE_ITEM11 = SLOT_PUZZLE_ITEM11;

  00cce	c7 05 e4 02 00
	00 b9 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+740, 185 ; 000000b9H

; 549  : 	enumSLOT.PUZZLE_ITEM12 = SLOT_PUZZLE_ITEM12;

  00cd8	c7 05 e8 02 00
	00 ba 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+744, 186 ; 000000baH

; 550  : 	enumSLOT.PUZZLE_ITEM1_COMBO1 = SLOT_PUZZLE_ITEM1_COMBO1;

  00ce2	c7 05 ec 02 00
	00 bb 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+748, 187 ; 000000bbH

; 551  : 	enumSLOT.PUZZLE_ITEM1_COMBO2 = SLOT_PUZZLE_ITEM1_COMBO2;

  00cec	c7 05 f0 02 00
	00 bc 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+752, 188 ; 000000bcH

; 552  : 	enumSLOT.PUZZLE_ITEM2_COMBO1 = SLOT_PUZZLE_ITEM2_COMBO1;

  00cf6	c7 05 f4 02 00
	00 bd 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+756, 189 ; 000000bdH

; 553  : 	enumSLOT.PUZZLE_ITEM2_COMBO2 = SLOT_PUZZLE_ITEM2_COMBO2;

  00d00	c7 05 f8 02 00
	00 be 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+760, 190 ; 000000beH

; 554  : 	enumSLOT.PUZZLE_ITEM3_COMBO1 = SLOT_PUZZLE_ITEM3_COMBO1;

  00d0a	c7 05 fc 02 00
	00 bf 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+764, 191 ; 000000bfH

; 555  : 	enumSLOT.PUZZLE_ITEM3_COMBO2 = SLOT_PUZZLE_ITEM3_COMBO2;

  00d14	c7 05 00 03 00
	00 c0 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+768, 192 ; 000000c0H

; 556  : 	enumSLOT.PUZZLE_ITEM4_COMBO1 = SLOT_PUZZLE_ITEM4_COMBO1;

  00d1e	c7 05 04 03 00
	00 c1 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+772, 193 ; 000000c1H

; 557  : 	enumSLOT.PUZZLE_ITEM4_COMBO2 = SLOT_PUZZLE_ITEM4_COMBO2;

  00d28	c7 05 08 03 00
	00 c2 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+776, 194 ; 000000c2H

; 558  : 	enumSLOT.PUZZLE_ITEM5_COMBO1 = SLOT_PUZZLE_ITEM5_COMBO1;

  00d32	c7 05 0c 03 00
	00 c3 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+780, 195 ; 000000c3H

; 559  : 	enumSLOT.PUZZLE_ITEM5_COMBO2 = SLOT_PUZZLE_ITEM5_COMBO2;

  00d3c	c7 05 10 03 00
	00 c4 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+784, 196 ; 000000c4H

; 560  : 	enumSLOT.PUZZLE_ITEM6_COMBO1 = SLOT_PUZZLE_ITEM6_COMBO1;

  00d46	c7 05 14 03 00
	00 c5 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+788, 197 ; 000000c5H

; 561  : 	enumSLOT.PUZZLE_ITEM6_COMBO2 = SLOT_PUZZLE_ITEM6_COMBO2;

  00d50	c7 05 18 03 00
	00 c6 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+792, 198 ; 000000c6H

; 562  : 	enumSLOT.PUZZLE_ITEM7_COMBO1 = SLOT_PUZZLE_ITEM7_COMBO1;

  00d5a	c7 05 1c 03 00
	00 c7 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+796, 199 ; 000000c7H

; 563  : 	enumSLOT.PUZZLE_ITEM7_COMBO2 = SLOT_PUZZLE_ITEM7_COMBO2;

  00d64	c7 05 20 03 00
	00 c8 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+800, 200 ; 000000c8H

; 564  : 	enumSLOT.PUZZLE_ITEM8_COMBO1 = SLOT_PUZZLE_ITEM8_COMBO1;

  00d6e	c7 05 24 03 00
	00 c9 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+804, 201 ; 000000c9H

; 565  : 	enumSLOT.PUZZLE_ITEM8_COMBO2 = SLOT_PUZZLE_ITEM8_COMBO2;

  00d78	c7 05 28 03 00
	00 ca 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+808, 202 ; 000000caH

; 566  : 	enumSLOT.KEY_ITEM1 = SLOT_KEY_ITEM1;

  00d82	c7 05 2c 03 00
	00 cb 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+812, 203 ; 000000cbH

; 567  : 	enumSLOT.KEY_ITEM2 = SLOT_KEY_ITEM2;

  00d8c	c7 05 30 03 00
	00 cc 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+816, 204 ; 000000ccH

; 568  : 	enumSLOT.KEY_ITEM3 = SLOT_KEY_ITEM3;

  00d96	c7 05 34 03 00
	00 cd 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+820, 205 ; 000000cdH

; 569  : 	enumSLOT.KEY_ITEM4 = SLOT_KEY_ITEM4;

  00da0	c7 05 38 03 00
	00 ce 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+824, 206 ; 000000ceH

; 570  : 	enumSLOT.KEY_ITEM5 = SLOT_KEY_ITEM5;

  00daa	c7 05 3c 03 00
	00 cf 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+828, 207 ; 000000cfH

; 571  : 	enumSLOT.KEY_ITEM6 = SLOT_KEY_ITEM6;

  00db4	c7 05 40 03 00
	00 d0 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+832, 208 ; 000000d0H

; 572  : 	enumSLOT.KEY_ITEM7 = SLOT_KEY_ITEM7;

  00dbe	c7 05 44 03 00
	00 d1 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+836, 209 ; 000000d1H

; 573  : 	enumSLOT.KEY_ITEM8 = SLOT_KEY_ITEM8;

  00dc8	c7 05 48 03 00
	00 d2 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+840, 210 ; 000000d2H

; 574  : 	enumSLOT.KEY_ITEM9 = SLOT_KEY_ITEM9;

  00dd2	c7 05 4c 03 00
	00 d3 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+844, 211 ; 000000d3H

; 575  : 	enumSLOT.KEY_ITEM10 = SLOT_KEY_ITEM10;

  00ddc	c7 05 50 03 00
	00 d4 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+848, 212 ; 000000d4H

; 576  : 	enumSLOT.KEY_ITEM11 = SLOT_KEY_ITEM11;

  00de6	c7 05 54 03 00
	00 d5 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+852, 213 ; 000000d5H

; 577  : 	enumSLOT.KEY_ITEM12 = SLOT_KEY_ITEM12;

  00df0	c7 05 58 03 00
	00 d6 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+856, 214 ; 000000d6H

; 578  : 	enumSLOT.KEY_ITEM1_COMBO1 = SLOT_KEY_ITEM1_COMBO1;

  00dfa	c7 05 5c 03 00
	00 d7 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+860, 215 ; 000000d7H

; 579  : 	enumSLOT.KEY_ITEM1_COMBO2 = SLOT_KEY_ITEM1_COMBO2;

  00e04	c7 05 60 03 00
	00 d8 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+864, 216 ; 000000d8H

; 580  : 	enumSLOT.KEY_ITEM2_COMBO1 = SLOT_KEY_ITEM2_COMBO1;

  00e0e	c7 05 64 03 00
	00 d9 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+868, 217 ; 000000d9H

; 581  : 	enumSLOT.KEY_ITEM2_COMBO2 = SLOT_KEY_ITEM2_COMBO2;

  00e18	c7 05 68 03 00
	00 da 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+872, 218 ; 000000daH

; 582  : 	enumSLOT.KEY_ITEM3_COMBO1 = SLOT_KEY_ITEM3_COMBO1;

  00e22	c7 05 6c 03 00
	00 db 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+876, 219 ; 000000dbH

; 583  : 	enumSLOT.KEY_ITEM3_COMBO2 = SLOT_KEY_ITEM3_COMBO2;

  00e2c	c7 05 70 03 00
	00 dc 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+880, 220 ; 000000dcH

; 584  : 	enumSLOT.KEY_ITEM4_COMBO1 = SLOT_KEY_ITEM4_COMBO1;

  00e36	c7 05 74 03 00
	00 dd 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+884, 221 ; 000000ddH

; 585  : 	enumSLOT.KEY_ITEM4_COMBO2 = SLOT_KEY_ITEM4_COMBO2;

  00e40	c7 05 78 03 00
	00 de 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+888, 222 ; 000000deH

; 586  : 	enumSLOT.KEY_ITEM5_COMBO1 = SLOT_KEY_ITEM5_COMBO1;

  00e4a	c7 05 7c 03 00
	00 df 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+892, 223 ; 000000dfH

; 587  : 	enumSLOT.KEY_ITEM5_COMBO2 = SLOT_KEY_ITEM5_COMBO2;

  00e54	c7 05 80 03 00
	00 e0 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+896, 224 ; 000000e0H

; 588  : 	enumSLOT.KEY_ITEM6_COMBO1 = SLOT_KEY_ITEM6_COMBO1;

  00e5e	c7 05 84 03 00
	00 e1 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+900, 225 ; 000000e1H

; 589  : 	enumSLOT.KEY_ITEM6_COMBO2 = SLOT_KEY_ITEM6_COMBO2;

  00e68	c7 05 88 03 00
	00 e2 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+904, 226 ; 000000e2H

; 590  : 	enumSLOT.KEY_ITEM7_COMBO1 = SLOT_KEY_ITEM7_COMBO1;

  00e72	c7 05 8c 03 00
	00 e3 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+908, 227 ; 000000e3H

; 591  : 	enumSLOT.KEY_ITEM7_COMBO2 = SLOT_KEY_ITEM7_COMBO2;

  00e7c	c7 05 90 03 00
	00 e4 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+912, 228 ; 000000e4H

; 592  : 	enumSLOT.KEY_ITEM8_COMBO1 = SLOT_KEY_ITEM8_COMBO1;

  00e86	c7 05 94 03 00
	00 e5 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+916, 229 ; 000000e5H

; 593  : 	enumSLOT.KEY_ITEM8_COMBO2 = SLOT_KEY_ITEM8_COMBO2;

  00e90	c7 05 98 03 00
	00 e6 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+920, 230 ; 000000e6H

; 594  : 	enumSLOT.PICKUP_ITEM1 = SLOT_PICKUP_ITEM1;

  00e9a	c7 05 9c 03 00
	00 e7 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+924, 231 ; 000000e7H

; 595  : 	enumSLOT.PICKUP_ITEM2 = SLOT_PICKUP_ITEM2;

  00ea4	c7 05 a0 03 00
	00 e8 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+928, 232 ; 000000e8H

; 596  : 	enumSLOT.PICKUP_ITEM3 = SLOT_PICKUP_ITEM3;

  00eae	c7 05 a4 03 00
	00 e9 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+932, 233 ; 000000e9H

; 597  : 	enumSLOT.PICKUP_ITEM4 = SLOT_PICKUP_ITEM4;

  00eb8	c7 05 a8 03 00
	00 ea 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+936, 234 ; 000000eaH

; 598  : 	enumSLOT.PICKUP_ITEM1_COMBO1 = SLOT_PICKUP_ITEM1_COMBO1;

  00ec2	c7 05 ac 03 00
	00 eb 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+940, 235 ; 000000ebH

; 599  : 	enumSLOT.PICKUP_ITEM1_COMBO2 = SLOT_PICKUP_ITEM1_COMBO2;

  00ecc	c7 05 b0 03 00
	00 ec 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+944, 236 ; 000000ecH

; 600  : 	enumSLOT.PICKUP_ITEM2_COMBO1 = SLOT_PICKUP_ITEM2_COMBO1;

  00ed6	c7 05 b4 03 00
	00 ed 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+948, 237 ; 000000edH

; 601  : 	enumSLOT.PICKUP_ITEM2_COMBO2 = SLOT_PICKUP_ITEM2_COMBO2;

  00ee0	c7 05 b8 03 00
	00 ee 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+952, 238 ; 000000eeH

; 602  : 	enumSLOT.PICKUP_ITEM3_COMBO1 = SLOT_PICKUP_ITEM3_COMBO1;

  00eea	c7 05 bc 03 00
	00 ef 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+956, 239 ; 000000efH

; 603  : 	enumSLOT.PICKUP_ITEM3_COMBO2 = SLOT_PICKUP_ITEM3_COMBO2;

  00ef4	c7 05 c0 03 00
	00 f0 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+960, 240 ; 000000f0H

; 604  : 	enumSLOT.PICKUP_ITEM4_COMBO1 = SLOT_PICKUP_ITEM4_COMBO1;

  00efe	c7 05 c4 03 00
	00 f1 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+964, 241 ; 000000f1H

; 605  : 	enumSLOT.PICKUP_ITEM4_COMBO2 = SLOT_PICKUP_ITEM4_COMBO2;

  00f08	c7 05 c8 03 00
	00 f2 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+968, 242 ; 000000f2H

; 606  : 	enumSLOT.EXAMINE1 = SLOT_EXAMINE1;

  00f12	c7 05 cc 03 00
	00 f3 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+972, 243 ; 000000f3H

; 607  : 	enumSLOT.EXAMINE2 = SLOT_EXAMINE2;

  00f1c	c7 05 d0 03 00
	00 f4 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+976, 244 ; 000000f4H

; 608  : 	enumSLOT.EXAMINE3 = SLOT_EXAMINE3;

  00f26	c7 05 d4 03 00
	00 f5 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+980, 245 ; 000000f5H

; 609  : 	enumSLOT.CROWBAR_ITEM = SLOT_CROWBAR_ITEM;

  00f30	c7 05 d8 03 00
	00 f6 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+984, 246 ; 000000f6H

; 610  : 	enumSLOT.BURNING_TORCH_ITEM = SLOT_BURNING_TORCH_ITEM;

  00f3a	c7 05 dc 03 00
	00 f7 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+988, 247 ; 000000f7H

; 611  : 	enumSLOT.CLOCKWORK_BEETLE = SLOT_CLOCKWORK_BEETLE;

  00f44	c7 05 e0 03 00
	00 f8 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+992, 248 ; 000000f8H

; 612  : 	enumSLOT.CLOCKWORK_BEETLE_COMBO1 = SLOT_CLOCKWORK_BEETLE_COMBO1;

  00f4e	c7 05 e4 03 00
	00 f9 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+996, 249 ; 000000f9H

; 613  : 	enumSLOT.CLOCKWORK_BEETLE_COMBO2 = SLOT_CLOCKWORK_BEETLE_COMBO2;

  00f58	c7 05 e8 03 00
	00 fa 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1000, 250 ; 000000faH

; 614  : 	enumSLOT.MINE_DETECTOR = SLOT_MINE_DETECTOR;

  00f62	c7 05 ec 03 00
	00 fb 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1004, 251 ; 000000fbH

; 615  : 	enumSLOT.QUEST_ITEM1 = SLOT_QUEST_ITEM1;

  00f6c	c7 05 f0 03 00
	00 fc 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1008, 252 ; 000000fcH

; 616  : 	enumSLOT.QUEST_ITEM2 = SLOT_QUEST_ITEM2;

  00f76	c7 05 f4 03 00
	00 fd 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1012, 253 ; 000000fdH

; 617  : 	enumSLOT.QUEST_ITEM3 = SLOT_QUEST_ITEM3;

  00f80	c7 05 f8 03 00
	00 fe 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1016, 254 ; 000000feH

; 618  : 	enumSLOT.QUEST_ITEM4 = SLOT_QUEST_ITEM4;

  00f8a	c7 05 fc 03 00
	00 ff 00 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1020, 255 ; 000000ffH

; 619  : 	enumSLOT.QUEST_ITEM5 = SLOT_QUEST_ITEM5;

  00f94	c7 05 00 04 00
	00 00 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1024, 256 ; 00000100H

; 620  : 	enumSLOT.QUEST_ITEM6 = SLOT_QUEST_ITEM6;

  00f9e	c7 05 04 04 00
	00 01 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1028, 257 ; 00000101H

; 621  : 	enumSLOT.MAP = SLOT_MAP;

  00fa8	c7 05 08 04 00
	00 02 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1032, 258 ; 00000102H

; 622  : 	enumSLOT.SECRET_MAP = SLOT_SECRET_MAP;

  00fb2	c7 05 0c 04 00
	00 03 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1036, 259 ; 00000103H

; 623  : 	enumSLOT.PUZZLE_HOLE1 = SLOT_PUZZLE_HOLE1;

  00fbc	c7 05 10 04 00
	00 04 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1040, 260 ; 00000104H

; 624  : 	enumSLOT.PUZZLE_HOLE2 = SLOT_PUZZLE_HOLE2;

  00fc6	c7 05 14 04 00
	00 05 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1044, 261 ; 00000105H

; 625  : 	enumSLOT.PUZZLE_HOLE3 = SLOT_PUZZLE_HOLE3;

  00fd0	c7 05 18 04 00
	00 06 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1048, 262 ; 00000106H

; 626  : 	enumSLOT.PUZZLE_HOLE4 = SLOT_PUZZLE_HOLE4;

  00fda	c7 05 1c 04 00
	00 07 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1052, 263 ; 00000107H

; 627  : 	enumSLOT.PUZZLE_HOLE5 = SLOT_PUZZLE_HOLE5;

  00fe4	c7 05 20 04 00
	00 08 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1056, 264 ; 00000108H

; 628  : 	enumSLOT.PUZZLE_HOLE6 = SLOT_PUZZLE_HOLE6;

  00fee	c7 05 24 04 00
	00 09 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1060, 265 ; 00000109H

; 629  : 	enumSLOT.PUZZLE_HOLE7 = SLOT_PUZZLE_HOLE7;

  00ff8	c7 05 28 04 00
	00 0a 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1064, 266 ; 0000010aH

; 630  : 	enumSLOT.PUZZLE_HOLE8 = SLOT_PUZZLE_HOLE8;

  01002	c7 05 2c 04 00
	00 0b 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1068, 267 ; 0000010bH

; 631  : 	enumSLOT.PUZZLE_HOLE9 = SLOT_PUZZLE_HOLE9;

  0100c	c7 05 30 04 00
	00 0c 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1072, 268 ; 0000010cH

; 632  : 	enumSLOT.PUZZLE_HOLE10 = SLOT_PUZZLE_HOLE10;

  01016	c7 05 34 04 00
	00 0d 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1076, 269 ; 0000010dH

; 633  : 	enumSLOT.PUZZLE_HOLE11 = SLOT_PUZZLE_HOLE11;

  01020	c7 05 38 04 00
	00 0e 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1080, 270 ; 0000010eH

; 634  : 	enumSLOT.PUZZLE_HOLE12 = SLOT_PUZZLE_HOLE12;

  0102a	c7 05 3c 04 00
	00 0f 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1084, 271 ; 0000010fH

; 635  : 	enumSLOT.PUZZLE_DONE1 = SLOT_PUZZLE_DONE1;

  01034	c7 05 40 04 00
	00 10 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1088, 272 ; 00000110H

; 636  : 	enumSLOT.PUZZLE_DONE2 = SLOT_PUZZLE_DONE2;

  0103e	c7 05 44 04 00
	00 11 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1092, 273 ; 00000111H

; 637  : 	enumSLOT.PUZZLE_DONE3 = SLOT_PUZZLE_DONE3;

  01048	c7 05 48 04 00
	00 12 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1096, 274 ; 00000112H

; 638  : 	enumSLOT.PUZZLE_DONE4 = SLOT_PUZZLE_DONE4;

  01052	c7 05 4c 04 00
	00 13 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1100, 275 ; 00000113H

; 639  : 	enumSLOT.PUZZLE_DONE5 = SLOT_PUZZLE_DONE5;

  0105c	c7 05 50 04 00
	00 14 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1104, 276 ; 00000114H

; 640  : 	enumSLOT.PUZZLE_DONE6 = SLOT_PUZZLE_DONE6;

  01066	c7 05 54 04 00
	00 15 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1108, 277 ; 00000115H

; 641  : 	enumSLOT.PUZZLE_DONE7 = SLOT_PUZZLE_DONE7;

  01070	c7 05 58 04 00
	00 16 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1112, 278 ; 00000116H

; 642  : 	enumSLOT.PUZZLE_DONE8 = SLOT_PUZZLE_DONE8;

  0107a	c7 05 5c 04 00
	00 17 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1116, 279 ; 00000117H

; 643  : 	enumSLOT.PUZZLE_DONE9 = SLOT_PUZZLE_DONE9;

  01084	c7 05 60 04 00
	00 18 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1120, 280 ; 00000118H

; 644  : 	enumSLOT.PUZZLE_DONE10 = SLOT_PUZZLE_DONE10;

  0108e	c7 05 64 04 00
	00 19 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1124, 281 ; 00000119H

; 645  : 	enumSLOT.PUZZLE_DONE11 = SLOT_PUZZLE_DONE11;

  01098	c7 05 68 04 00
	00 1a 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1128, 282 ; 0000011aH

; 646  : 	enumSLOT.PUZZLE_DONE12 = SLOT_PUZZLE_DONE12;

  010a2	c7 05 6c 04 00
	00 1b 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1132, 283 ; 0000011bH

; 647  : 	enumSLOT.KEY_HOLE1 = SLOT_KEY_HOLE1;

  010ac	c7 05 70 04 00
	00 1c 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1136, 284 ; 0000011cH

; 648  : 	enumSLOT.KEY_HOLE2 = SLOT_KEY_HOLE2;

  010b6	c7 05 74 04 00
	00 1d 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1140, 285 ; 0000011dH

; 649  : 	enumSLOT.KEY_HOLE3 = SLOT_KEY_HOLE3;

  010c0	c7 05 78 04 00
	00 1e 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1144, 286 ; 0000011eH

; 650  : 	enumSLOT.KEY_HOLE4 = SLOT_KEY_HOLE4;

  010ca	c7 05 7c 04 00
	00 1f 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1148, 287 ; 0000011fH

; 651  : 	enumSLOT.KEY_HOLE5 = SLOT_KEY_HOLE5;

  010d4	c7 05 80 04 00
	00 20 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1152, 288 ; 00000120H

; 652  : 	enumSLOT.KEY_HOLE6 = SLOT_KEY_HOLE6;

  010de	c7 05 84 04 00
	00 21 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1156, 289 ; 00000121H

; 653  : 	enumSLOT.KEY_HOLE7 = SLOT_KEY_HOLE7;

  010e8	c7 05 88 04 00
	00 22 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1160, 290 ; 00000122H

; 654  : 	enumSLOT.KEY_HOLE8 = SLOT_KEY_HOLE8;

  010f2	c7 05 8c 04 00
	00 23 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1164, 291 ; 00000123H

; 655  : 	enumSLOT.KEY_HOLE9 = SLOT_KEY_HOLE9;

  010fc	c7 05 90 04 00
	00 24 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1168, 292 ; 00000124H

; 656  : 	enumSLOT.KEY_HOLE10 = SLOT_KEY_HOLE10;

  01106	c7 05 94 04 00
	00 25 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1172, 293 ; 00000125H

; 657  : 	enumSLOT.KEY_HOLE11 = SLOT_KEY_HOLE11;

  01110	c7 05 98 04 00
	00 26 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1176, 294 ; 00000126H

; 658  : 	enumSLOT.KEY_HOLE12 = SLOT_KEY_HOLE12;

  0111a	c7 05 9c 04 00
	00 27 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1180, 295 ; 00000127H

; 659  : 	enumSLOT.WATERSKIN1_EMPTY = SLOT_WATERSKIN1_EMPTY;

  01124	c7 05 a0 04 00
	00 28 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1184, 296 ; 00000128H

; 660  : 	enumSLOT.WATERSKIN1_1 = SLOT_WATERSKIN1_1;

  0112e	c7 05 a4 04 00
	00 29 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1188, 297 ; 00000129H

; 661  : 	enumSLOT.WATERSKIN1_2 = SLOT_WATERSKIN1_2;

  01138	c7 05 a8 04 00
	00 2a 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1192, 298 ; 0000012aH

; 662  : 	enumSLOT.WATERSKIN1_3 = SLOT_WATERSKIN1_3;

  01142	c7 05 ac 04 00
	00 2b 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1196, 299 ; 0000012bH

; 663  : 	enumSLOT.WATERSKIN2_EMPTY = SLOT_WATERSKIN2_EMPTY;

  0114c	c7 05 b0 04 00
	00 2c 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1200, 300 ; 0000012cH

; 664  : 	enumSLOT.WATERSKIN2_1 = SLOT_WATERSKIN2_1;

  01156	c7 05 b4 04 00
	00 2d 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1204, 301 ; 0000012dH

; 665  : 	enumSLOT.WATERSKIN2_2 = SLOT_WATERSKIN2_2;

  01160	c7 05 b8 04 00
	00 2e 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1208, 302 ; 0000012eH

; 666  : 	enumSLOT.WATERSKIN2_3 = SLOT_WATERSKIN2_3;

  0116a	c7 05 bc 04 00
	00 2f 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1212, 303 ; 0000012fH

; 667  : 	enumSLOT.WATERSKIN2_4 = SLOT_WATERSKIN2_4;

  01174	c7 05 c0 04 00
	00 30 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1216, 304 ; 00000130H

; 668  : 	enumSLOT.WATERSKIN2_5 = SLOT_WATERSKIN2_5;

  0117e	c7 05 c4 04 00
	00 31 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1220, 305 ; 00000131H

; 669  : 	enumSLOT.SWITCH_TYPE1 = SLOT_SWITCH_TYPE1;

  01188	c7 05 c8 04 00
	00 32 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1224, 306 ; 00000132H

; 670  : 	enumSLOT.SWITCH_TYPE2 = SLOT_SWITCH_TYPE2;

  01192	c7 05 cc 04 00
	00 33 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1228, 307 ; 00000133H

; 671  : 	enumSLOT.SWITCH_TYPE3 = SLOT_SWITCH_TYPE3;

  0119c	c7 05 d0 04 00
	00 34 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1232, 308 ; 00000134H

; 672  : 	enumSLOT.SWITCH_TYPE4 = SLOT_SWITCH_TYPE4;

  011a6	c7 05 d4 04 00
	00 35 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1236, 309 ; 00000135H

; 673  : 	enumSLOT.SWITCH_TYPE5 = SLOT_SWITCH_TYPE5;

  011b0	c7 05 d8 04 00
	00 36 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1240, 310 ; 00000136H

; 674  : 	enumSLOT.SWITCH_TYPE6 = SLOT_SWITCH_TYPE6;

  011ba	c7 05 dc 04 00
	00 37 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1244, 311 ; 00000137H

; 675  : 	enumSLOT.SWITCH_TYPE7 = SLOT_SWITCH_TYPE7;

  011c4	c7 05 e0 04 00
	00 38 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1248, 312 ; 00000138H

; 676  : 	enumSLOT.SWITCH_TYPE8 = SLOT_SWITCH_TYPE8;

  011ce	c7 05 e4 04 00
	00 39 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1252, 313 ; 00000139H

; 677  : 	enumSLOT.UNDERWATER_SWITCH1 = SLOT_UNDERWATER_SWITCH1;

  011d8	c7 05 e8 04 00
	00 3a 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1256, 314 ; 0000013aH

; 678  : 	enumSLOT.UNDERWATER_SWITCH2 = SLOT_UNDERWATER_SWITCH2;

  011e2	c7 05 ec 04 00
	00 3b 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1260, 315 ; 0000013bH

; 679  : 	enumSLOT.TURN_SWITCH = SLOT_TURN_SWITCH;

  011ec	c7 05 f0 04 00
	00 3c 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1264, 316 ; 0000013cH

; 680  : 	enumSLOT.COG_SWITCH = SLOT_COG_SWITCH;

  011f6	c7 05 f4 04 00
	00 3d 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1268, 317 ; 0000013dH

; 681  : 	enumSLOT.LEVER_SWITCH = SLOT_LEVER_SWITCH;

  01200	c7 05 f8 04 00
	00 3e 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1272, 318 ; 0000013eH

; 682  : 	enumSLOT.JUMP_SWITCH = SLOT_JUMP_SWITCH;

  0120a	c7 05 fc 04 00
	00 3f 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1276, 319 ; 0000013fH

; 683  : 	enumSLOT.CROWBAR_SWITCH = SLOT_CROWBAR_SWITCH;

  01214	c7 05 00 05 00
	00 40 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1280, 320 ; 00000140H

; 684  : 	enumSLOT.PULLEY = SLOT_PULLEY;

  0121e	c7 05 04 05 00
	00 41 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1284, 321 ; 00000141H

; 685  : 	enumSLOT.DOOR_TYPE1 = SLOT_DOOR_TYPE1;

  01228	c7 05 08 05 00
	00 42 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1288, 322 ; 00000142H

; 686  : 	enumSLOT.DOOR_TYPE2 = SLOT_DOOR_TYPE2;

  01232	c7 05 0c 05 00
	00 43 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1292, 323 ; 00000143H

; 687  : 	enumSLOT.DOOR_TYPE3 = SLOT_DOOR_TYPE3;

  0123c	c7 05 10 05 00
	00 44 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1296, 324 ; 00000144H

; 688  : 	enumSLOT.DOOR_TYPE4 = SLOT_DOOR_TYPE4;

  01246	c7 05 14 05 00
	00 45 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1300, 325 ; 00000145H

; 689  : 	enumSLOT.DOOR_TYPE5 = SLOT_DOOR_TYPE5;

  01250	c7 05 18 05 00
	00 46 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1304, 326 ; 00000146H

; 690  : 	enumSLOT.DOOR_TYPE6 = SLOT_DOOR_TYPE6;

  0125a	c7 05 1c 05 00
	00 47 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1308, 327 ; 00000147H

; 691  : 	enumSLOT.DOOR_TYPE7 = SLOT_DOOR_TYPE7;

  01264	c7 05 20 05 00
	00 48 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1312, 328 ; 00000148H

; 692  : 	enumSLOT.DOOR_TYPE8 = SLOT_DOOR_TYPE8;

  0126e	c7 05 24 05 00
	00 49 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1316, 329 ; 00000149H

; 693  : 	enumSLOT.PUSHPULL_DOOR1 = SLOT_PUSHPULL_DOOR1;

  01278	c7 05 28 05 00
	00 4a 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1320, 330 ; 0000014aH

; 694  : 	enumSLOT.PUSHPULL_DOOR2 = SLOT_PUSHPULL_DOOR2;

  01282	c7 05 2c 05 00
	00 4b 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1324, 331 ; 0000014bH

; 695  : 	enumSLOT.KICK_DOOR1 = SLOT_KICK_DOOR1;

  0128c	c7 05 30 05 00
	00 4c 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1328, 332 ; 0000014cH

; 696  : 	enumSLOT.KICK_DOOR2 = SLOT_KICK_DOOR2;

  01296	c7 05 34 05 00
	00 4d 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1332, 333 ; 0000014dH

; 697  : 	enumSLOT.UNDERWATER_DOOR = SLOT_UNDERWATER_DOOR;

  012a0	c7 05 38 05 00
	00 4e 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1336, 334 ; 0000014eH

; 698  : 	enumSLOT.DOUBLE_DOORS = SLOT_DOUBLE_DOORS;

  012aa	c7 05 3c 05 00
	00 4f 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1340, 335 ; 0000014fH

; 699  : 	enumSLOT.BRIDGE_FLAT = SLOT_BRIDGE_FLAT;

  012b4	c7 05 40 05 00
	00 50 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1344, 336 ; 00000150H

; 700  : 	enumSLOT.BRIDGE_TILT1 = SLOT_BRIDGE_TILT1;

  012be	c7 05 44 05 00
	00 51 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1348, 337 ; 00000151H

; 701  : 	enumSLOT.BRIDGE_TILT2 = SLOT_BRIDGE_TILT2;

  012c8	c7 05 48 05 00
	00 52 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1352, 338 ; 00000152H

; 702  : 	enumSLOT.SARCOPHAGUS = SLOT_SARCOPHAGUS;

  012d2	c7 05 4c 05 00
	00 53 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1356, 339 ; 00000153H

; 703  : 	enumSLOT.SEQUENCE_DOOR1 = SLOT_SEQUENCE_DOOR1;

  012dc	c7 05 50 05 00
	00 54 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1360, 340 ; 00000154H

; 704  : 	enumSLOT.SEQUENCE_SWITCH1 = SLOT_SEQUENCE_SWITCH1;

  012e6	c7 05 54 05 00
	00 55 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1364, 341 ; 00000155H

; 705  : 	enumSLOT.SEQUENCE_SWITCH2 = SLOT_SEQUENCE_SWITCH2;

  012f0	c7 05 58 05 00
	00 56 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1368, 342 ; 00000156H

; 706  : 	enumSLOT.SEQUENCE_SWITCH3 = SLOT_SEQUENCE_SWITCH3;

  012fa	c7 05 5c 05 00
	00 57 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1372, 343 ; 00000157H

; 707  : 	enumSLOT.SARCOPHAGUS_CUT = SLOT_SARCOPHAGUS_CUT;

  01304	c7 05 60 05 00
	00 58 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1376, 344 ; 00000158H

; 708  : 	enumSLOT.HORUS_STATUE = SLOT_HORUS_STATUE;

  0130e	c7 05 64 05 00
	00 59 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1380, 345 ; 00000159H

; 709  : 	enumSLOT.GOD_HEAD = SLOT_GOD_HEAD;

  01318	c7 05 68 05 00
	00 5a 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1384, 346 ; 0000015aH

; 710  : 	enumSLOT.SETH_DOOR = SLOT_SETH_DOOR;

  01322	c7 05 6c 05 00
	00 5b 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1388, 347 ; 0000015bH

; 711  : 	enumSLOT.STATUE_PLINTH = SLOT_STATUE_PLINTH;

  0132c	c7 05 70 05 00
	00 5c 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1392, 348 ; 0000015cH

; 712  : 	enumSLOT.PISTOLS_ITEM = SLOT_PISTOLS_ITEM;

  01336	c7 05 74 05 00
	00 5d 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1396, 349 ; 0000015dH

; 713  : 	enumSLOT.PISTOLS_AMMO_ITEM = SLOT_PISTOLS_AMMO_ITEM;

  01340	c7 05 78 05 00
	00 5e 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1400, 350 ; 0000015eH

; 714  : 	enumSLOT.UZI_ITEM = SLOT_UZI_ITEM;

  0134a	c7 05 7c 05 00
	00 5f 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1404, 351 ; 0000015fH

; 715  : 	enumSLOT.UZI_AMMO_ITEM = SLOT_UZI_AMMO_ITEM;

  01354	c7 05 80 05 00
	00 60 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1408, 352 ; 00000160H

; 716  : 	enumSLOT.SHOTGUN_ITEM = SLOT_SHOTGUN_ITEM;

  0135e	c7 05 84 05 00
	00 61 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1412, 353 ; 00000161H

; 717  : 	enumSLOT.SHOTGUN_AMMO1_ITEM = SLOT_SHOTGUN_AMMO1_ITEM;

  01368	c7 05 88 05 00
	00 62 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1416, 354 ; 00000162H

; 718  : 	enumSLOT.SHOTGUN_AMMO2_ITEM = SLOT_SHOTGUN_AMMO2_ITEM;

  01372	c7 05 8c 05 00
	00 63 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1420, 355 ; 00000163H

; 719  : 	enumSLOT.CROSSBOW_ITEM = SLOT_CROSSBOW_ITEM;

  0137c	c7 05 90 05 00
	00 64 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1424, 356 ; 00000164H

; 720  : 	enumSLOT.CROSSBOW_AMMO1_ITEM = SLOT_CROSSBOW_AMMO1_ITEM;

  01386	c7 05 94 05 00
	00 65 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1428, 357 ; 00000165H

; 721  : 	enumSLOT.CROSSBOW_AMMO2_ITEM = SLOT_CROSSBOW_AMMO2_ITEM;

  01390	c7 05 98 05 00
	00 66 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1432, 358 ; 00000166H

; 722  : 	enumSLOT.CROSSBOW_AMMO3_ITEM = SLOT_CROSSBOW_AMMO3_ITEM;

  0139a	c7 05 9c 05 00
	00 67 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1436, 359 ; 00000167H

; 723  : 	enumSLOT.CROSSBOW_BOLT = SLOT_CROSSBOW_BOLT;

  013a4	c7 05 a0 05 00
	00 68 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1440, 360 ; 00000168H

; 724  : 	enumSLOT.GRENADE_GUN_ITEM = SLOT_GRENADE_GUN_ITEM;

  013ae	c7 05 a4 05 00
	00 69 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1444, 361 ; 00000169H

; 725  : 	enumSLOT.GRENADE_GUN_AMMO1_ITEM = SLOT_GRENADE_GUN_AMMO1_ITEM;

  013b8	c7 05 a8 05 00
	00 6a 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1448, 362 ; 0000016aH

; 726  : 	enumSLOT.GRENADE_GUN_AMMO2_ITEM = SLOT_GRENADE_GUN_AMMO2_ITEM;

  013c2	c7 05 ac 05 00
	00 6b 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1452, 363 ; 0000016bH

; 727  : 	enumSLOT.GRENADE_GUN_AMMO3_ITEM = SLOT_GRENADE_GUN_AMMO3_ITEM;

  013cc	c7 05 b0 05 00
	00 6c 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1456, 364 ; 0000016cH

; 728  : 	enumSLOT.GRENADE = SLOT_GRENADE;

  013d6	c7 05 b4 05 00
	00 6d 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1460, 365 ; 0000016dH

; 729  : 	enumSLOT.SIXSHOOTER_ITEM = SLOT_SIXSHOOTER_ITEM;

  013e0	c7 05 b8 05 00
	00 6e 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1464, 366 ; 0000016eH

; 730  : 	enumSLOT.SIXSHOOTER_AMMO_ITEM = SLOT_SIXSHOOTER_AMMO_ITEM;

  013ea	c7 05 bc 05 00
	00 6f 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1468, 367 ; 0000016fH

; 731  : 	enumSLOT.BIGMEDI_ITEM = SLOT_BIGMEDI_ITEM;

  013f4	c7 05 c0 05 00
	00 70 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1472, 368 ; 00000170H

; 732  : 	enumSLOT.SMALLMEDI_ITEM = SLOT_SMALLMEDI_ITEM;

  013fe	c7 05 c4 05 00
	00 71 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1476, 369 ; 00000171H

; 733  : 	enumSLOT.LASERSIGHT_ITEM = SLOT_LASERSIGHT_ITEM;

  01408	c7 05 c8 05 00
	00 72 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1480, 370 ; 00000172H

; 734  : 	enumSLOT.BINOCULARS_ITEM = SLOT_BINOCULARS_ITEM;

  01412	c7 05 cc 05 00
	00 73 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1484, 371 ; 00000173H

; 735  : 	enumSLOT.FLARE_ITEM = SLOT_FLARE_ITEM;

  0141c	c7 05 d0 05 00
	00 74 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1488, 372 ; 00000174H

; 736  : 	enumSLOT.FLARE_INV_ITEM = SLOT_FLARE_INV_ITEM;

  01426	c7 05 d4 05 00
	00 75 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1492, 373 ; 00000175H

; 737  : 	enumSLOT.DIARY_ITEM = SLOT_DIARY_ITEM;

  01430	c7 05 d8 05 00
	00 76 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1496, 374 ; 00000176H

; 738  : 	enumSLOT.COMPASS_ITEM = SLOT_COMPASS_ITEM;

  0143a	c7 05 dc 05 00
	00 77 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1500, 375 ; 00000177H

; 739  : 	enumSLOT.MEMCARD_LOAD_INV_ITEM = SLOT_MEMCARD_LOAD_INV_ITEM;

  01444	c7 05 e0 05 00
	00 78 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1504, 376 ; 00000178H

; 740  : 	enumSLOT.MEMCARD_SAVE_INV_ITEM = SLOT_MEMCARD_SAVE_INV_ITEM;

  0144e	c7 05 e4 05 00
	00 79 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1508, 377 ; 00000179H

; 741  : 	enumSLOT.PC_LOAD_INV_ITEM = SLOT_PC_LOAD_INV_ITEM;

  01458	c7 05 e8 05 00
	00 7a 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1512, 378 ; 0000017aH

; 742  : 	enumSLOT.PC_SAVE_INV_ITEM = SLOT_PC_SAVE_INV_ITEM;

  01462	c7 05 ec 05 00
	00 7b 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1516, 379 ; 0000017bH

; 743  : 	enumSLOT.SMOKE_EMITTER_WHITE = SLOT_SMOKE_EMITTER_WHITE;

  0146c	c7 05 f0 05 00
	00 7c 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1520, 380 ; 0000017cH

; 744  : 	enumSLOT.SMOKE_EMITTER_BLACK = SLOT_SMOKE_EMITTER_BLACK;

  01476	c7 05 f4 05 00
	00 7d 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1524, 381 ; 0000017dH

; 745  : 	enumSLOT.STEAM_EMITTER = SLOT_STEAM_EMITTER;

  01480	c7 05 f8 05 00
	00 7e 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1528, 382 ; 0000017eH

; 746  : 	enumSLOT.EARTHQUAKE = SLOT_EARTHQUAKE;

  0148a	c7 05 fc 05 00
	00 7f 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1532, 383 ; 0000017fH

; 747  : 	enumSLOT.BUBBLES = SLOT_BUBBLES;

  01494	c7 05 00 06 00
	00 80 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1536, 384 ; 00000180H

; 748  : 	enumSLOT.WATERFALLMIST = SLOT_WATERFALLMIST;

  0149e	c7 05 04 06 00
	00 81 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1540, 385 ; 00000181H

; 749  : 	enumSLOT.GUNSHELL = SLOT_GUNSHELL;

  014a8	c7 05 08 06 00
	00 82 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1544, 386 ; 00000182H

; 750  : 	enumSLOT.SHOTGUNSHELL = SLOT_SHOTGUNSHELL;

  014b2	c7 05 0c 06 00
	00 83 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1548, 387 ; 00000183H

; 751  : 	enumSLOT.GUN_FLASH = SLOT_GUN_FLASH;

  014bc	c7 05 10 06 00
	00 84 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1552, 388 ; 00000184H

; 752  : 	enumSLOT.BUTTERFLY = SLOT_BUTTERFLY;

  014c6	c7 05 14 06 00
	00 85 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1556, 389 ; 00000185H

; 753  : 	enumSLOT.SPRINKLER = SLOT_SPRINKLER;

  014d0	c7 05 18 06 00
	00 86 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1560, 390 ; 00000186H

; 754  : 	enumSLOT.RED_LIGHT = SLOT_RED_LIGHT;

  014da	c7 05 1c 06 00
	00 87 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1564, 391 ; 00000187H

; 755  : 	enumSLOT.GREEN_LIGHT = SLOT_GREEN_LIGHT;

  014e4	c7 05 20 06 00
	00 88 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1568, 392 ; 00000188H

; 756  : 	enumSLOT.BLUE_LIGHT = SLOT_BLUE_LIGHT;

  014ee	c7 05 24 06 00
	00 89 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1572, 393 ; 00000189H

; 757  : 	enumSLOT.AMBER_LIGHT = SLOT_AMBER_LIGHT;

  014f8	c7 05 28 06 00
	00 8a 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1576, 394 ; 0000018aH

; 758  : 	enumSLOT.WHITE_LIGHT = SLOT_WHITE_LIGHT;

  01502	c7 05 2c 06 00
	00 8b 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1580, 395 ; 0000018bH

; 759  : 	enumSLOT.BLINKING_LIGHT = SLOT_BLINKING_LIGHT;

  0150c	c7 05 30 06 00
	00 8c 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1584, 396 ; 0000018cH

; 760  : 	enumSLOT.LENS_FLARE = SLOT_LENS_FLARE;

  01516	c7 05 34 06 00
	00 8d 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1588, 397 ; 0000018dH

; 761  : 	enumSLOT.AI_GUARD = SLOT_AI_GUARD;

  01520	c7 05 38 06 00
	00 8e 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1592, 398 ; 0000018eH

; 762  : 	enumSLOT.AI_AMBUSH = SLOT_AI_AMBUSH;

  0152a	c7 05 3c 06 00
	00 8f 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1596, 399 ; 0000018fH

; 763  : 	enumSLOT.AI_PATROL1 = SLOT_AI_PATROL1;

  01534	c7 05 40 06 00
	00 90 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1600, 400 ; 00000190H

; 764  : 	enumSLOT.AI_MODIFY = SLOT_AI_MODIFY;

  0153e	c7 05 44 06 00
	00 91 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1604, 401 ; 00000191H

; 765  : 	enumSLOT.AI_FOLLOW = SLOT_AI_FOLLOW;

  01548	c7 05 48 06 00
	00 92 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1608, 402 ; 00000192H

; 766  : 	enumSLOT.AI_PATROL2 = SLOT_AI_PATROL2;

  01552	c7 05 4c 06 00
	00 93 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1612, 403 ; 00000193H

; 767  : 	enumSLOT.AI_X1 = SLOT_AI_X1;

  0155c	c7 05 50 06 00
	00 94 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1616, 404 ; 00000194H

; 768  : 	enumSLOT.AI_X2 = SLOT_AI_X2;

  01566	c7 05 54 06 00
	00 95 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1620, 405 ; 00000195H

; 769  : 	enumSLOT.LARA_START_POS = SLOT_LARA_START_POS;

  01570	c7 05 58 06 00
	00 96 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1624, 406 ; 00000196H

; 770  : 	enumSLOT.KILL_ALL_TRIGGERS = SLOT_KILL_ALL_TRIGGERS;

  0157a	c7 05 5c 06 00
	00 97 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1628, 407 ; 00000197H

; 771  : 	enumSLOT.TRIGGER_TRIGGERER = SLOT_TRIGGER_TRIGGERER;

  01584	c7 05 60 06 00
	00 98 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1632, 408 ; 00000198H

; 772  : 	enumSLOT.SMASH_OBJECT1 = SLOT_SMASH_OBJECT1;

  0158e	c7 05 64 06 00
	00 99 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1636, 409 ; 00000199H

; 773  : 	enumSLOT.SMASH_OBJECT2 = SLOT_SMASH_OBJECT2;

  01598	c7 05 68 06 00
	00 9a 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1640, 410 ; 0000019aH

; 774  : 	enumSLOT.SMASH_OBJECT3 = SLOT_SMASH_OBJECT3;

  015a2	c7 05 6c 06 00
	00 9b 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1644, 411 ; 0000019bH

; 775  : 	enumSLOT.SMASH_OBJECT4 = SLOT_SMASH_OBJECT4;

  015ac	c7 05 70 06 00
	00 9c 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1648, 412 ; 0000019cH

; 776  : 	enumSLOT.SMASH_OBJECT5 = SLOT_SMASH_OBJECT5;

  015b6	c7 05 74 06 00
	00 9d 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1652, 413 ; 0000019dH

; 777  : 	enumSLOT.SMASH_OBJECT6 = SLOT_SMASH_OBJECT6;

  015c0	c7 05 78 06 00
	00 9e 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1656, 414 ; 0000019eH

; 778  : 	enumSLOT.SMASH_OBJECT7 = SLOT_SMASH_OBJECT7;

  015ca	c7 05 7c 06 00
	00 9f 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1660, 415 ; 0000019fH

; 779  : 	enumSLOT.SMASH_OBJECT8 = SLOT_SMASH_OBJECT8;

  015d4	c7 05 80 06 00
	00 a0 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1664, 416 ; 000001a0H

; 780  : 	enumSLOT.MESHSWAP1 = SLOT_MESHSWAP1;

  015de	c7 05 84 06 00
	00 a1 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1668, 417 ; 000001a1H

; 781  : 	enumSLOT.MESHSWAP2 = SLOT_MESHSWAP2;

  015e8	c7 05 88 06 00
	00 a2 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1672, 418 ; 000001a2H

; 782  : 	enumSLOT.MESHSWAP3 = SLOT_MESHSWAP3;

  015f2	c7 05 8c 06 00
	00 a3 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1676, 419 ; 000001a3H

; 783  : 	enumSLOT.DEATH_SLIDE = SLOT_DEATH_SLIDE;

  015fc	c7 05 90 06 00
	00 a4 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1680, 420 ; 000001a4H

; 784  : 	enumSLOT.BODY_PART = SLOT_BODY_PART;

  01606	c7 05 94 06 00
	00 a5 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1684, 421 ; 000001a5H

; 785  : 	enumSLOT.CAMERA_TARGET = SLOT_CAMERA_TARGET;

  01610	c7 05 98 06 00
	00 a6 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1688, 422 ; 000001a6H

; 786  : 	enumSLOT.WATERFALL1 = SLOT_WATERFALL1;

  0161a	c7 05 9c 06 00
	00 a7 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1692, 423 ; 000001a7H

; 787  : 	enumSLOT.WATERFALL2 = SLOT_WATERFALL2;

  01624	c7 05 a0 06 00
	00 a8 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1696, 424 ; 000001a8H

; 788  : 	enumSLOT.WATERFALL3 = SLOT_WATERFALL3;

  0162e	c7 05 a4 06 00
	00 a9 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1700, 425 ; 000001a9H

; 789  : 	enumSLOT.PLANET_EFFECT = SLOT_PLANET_EFFECT;

  01638	c7 05 a8 06 00
	00 aa 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1704, 426 ; 000001aaH

; 790  : 	enumSLOT.ANIMATING1 = SLOT_ANIMATING1;

  01642	c7 05 ac 06 00
	00 ab 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1708, 427 ; 000001abH

; 791  : 	enumSLOT.ANIMATING1_MIP = SLOT_ANIMATING1_MIP;

  0164c	c7 05 b0 06 00
	00 ac 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1712, 428 ; 000001acH

; 792  : 	enumSLOT.ANIMATING2 = SLOT_ANIMATING2;

  01656	c7 05 b4 06 00
	00 ad 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1716, 429 ; 000001adH

; 793  : 	enumSLOT.ANIMATING2_MIP = SLOT_ANIMATING2_MIP;

  01660	c7 05 b8 06 00
	00 ae 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1720, 430 ; 000001aeH

; 794  : 	enumSLOT.ANIMATING3 = SLOT_ANIMATING3;

  0166a	c7 05 bc 06 00
	00 af 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1724, 431 ; 000001afH

; 795  : 	enumSLOT.ANIMATING3_MIP = SLOT_ANIMATING3_MIP;

  01674	c7 05 c0 06 00
	00 b0 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1728, 432 ; 000001b0H

; 796  : 	enumSLOT.ANIMATING4 = SLOT_ANIMATING4;

  0167e	c7 05 c4 06 00
	00 b1 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1732, 433 ; 000001b1H

; 797  : 	enumSLOT.ANIMATING4_MIP = SLOT_ANIMATING4_MIP;

  01688	c7 05 c8 06 00
	00 b2 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1736, 434 ; 000001b2H

; 798  : 	enumSLOT.ANIMATING5 = SLOT_ANIMATING5;

  01692	c7 05 cc 06 00
	00 b3 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1740, 435 ; 000001b3H

; 799  : 	enumSLOT.ANIMATING5_MIP = SLOT_ANIMATING5_MIP;

  0169c	c7 05 d0 06 00
	00 b4 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1744, 436 ; 000001b4H

; 800  : 	enumSLOT.ANIMATING6 = SLOT_ANIMATING6;

  016a6	c7 05 d4 06 00
	00 b5 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1748, 437 ; 000001b5H

; 801  : 	enumSLOT.ANIMATING6_MIP = SLOT_ANIMATING6_MIP;

  016b0	c7 05 d8 06 00
	00 b6 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1752, 438 ; 000001b6H

; 802  : 	enumSLOT.ANIMATING7 = SLOT_ANIMATING7;

  016ba	c7 05 dc 06 00
	00 b7 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1756, 439 ; 000001b7H

; 803  : 	enumSLOT.ANIMATING7_MIP = SLOT_ANIMATING7_MIP;

  016c4	c7 05 e0 06 00
	00 b8 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1760, 440 ; 000001b8H

; 804  : 	enumSLOT.ANIMATING8 = SLOT_ANIMATING8;

  016ce	c7 05 e4 06 00
	00 b9 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1764, 441 ; 000001b9H

; 805  : 	enumSLOT.ANIMATING8_MIP = SLOT_ANIMATING8_MIP;

  016d8	c7 05 e8 06 00
	00 ba 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1768, 442 ; 000001baH

; 806  : 	enumSLOT.ANIMATING9 = SLOT_ANIMATING9;

  016e2	c7 05 ec 06 00
	00 bb 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1772, 443 ; 000001bbH

; 807  : 	enumSLOT.ANIMATING9_MIP = SLOT_ANIMATING9_MIP;

  016ec	c7 05 f0 06 00
	00 bc 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1776, 444 ; 000001bcH

; 808  : 	enumSLOT.ANIMATING10 = SLOT_ANIMATING10;

  016f6	c7 05 f4 06 00
	00 bd 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1780, 445 ; 000001bdH

; 809  : 	enumSLOT.ANIMATING10_MIP = SLOT_ANIMATING10_MIP;

  01700	c7 05 f8 06 00
	00 be 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1784, 446 ; 000001beH

; 810  : 	enumSLOT.ANIMATING11 = SLOT_ANIMATING11;

  0170a	c7 05 fc 06 00
	00 bf 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1788, 447 ; 000001bfH

; 811  : 	enumSLOT.ANIMATING11_MIP = SLOT_ANIMATING11_MIP;

  01714	c7 05 00 07 00
	00 c0 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1792, 448 ; 000001c0H

; 812  : 	enumSLOT.ANIMATING12 = SLOT_ANIMATING12;

  0171e	c7 05 04 07 00
	00 c1 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1796, 449 ; 000001c1H

; 813  : 	enumSLOT.ANIMATING12_MIP = SLOT_ANIMATING12_MIP;

  01728	c7 05 08 07 00
	00 c2 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1800, 450 ; 000001c2H

; 814  : 	enumSLOT.ANIMATING13 = SLOT_ANIMATING13;

  01732	c7 05 0c 07 00
	00 c3 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1804, 451 ; 000001c3H

; 815  : 	enumSLOT.ANIMATING13_MIP = SLOT_ANIMATING13_MIP;

  0173c	c7 05 10 07 00
	00 c4 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1808, 452 ; 000001c4H

; 816  : 	enumSLOT.ANIMATING14 = SLOT_ANIMATING14;

  01746	c7 05 14 07 00
	00 c5 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1812, 453 ; 000001c5H

; 817  : 	enumSLOT.ANIMATING14_MIP = SLOT_ANIMATING14_MIP;

  01750	c7 05 18 07 00
	00 c6 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1816, 454 ; 000001c6H

; 818  : 	enumSLOT.ANIMATING15 = SLOT_ANIMATING15;

  0175a	c7 05 1c 07 00
	00 c7 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1820, 455 ; 000001c7H

; 819  : 	enumSLOT.ANIMATING15_MIP = SLOT_ANIMATING15_MIP;

  01764	c7 05 20 07 00
	00 c8 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1824, 456 ; 000001c8H

; 820  : 	enumSLOT.ANIMATING16 = SLOT_ANIMATING16;

  0176e	c7 05 24 07 00
	00 c9 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1828, 457 ; 000001c9H

; 821  : 	enumSLOT.ANIMATING16_MIP = SLOT_ANIMATING16_MIP;

  01778	c7 05 28 07 00
	00 ca 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1832, 458 ; 000001caH

; 822  : 	enumSLOT.HORIZON = SLOT_HORIZON;

  01782	c7 05 2c 07 00
	00 cb 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1836, 459 ; 000001cbH

; 823  : 	enumSLOT.SKY_GRAPHICS = SLOT_SKY_GRAPHICS;

  0178c	c7 05 30 07 00
	00 cc 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1840, 460 ; 000001ccH

; 824  : 	enumSLOT.BINOCULAR_GRAPHICS = SLOT_BINOCULAR_GRAPHICS;

  01796	c7 05 34 07 00
	00 cd 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1844, 461 ; 000001cdH

; 825  : 	enumSLOT.TARGET_GRAPHICS = SLOT_TARGET_GRAPHICS;

  017a0	c7 05 38 07 00
	00 ce 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1848, 462 ; 000001ceH

; 826  : 	enumSLOT.DEFAULT_SPRITES = SLOT_DEFAULT_SPRITES;

  017aa	c7 05 3c 07 00
	00 cf 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1852, 463 ; 000001cfH

; 827  : 	enumSLOT.MISC_SPRITES = SLOT_MISC_SPRITES;

  017b4	c7 05 40 07 00
	00 d0 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1856, 464 ; 000001d0H

; 828  : 	enumSLOT.MOTOR_BOAT = SLOT_MOTOR_BOAT;

  017be	c7 05 44 07 00
	00 d1 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1860, 465 ; 000001d1H

; 829  : 	enumSLOT.MOTOR_BOAT_LARA = SLOT_MOTOR_BOAT_LARA;

  017c8	c7 05 48 07 00
	00 d2 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1864, 466 ; 000001d2H

; 830  : 	enumSLOT.RUBBER_BOAT = SLOT_RUBBER_BOAT;

  017d2	c7 05 4c 07 00
	00 d3 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1868, 467 ; 000001d3H

; 831  : 	enumSLOT.RUBBER_BOAT_LARA = SLOT_RUBBER_BOAT_LARA;

  017dc	c7 05 50 07 00
	00 d4 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1872, 468 ; 000001d4H

; 832  : 	enumSLOT.MOTORBIKE_LARA = SLOT_MOTORBIKE_LARA;

  017e6	c7 05 54 07 00
	00 d5 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1876, 469 ; 000001d5H

; 833  : 	enumSLOT.FONT_GRAPHICS = SLOT_FONT_GRAPHICS;

  017f0	c7 05 58 07 00
	00 d6 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1880, 470 ; 000001d6H

; 834  : 	enumSLOT.PARALLEL_BARS = SLOT_PARALLEL_BARS;

  017fa	c7 05 5c 07 00
	00 d7 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1884, 471 ; 000001d7H

; 835  : 	enumSLOT.PANEL_BORDER = SLOT_PANEL_BORDER;

  01804	c7 05 60 07 00
	00 d8 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1888, 472 ; 000001d8H

; 836  : 	enumSLOT.PANEL_MIDDLE = SLOT_PANEL_MIDDLE;

  0180e	c7 05 64 07 00
	00 d9 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1892, 473 ; 000001d9H

; 837  : 	enumSLOT.PANEL_CORNER = SLOT_PANEL_CORNER;

  01818	c7 05 68 07 00
	00 da 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1896, 474 ; 000001daH

; 838  : 	enumSLOT.PANEL_DIAGONAL = SLOT_PANEL_DIAGONAL;

  01822	c7 05 6c 07 00
	00 db 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1900, 475 ; 000001dbH

; 839  : 	enumSLOT.PANEL_STRIP = SLOT_PANEL_STRIP;

  0182c	c7 05 70 07 00
	00 dc 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1904, 476 ; 000001dcH

; 840  : 	enumSLOT.PANEL_HALF_BORDER1 = SLOT_PANEL_HALF_BORDER1;

  01836	c7 05 74 07 00
	00 dd 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1908, 477 ; 000001ddH

; 841  : 	enumSLOT.PANEL_HALF_BORDER2 = SLOT_PANEL_HALF_BORDER2;

  01840	c7 05 78 07 00
	00 de 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1912, 478 ; 000001deH

; 842  : 	enumSLOT.PANEL_MIDDLE_CORNER = SLOT_PANEL_MIDDLE_CORNER;

  0184a	c7 05 7c 07 00
	00 df 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1916, 479 ; 000001dfH

; 843  : 	enumSLOT.TIGHT_ROPE = SLOT_TIGHT_ROPE;

  01854	c7 05 80 07 00
	00 e0 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1920, 480 ; 000001e0H

; 844  : 	enumSLOT.LASER_HEAD = SLOT_LASER_HEAD;

  0185e	c7 05 84 07 00
	00 e1 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1924, 481 ; 000001e1H

; 845  : 	enumSLOT.LASER_HEAD_BASE = SLOT_LASER_HEAD_BASE;

  01868	c7 05 88 07 00
	00 e2 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1928, 482 ; 000001e2H

; 846  : 	enumSLOT.LASER_HEAD_TENTACLE = SLOT_LASER_HEAD_TENTACLE;

  01872	c7 05 8c 07 00
	00 e3 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1932, 483 ; 000001e3H

; 847  : 	enumSLOT.HYDRA = SLOT_HYDRA;

  0187c	c7 05 90 07 00
	00 e4 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1936, 484 ; 000001e4H

; 848  : 	enumSLOT.HYDRA_MISSILE = SLOT_HYDRA_MISSILE;

  01886	c7 05 94 07 00
	00 e5 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1940, 485 ; 000001e5H

; 849  : 	enumSLOT.ENEMY_SUB_MARINE = SLOT_ENEMY_SUB_MARINE;

  01890	c7 05 98 07 00
	00 e6 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1944, 486 ; 000001e6H

; 850  : 	enumSLOT.ENEMY_SUB_MARINE_MIP = SLOT_ENEMY_SUB_MARINE_MIP;

  0189a	c7 05 9c 07 00
	00 e7 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1948, 487 ; 000001e7H

; 851  : 	enumSLOT.SUB_MARINE_MISSILE = SLOT_SUB_MARINE_MISSILE;

  018a4	c7 05 a0 07 00
	00 e8 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1952, 488 ; 000001e8H

; 852  : 	enumSLOT.FROG_MAN = SLOT_FROG_MAN;

  018ae	c7 05 a4 07 00
	00 e9 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1956, 489 ; 000001e9H

; 853  : 	enumSLOT.FROG_MAN_HARPOON = SLOT_FROG_MAN_HARPOON;

  018b8	c7 05 a8 07 00
	00 ea 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1960, 490 ; 000001eaH

; 854  : 	enumSLOT.FISH_EMITTER = SLOT_FISH_EMITTER;

  018c2	c7 05 ac 07 00
	00 eb 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1964, 491 ; 000001ebH

; 855  : 	enumSLOT.KAYAK = SLOT_KAYAK;

  018cc	c7 05 b0 07 00
	00 ec 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1968, 492 ; 000001ecH

; 856  : 	enumSLOT.KAYAK_LARA = SLOT_KAYAK_LARA;

  018d6	c7 05 b4 07 00
	00 ed 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1972, 493 ; 000001edH

; 857  : 	enumSLOT.CUSTOM_SPRITES = SLOT_CUSTOM_SPRITES;

  018e0	c7 05 b8 07 00
	00 ee 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1976, 494 ; 000001eeH

; 858  : 	enumSLOT.BRIDGE_TILT3 = SLOT_BRIDGE_TILT3;

  018ea	c7 05 bc 07 00
	00 ef 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1980, 495 ; 000001efH

; 859  : 	enumSLOT.BRIDGE_TILT4 = SLOT_BRIDGE_TILT4;

  018f4	c7 05 c0 07 00
	00 f0 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1984, 496 ; 000001f0H

; 860  : 	enumSLOT.BRIDGE_CUSTOM = SLOT_BRIDGE_CUSTOM;

  018fe	c7 05 c4 07 00
	00 f1 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1988, 497 ; 000001f1H

; 861  : 	enumSLOT.ROBOT_CLEANER = SLOT_ROBOT_CLEANER;

  01908	c7 05 c8 07 00
	00 f2 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1992, 498 ; 000001f2H

; 862  : 	enumSLOT.ROBOT_STAR_WARS = SLOT_ROBOT_STAR_WARS;

  01912	c7 05 cc 07 00
	00 f3 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+1996, 499 ; 000001f3H

; 863  : 	enumSLOT.MECH_WARRIOR = SLOT_MECH_WARRIOR;

  0191c	c7 05 d0 07 00
	00 f4 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+2000, 500 ; 000001f4H

; 864  : 	enumSLOT.MECH_WARRIOR_LARA = SLOT_MECH_WARRIOR_LARA;

  01926	c7 05 d4 07 00
	00 f5 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+2004, 501 ; 000001f5H

; 865  : 	enumSLOT.UW_PROPULSOR = SLOT_UW_PROPULSOR;

  01930	c7 05 d8 07 00
	00 f6 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+2008, 502 ; 000001f6H

; 866  : 	enumSLOT.UW_PROPULSOR_LARA = SLOT_UW_PROPULSOR_LARA;

  0193a	c7 05 dc 07 00
	00 f7 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+2012, 503 ; 000001f7H

; 867  : 	enumSLOT.MINE_CART = SLOT_MINE_CART;

  01944	c7 05 e0 07 00
	00 f8 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+2016, 504 ; 000001f8H

; 868  : 	enumSLOT.MINE_CART_LARA = SLOT_MINE_CART_LARA;

  0194e	c7 05 e4 07 00
	00 f9 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+2020, 505 ; 000001f9H

; 869  : 	enumSLOT.NEW_SLOT5 = SLOT_NEW_SLOT5;

  01958	c7 05 e8 07 00
	00 fa 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+2024, 506 ; 000001faH

; 870  : 	enumSLOT.NEW_SLOT6 = SLOT_NEW_SLOT6;

  01962	c7 05 ec 07 00
	00 fb 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+2028, 507 ; 000001fbH

; 871  : 	enumSLOT.NEW_SLOT7 = SLOT_NEW_SLOT7;

  0196c	c7 05 f0 07 00
	00 fc 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+2032, 508 ; 000001fcH

; 872  : 	enumSLOT.NEW_SLOT8 = SLOT_NEW_SLOT8;

  01976	c7 05 f4 07 00
	00 fd 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+2036, 509 ; 000001fdH

; 873  : 	enumSLOT.NEW_SLOT9 = SLOT_NEW_SLOT9;

  01980	c7 05 f8 07 00
	00 fe 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+2040, 510 ; 000001feH

; 874  : 	enumSLOT.NEW_SLOT10 = SLOT_NEW_SLOT10;

  0198a	c7 05 fc 07 00
	00 ff 01 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+2044, 511 ; 000001ffH

; 875  : 	enumSLOT.NEW_SLOT11 = SLOT_NEW_SLOT11;

  01994	c7 05 00 08 00
	00 00 02 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+2048, 512 ; 00000200H

; 876  : 	enumSLOT.NEW_SLOT12 = SLOT_NEW_SLOT12;

  0199e	c7 05 04 08 00
	00 01 02 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+2052, 513 ; 00000201H

; 877  : 	enumSLOT.NEW_SLOT13 = SLOT_NEW_SLOT13;

  019a8	c7 05 08 08 00
	00 02 02 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+2056, 514 ; 00000202H

; 878  : 	enumSLOT.NEW_SLOT14 = SLOT_NEW_SLOT14;

  019b2	c7 05 0c 08 00
	00 03 02 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+2060, 515 ; 00000203H

; 879  : 	enumSLOT.NEW_SLOT15 = SLOT_NEW_SLOT15;

  019bc	c7 05 10 08 00
	00 04 02 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+2064, 516 ; 00000204H

; 880  : 	enumSLOT.NEW_SLOT16 = SLOT_NEW_SLOT16;

  019c6	c7 05 14 08 00
	00 05 02 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+2068, 517 ; 00000205H

; 881  : 	enumSLOT.NEW_SLOT17 = SLOT_NEW_SLOT17;

  019d0	c7 05 18 08 00
	00 06 02 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+2072, 518 ; 00000206H

; 882  : 	enumSLOT.NEW_SLOT18 = SLOT_NEW_SLOT18;

  019da	c7 05 1c 08 00
	00 07 02 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+2076, 519 ; 00000207H

; 883  : 	enumSLOT.NUMBER_OBJECTS = SLOT_NUMBER_OBJECTS;

  019e4	c7 05 20 08 00
	00 08 02 00 00	 mov	 DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+2080, 520 ; 00000208H

; 884  : 
; 885  : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumGET----------------------
; 886  : 	enumGET.LARA = GET_LARA;

  019ee	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A, 0

; 887  : 	enumGET.ITEM = GET_ITEM;

  019f8	a3 04 00 00 00	 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A+4, eax

; 888  : 	enumGET.STATIC = GET_STATIC;

  019fd	89 0d 08 00 00
	00		 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A+8, ecx

; 889  : 	enumGET.ROOM = GET_ROOM;

  01a03	c7 05 0c 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A+12, 3

; 890  : 	enumGET.ITEM_COLL_BOX = GET_ITEM_COLL_BOX;

  01a0d	89 15 10 00 00
	00		 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A+16, edx

; 891  : 	enumGET.STATIC_COLL_BOX = GET_STATIC_COLL_BOX;

  01a13	c7 05 14 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A+20, 5

; 892  : 	enumGET.STATIC_VIEW_BOX = GET_STATIC_VIEW_BOX;

  01a1d	c7 05 18 00 00
	00 06 00 00 00	 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A+24, 6

; 893  : 	enumGET.DOOR_OF_ROOM = GET_DOOR_OF_ROOM;

  01a27	c7 05 1c 00 00
	00 07 00 00 00	 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A+28, 7

; 894  : 	enumGET.INFO_LARA = GET_INFO_LARA;

  01a31	89 35 20 00 00
	00		 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A+32, esi

; 895  : 	enumGET.MY_PARAMETER_COMMAND = GET_MY_PARAMETER_COMMAND;

  01a37	c7 05 24 00 00
	00 09 00 00 00	 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A+36, 9

; 896  : 	enumGET.MY_CUSTOMIZE_COMMAND = GET_MY_CUSTOMIZE_COMMAND;

  01a41	c7 05 28 00 00
	00 0a 00 00 00	 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A+40, 10 ; 0000000aH

; 897  : 	enumGET.INPUT = GET_INPUT;

  01a4b	c7 05 2c 00 00
	00 0b 00 00 00	 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A+44, 11 ; 0000000bH

; 898  : 	enumGET.STRINGNG = GET_STRINGNG;

  01a55	c7 05 30 00 00
	00 0c 00 00 00	 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A+48, 12 ; 0000000cH

; 899  : 	enumGET.STRING = GET_STRING;

  01a5f	c7 05 34 00 00
	00 0d 00 00 00	 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A+52, 13 ; 0000000dH

; 900  : 	enumGET.BIG_NUMBER = GET_BIG_NUMBER;

  01a69	c7 05 38 00 00
	00 0e 00 00 00	 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A+56, 14 ; 0000000eH

; 901  : 	enumGET.SCRIPT_SETTINGS = GET_SCRIPT_SETTINGS;

  01a73	c7 05 3c 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A+60, 15 ; 0000000fH

; 902  : 	enumGET.PROGRESSIVE_ACTION = GET_PROGRESSIVE_ACTION;

  01a7d	89 3d 40 00 00
	00		 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A+64, edi

; 903  : 	enumGET.AI_ITEM = GET_AI_ITEM;

  01a83	c7 05 44 00 00
	00 11 00 00 00	 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A+68, 17 ; 00000011H

; 904  : 	enumGET.LIGHT = GET_LIGHT;

  01a8d	c7 05 48 00 00
	00 12 00 00 00	 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A+72, 18 ; 00000012H

; 905  : 	enumGET.CAMERA = GET_CAMERA;

  01a97	c7 05 4c 00 00
	00 13 00 00 00	 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A+76, 19 ; 00000013H

; 906  : 	enumGET.CAMERA_FLY = GET_CAMERA_FLY;

  01aa1	c7 05 50 00 00
	00 14 00 00 00	 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A+80, 20 ; 00000014H

; 907  : 	enumGET.COLOR_RGB = GET_COLOR_RGB;

  01aab	c7 05 54 00 00
	00 15 00 00 00	 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A+84, 21 ; 00000015H

; 908  : 	enumGET.GAME_INFO = GET_GAME_INFO;

  01ab5	c7 05 58 00 00
	00 16 00 00 00	 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A+88, 22 ; 00000016H

; 909  : 	enumGET.SLOT = GET_SLOT;

  01abf	c7 05 5c 00 00
	00 17 00 00 00	 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A+92, 23 ; 00000017H

; 910  : 	enumGET.INVENTORY = GET_INVENTORY;

  01ac9	c7 05 60 00 00
	00 18 00 00 00	 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A+96, 24 ; 00000018H

; 911  : 	enumGET.ANIMATION = GET_ANIMATION;

  01ad3	c7 05 64 00 00
	00 19 00 00 00	 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A+100, 25 ; 00000019H

; 912  : 	enumGET.INFO_ITEM = GET_INFO_ITEM;

  01add	c7 05 68 00 00
	00 1a 00 00 00	 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A+104, 26 ; 0000001aH

; 913  : 	enumGET.VARIABLES = GET_VARIABLES;

  01ae7	c7 05 6c 00 00
	00 1b 00 00 00	 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A+108, 27 ; 0000001bH

; 914  : 	enumGET.FLIPMAPS = GET_FLIPMAPS;

  01af1	c7 05 70 00 00
	00 1c 00 00 00	 mov	 DWORD PTR ?enumGET@@3UStrEnumGET@@A+112, 28 ; 0000001cH

; 915  : 
; 916  : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumSKIP----------------------
; 917  : 	enumSKIP.NONE = SKIP_NONE;

  01afb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?enumSKIP@@3UStrEnumSKIP@@A, 0

; 918  : 	enumSKIP.FIXED_CAMERA = SKIP_FIXED_CAMERA;

  01b05	a3 04 00 00 00	 mov	 DWORD PTR ?enumSKIP@@3UStrEnumSKIP@@A+4, eax

; 919  : 	enumSKIP.FLY_CAMERA = SKIP_FLY_CAMERA;

  01b0a	89 0d 08 00 00
	00		 mov	 DWORD PTR ?enumSKIP@@3UStrEnumSKIP@@A+8, ecx

; 920  : 	enumSKIP.LOADING_LEVEL = SKIP_LOADING_LEVEL;

  01b10	89 15 0c 00 00
	00		 mov	 DWORD PTR ?enumSKIP@@3UStrEnumSKIP@@A+12, edx

; 921  : 	enumSKIP.FADE = SKIP_FADE;

  01b16	89 35 10 00 00
	00		 mov	 DWORD PTR ?enumSKIP@@3UStrEnumSKIP@@A+16, esi

; 922  : 	enumSKIP.TITLE_LEVEL = SKIP_TITLE_LEVEL;

  01b1c	89 3d 14 00 00
	00		 mov	 DWORD PTR ?enumSKIP@@3UStrEnumSKIP@@A+20, edi

; 923  : 	enumSKIP.GRAY_SCREEN = SKIP_GRAY_SCREEN;

  01b22	89 1d 18 00 00
	00		 mov	 DWORD PTR ?enumSKIP@@3UStrEnumSKIP@@A+24, ebx

; 924  : 	enumSKIP.NO_VIEW_OGGETTI = SKIP_NO_VIEW_OGGETTI;

  01b28	c7 05 1c 00 00
	00 40 00 00 00	 mov	 DWORD PTR ?enumSKIP@@3UStrEnumSKIP@@A+28, 64 ; 00000040H

; 925  : 	enumSKIP.BINOCULARS = SKIP_BINOCULARS;

  01b32	c7 05 20 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?enumSKIP@@3UStrEnumSKIP@@A+32, 128 ; 00000080H

; 926  : 	enumSKIP.LASER_SIGHT = SKIP_LASER_SIGHT;

  01b3c	c7 05 24 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?enumSKIP@@3UStrEnumSKIP@@A+36, 256 ; 00000100H

; 927  : 	enumSKIP.FULL_IMAGE = SKIP_FULL_IMAGE;

  01b46	c7 05 28 00 00
	00 00 02 00 00	 mov	 DWORD PTR ?enumSKIP@@3UStrEnumSKIP@@A+40, 512 ; 00000200H

; 928  : 
; 929  : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumFL2----------------------
; 930  : 	enumFL2.OVER_MINE_TRIGGER = FL2_OVER_MINE_TRIGGER;

  01b50	a3 00 00 00 00	 mov	 DWORD PTR ?enumFL2@@3UStrEnumFL2@@A, eax

; 931  : 	enumFL2.IS_BURNING = FL2_IS_BURNING;

  01b55	89 0d 04 00 00
	00		 mov	 DWORD PTR ?enumFL2@@3UStrEnumFL2@@A+4, ecx

; 932  : 	enumFL2.IS_DUCK = FL2_IS_DUCK;

  01b5b	89 15 08 00 00
	00		 mov	 DWORD PTR ?enumFL2@@3UStrEnumFL2@@A+8, edx

; 933  : 	enumFL2.IS_INVULNERABLE = FL2_IS_INVULNERABLE;

  01b61	89 35 0c 00 00
	00		 mov	 DWORD PTR ?enumFL2@@3UStrEnumFL2@@A+12, esi

; 934  : 	enumFL2.IS_USING_LASER_SIGHT_OR_BINOCULARS = FL2_IS_USING_LASER_SIGHT_OR_BINOCULARS;

  01b67	89 3d 10 00 00
	00		 mov	 DWORD PTR ?enumFL2@@3UStrEnumFL2@@A+16, edi

; 935  : 	enumFL2.TORCH_IS_BURNING = FL2_TORCH_IS_BURNING;

  01b6d	89 1d 14 00 00
	00		 mov	 DWORD PTR ?enumFL2@@3UStrEnumFL2@@A+20, ebx

; 936  : 	enumFL2.IS_CLIMBING = FL2_IS_CLIMBING;

  01b73	c7 05 18 00 00
	00 40 00 00 00	 mov	 DWORD PTR ?enumFL2@@3UStrEnumFL2@@A+24, 64 ; 00000040H

; 937  : 
; 938  : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumHOLD----------------------
; 939  : 	enumHOLD.PISTOLS = HOLD_PISTOLS;

  01b7d	a3 00 00 00 00	 mov	 DWORD PTR ?enumHOLD@@3UStrEnumHOLD@@A, eax

; 940  : 	enumHOLD.REVOLVER = HOLD_REVOLVER;

  01b82	89 0d 04 00 00
	00		 mov	 DWORD PTR ?enumHOLD@@3UStrEnumHOLD@@A+4, ecx

; 941  : 	enumHOLD.UZI = HOLD_UZI;

  01b88	c7 05 08 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?enumHOLD@@3UStrEnumHOLD@@A+8, 3

; 942  : 	enumHOLD.SHOTGUN = HOLD_SHOTGUN;

  01b92	89 15 0c 00 00
	00		 mov	 DWORD PTR ?enumHOLD@@3UStrEnumHOLD@@A+12, edx

; 943  : 	enumHOLD.GRENADEGUN = HOLD_GRENADEGUN;

  01b98	c7 05 10 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?enumHOLD@@3UStrEnumHOLD@@A+16, 5

; 944  : 	enumHOLD.CROSSBOW = HOLD_CROSSBOW;

  01ba2	c7 05 14 00 00
	00 06 00 00 00	 mov	 DWORD PTR ?enumHOLD@@3UStrEnumHOLD@@A+20, 6

; 945  : 	enumHOLD.FLARE = HOLD_FLARE;

  01bac	c7 05 18 00 00
	00 07 00 00 00	 mov	 DWORD PTR ?enumHOLD@@3UStrEnumHOLD@@A+24, 7

; 946  : 	enumHOLD.OUT_TORCH = HOLD_OUT_TORCH;

  01bb6	89 35 1c 00 00
	00		 mov	 DWORD PTR ?enumHOLD@@3UStrEnumHOLD@@A+28, esi

; 947  : 	enumHOLD.FIRED_TORCH = HOLD_FIRED_TORCH;

  01bbc	c7 05 20 00 00
	00 09 00 00 00	 mov	 DWORD PTR ?enumHOLD@@3UStrEnumHOLD@@A+32, 9

; 948  : 	enumHOLD.JEEP = HOLD_JEEP;

  01bc6	c7 05 24 00 00
	00 0a 00 00 00	 mov	 DWORD PTR ?enumHOLD@@3UStrEnumHOLD@@A+36, 10 ; 0000000aH

; 949  : 	enumHOLD.SIDECAR = HOLD_SIDECAR;

  01bd0	c7 05 28 00 00
	00 0b 00 00 00	 mov	 DWORD PTR ?enumHOLD@@3UStrEnumHOLD@@A+40, 11 ; 0000000bH

; 950  : 	enumHOLD.RUBBER_BOAT = HOLD_RUBBER_BOAT;

  01bda	c7 05 2c 00 00
	00 0c 00 00 00	 mov	 DWORD PTR ?enumHOLD@@3UStrEnumHOLD@@A+44, 12 ; 0000000cH

; 951  : 	enumHOLD.MOTOR_BOAT = HOLD_MOTOR_BOAT;

  01be4	c7 05 30 00 00
	00 0d 00 00 00	 mov	 DWORD PTR ?enumHOLD@@3UStrEnumHOLD@@A+48, 13 ; 0000000dH

; 952  : 	enumHOLD.ROPE = HOLD_ROPE;

  01bee	c7 05 34 00 00
	00 0e 00 00 00	 mov	 DWORD PTR ?enumHOLD@@3UStrEnumHOLD@@A+52, 14 ; 0000000eH

; 953  : 	enumHOLD.POLE = HOLD_POLE;

  01bf8	c7 05 38 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?enumHOLD@@3UStrEnumHOLD@@A+56, 15 ; 0000000fH

; 954  : 	enumHOLD.ANY_TORCH = HOLD_ANY_TORCH;

  01c02	89 3d 3c 00 00
	00		 mov	 DWORD PTR ?enumHOLD@@3UStrEnumHOLD@@A+60, edi

; 955  : 	enumHOLD.KAYAK = HOLD_KAYAK;

  01c08	c7 05 40 00 00
	00 11 00 00 00	 mov	 DWORD PTR ?enumHOLD@@3UStrEnumHOLD@@A+64, 17 ; 00000011H

; 956  : 
; 957  : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumLLF----------------------
; 958  : 	enumLLF.GROUND = LLF_GROUND;

  01c12	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?enumLLF@@3UStrEnumLLF@@A, 0

; 959  : 	enumLLF.UNDERWATER = LLF_UNDERWATER;

  01c1c	a3 04 00 00 00	 mov	 DWORD PTR ?enumLLF@@3UStrEnumLLF@@A+4, eax

; 960  : 	enumLLF.FLOATING = LLF_FLOATING;

  01c21	89 0d 08 00 00
	00		 mov	 DWORD PTR ?enumLLF@@3UStrEnumLLF@@A+8, ecx

; 961  : 	enumLLF.DOZY = LLF_DOZY;

  01c27	c7 05 0c 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?enumLLF@@3UStrEnumLLF@@A+12, 3

; 962  : 	enumLLF.LOW_WATER = LLF_LOW_WATER;

  01c31	89 15 10 00 00
	00		 mov	 DWORD PTR ?enumLLF@@3UStrEnumLLF@@A+16, edx

; 963  : 
; 964  : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumSCANF----------------------
; 965  : 	enumSCANF.HEAVY = SCANF_HEAVY;

  01c37	c7 05 00 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?enumSCANF@@3UStrEnumSCANF@@A, 256 ; 00000100H

; 966  : 	enumSCANF.TEMP_ONE_SHOT = SCANF_TEMP_ONE_SHOT;

  01c41	c7 05 04 00 00
	00 00 02 00 00	 mov	 DWORD PTR ?enumSCANF@@3UStrEnumSCANF@@A+4, 512 ; 00000200H

; 967  : 	enumSCANF.BUTTON_ONE_SHOT = SCANF_BUTTON_ONE_SHOT;

  01c4b	c7 05 08 00 00
	00 00 04 00 00	 mov	 DWORD PTR ?enumSCANF@@3UStrEnumSCANF@@A+8, 1024 ; 00000400H

; 968  : 	enumSCANF.YET_TO_PERFORM = SCANF_YET_TO_PERFORM;

  01c55	c7 05 0c 00 00
	00 00 08 00 00	 mov	 DWORD PTR ?enumSCANF@@3UStrEnumSCANF@@A+12, 2048 ; 00000800H

; 969  : 	enumSCANF.SCRIPT_TRIGGER = SCANF_SCRIPT_TRIGGER;

  01c5f	c7 05 10 00 00
	00 00 10 00 00	 mov	 DWORD PTR ?enumSCANF@@3UStrEnumSCANF@@A+16, 4096 ; 00001000H

; 970  : 	enumSCANF.DIRECT_CALL = SCANF_DIRECT_CALL;

  01c69	c7 05 14 00 00
	00 00 20 00 00	 mov	 DWORD PTR ?enumSCANF@@3UStrEnumSCANF@@A+20, 8192 ; 00002000H

; 971  : 	enumSCANF.FLOOR_DATA = SCANF_FLOOR_DATA;

  01c73	c7 05 18 00 00
	00 00 40 00 00	 mov	 DWORD PTR ?enumSCANF@@3UStrEnumSCANF@@A+24, 16384 ; 00004000H

; 972  : 	enumSCANF.ANIM_COMMAND = SCANF_ANIM_COMMAND;

  01c7d	c7 05 1c 00 00
	00 00 80 00 00	 mov	 DWORD PTR ?enumSCANF@@3UStrEnumSCANF@@A+28, 32768 ; 00008000H

; 973  : 
; 974  : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumMESH----------------------
; 975  : 	enumMESH.BUTT = MESH_BUTT;

  01c87	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?enumMESH@@3UStrEnumMESH@@A, 0

; 976  : 	enumMESH.RIGHT_THIGH = MESH_RIGHT_THIGH;

  01c91	a3 04 00 00 00	 mov	 DWORD PTR ?enumMESH@@3UStrEnumMESH@@A+4, eax

; 977  : 	enumMESH.RIGHT_CALF = MESH_RIGHT_CALF;

  01c96	89 0d 08 00 00
	00		 mov	 DWORD PTR ?enumMESH@@3UStrEnumMESH@@A+8, ecx

; 978  : 	enumMESH.RIGHT_FOOT = MESH_RIGHT_FOOT;

  01c9c	c7 05 0c 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?enumMESH@@3UStrEnumMESH@@A+12, 3

; 979  : 	enumMESH.LEFT_THIGH = MESH_LEFT_THIGH;

  01ca6	89 15 10 00 00
	00		 mov	 DWORD PTR ?enumMESH@@3UStrEnumMESH@@A+16, edx

; 980  : 	enumMESH.LEFT_CALF = MESH_LEFT_CALF;

  01cac	c7 05 14 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?enumMESH@@3UStrEnumMESH@@A+20, 5

; 981  : 	enumMESH.LEFT_FOOT = MESH_LEFT_FOOT;

  01cb6	c7 05 18 00 00
	00 06 00 00 00	 mov	 DWORD PTR ?enumMESH@@3UStrEnumMESH@@A+24, 6

; 982  : 	enumMESH.CHEST = MESH_CHEST;

  01cc0	c7 05 1c 00 00
	00 07 00 00 00	 mov	 DWORD PTR ?enumMESH@@3UStrEnumMESH@@A+28, 7

; 983  : 	enumMESH.RIGHT_ARM = MESH_RIGHT_ARM;

  01cca	89 35 20 00 00
	00		 mov	 DWORD PTR ?enumMESH@@3UStrEnumMESH@@A+32, esi

; 984  : 	enumMESH.RIGHT_FOREARM = MESH_RIGHT_FOREARM;

  01cd0	c7 05 24 00 00
	00 09 00 00 00	 mov	 DWORD PTR ?enumMESH@@3UStrEnumMESH@@A+36, 9

; 985  : 	enumMESH.RIGHT_HAND = MESH_RIGHT_HAND;

  01cda	c7 05 28 00 00
	00 0a 00 00 00	 mov	 DWORD PTR ?enumMESH@@3UStrEnumMESH@@A+40, 10 ; 0000000aH

; 986  : 	enumMESH.LEFT_ARM = MESH_LEFT_ARM;

  01ce4	c7 05 2c 00 00
	00 0b 00 00 00	 mov	 DWORD PTR ?enumMESH@@3UStrEnumMESH@@A+44, 11 ; 0000000bH

; 987  : 	enumMESH.LEFT_FOREARM = MESH_LEFT_FOREARM;

  01cee	c7 05 30 00 00
	00 0c 00 00 00	 mov	 DWORD PTR ?enumMESH@@3UStrEnumMESH@@A+48, 12 ; 0000000cH

; 988  : 	enumMESH.LEFT_HAND = MESH_LEFT_HAND;

  01cf8	c7 05 34 00 00
	00 0d 00 00 00	 mov	 DWORD PTR ?enumMESH@@3UStrEnumMESH@@A+52, 13 ; 0000000dH

; 989  : 	enumMESH.HEAD = MESH_HEAD;

  01d02	c7 05 38 00 00
	00 0e 00 00 00	 mov	 DWORD PTR ?enumMESH@@3UStrEnumMESH@@A+56, 14 ; 0000000eH

; 990  : 
; 991  : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumTRET----------------------
; 992  : 	enumTRET.PERFORM_ALWAYS = TRET_PERFORM_ALWAYS;

  01d0c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?enumTRET@@3UStrEnumTRET@@A, 0

; 993  : 	enumTRET.PERFORM_ONCE_AND_GO = TRET_PERFORM_ONCE_AND_GO;

  01d16	a3 04 00 00 00	 mov	 DWORD PTR ?enumTRET@@3UStrEnumTRET@@A+4, eax

; 994  : 	enumTRET.PERFORM_NEVER_MORE = TRET_PERFORM_NEVER_MORE;

  01d1b	89 0d 08 00 00
	00		 mov	 DWORD PTR ?enumTRET@@3UStrEnumTRET@@A+8, ecx

; 995  : 	enumTRET.EXECUTE_ORIGINAL = TRET_EXECUTE_ORIGINAL;

  01d21	c7 05 0c 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?enumTRET@@3UStrEnumTRET@@A+12, 3

; 996  : 
; 997  : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumCTRET----------------------
; 998  : 	enumCTRET.IS_TRUE = CTRET_IS_TRUE;

  01d2b	a3 00 00 00 00	 mov	 DWORD PTR ?enumCTRET@@3UStrEnumCTRET@@A, eax

; 999  : 	enumCTRET.EXTRA_PARAM = CTRET_EXTRA_PARAM;

  01d30	89 0d 04 00 00
	00		 mov	 DWORD PTR ?enumCTRET@@3UStrEnumCTRET@@A+4, ecx

; 1000 : 	enumCTRET.ON_MOVEABLE = CTRET_ON_MOVEABLE;

  01d36	89 15 08 00 00
	00		 mov	 DWORD PTR ?enumCTRET@@3UStrEnumCTRET@@A+8, edx

; 1001 : 	enumCTRET.PERFORM_ALWAYS = CTRET_PERFORM_ALWAYS;

  01d3c	89 35 0c 00 00
	00		 mov	 DWORD PTR ?enumCTRET@@3UStrEnumCTRET@@A+12, esi

; 1002 : 	enumCTRET.ONLY_ONCE_ON_TRUE = CTRET_ONLY_ONCE_ON_TRUE;

  01d42	89 3d 10 00 00
	00		 mov	 DWORD PTR ?enumCTRET@@3UStrEnumCTRET@@A+16, edi

; 1003 : 	enumCTRET.NEVER_MORE_ON_TRUE = CTRET_NEVER_MORE_ON_TRUE;

  01d48	89 1d 14 00 00
	00		 mov	 DWORD PTR ?enumCTRET@@3UStrEnumCTRET@@A+20, ebx

; 1004 : 	enumCTRET.PERFORM_ONCE_AND_GO = CTRET_PERFORM_ONCE_AND_GO;

  01d4e	c7 05 18 00 00
	00 40 00 00 00	 mov	 DWORD PTR ?enumCTRET@@3UStrEnumCTRET@@A+24, 64 ; 00000040H

; 1005 : 	enumCTRET.EXECUTE_ORIGINAL = CTRET_EXECUTE_ORIGINAL;

  01d58	c7 05 1c 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?enumCTRET@@3UStrEnumCTRET@@A+28, 128 ; 00000080H

; 1006 : 
; 1007 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumSRET----------------------
; 1008 : 	enumSRET.OK = SRET_OK;

  01d62	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?enumSRET@@3UStrEnumSRET@@A, 0

; 1009 : 	enumSRET.SKIP_ORIGINAL = SRET_SKIP_ORIGINAL;

  01d6c	a3 04 00 00 00	 mov	 DWORD PTR ?enumSRET@@3UStrEnumSRET@@A+4, eax

; 1010 : 	enumSRET.SKIP_TRNG_CODE = SRET_SKIP_TRNG_CODE;

  01d71	89 0d 08 00 00
	00		 mov	 DWORD PTR ?enumSRET@@3UStrEnumSRET@@A+8, ecx

; 1011 : 
; 1012 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumJOINT----------------------
; 1013 : 	enumJOINT.LEFT_THIGH = JOINT_LEFT_THIGH;

  01d77	a3 00 00 00 00	 mov	 DWORD PTR ?enumJOINT@@3UStrEnumJOINT@@A, eax

; 1014 : 	enumJOINT.LEFT_KNEE = JOINT_LEFT_KNEE;

  01d7c	89 0d 04 00 00
	00		 mov	 DWORD PTR ?enumJOINT@@3UStrEnumJOINT@@A+4, ecx

; 1015 : 	enumJOINT.LEFT_ANCKLE = JOINT_LEFT_ANCKLE;

  01d82	c7 05 08 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?enumJOINT@@3UStrEnumJOINT@@A+8, 3

; 1016 : 	enumJOINT.RIGHT_THIGH = JOINT_RIGHT_THIGH;

  01d8c	89 15 0c 00 00
	00		 mov	 DWORD PTR ?enumJOINT@@3UStrEnumJOINT@@A+12, edx

; 1017 : 	enumJOINT.RIGHT_KNEE = JOINT_RIGHT_KNEE;

  01d92	c7 05 10 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?enumJOINT@@3UStrEnumJOINT@@A+16, 5

; 1018 : 	enumJOINT.RIGHT_ANCKLE = JOINT_RIGHT_ANCKLE;

  01d9c	c7 05 14 00 00
	00 06 00 00 00	 mov	 DWORD PTR ?enumJOINT@@3UStrEnumJOINT@@A+20, 6

; 1019 : 	enumJOINT.ABDOMEN = JOINT_ABDOMEN;

  01da6	c7 05 18 00 00
	00 07 00 00 00	 mov	 DWORD PTR ?enumJOINT@@3UStrEnumJOINT@@A+24, 7

; 1020 : 	enumJOINT.NECK = JOINT_NECK;

  01db0	89 35 1c 00 00
	00		 mov	 DWORD PTR ?enumJOINT@@3UStrEnumJOINT@@A+28, esi

; 1021 : 	enumJOINT.LEFT_SHOULDER = JOINT_LEFT_SHOULDER;

  01db6	c7 05 20 00 00
	00 09 00 00 00	 mov	 DWORD PTR ?enumJOINT@@3UStrEnumJOINT@@A+32, 9

; 1022 : 	enumJOINT.LEFT_ELBOW = JOINT_LEFT_ELBOW;

  01dc0	c7 05 24 00 00
	00 0a 00 00 00	 mov	 DWORD PTR ?enumJOINT@@3UStrEnumJOINT@@A+36, 10 ; 0000000aH

; 1023 : 	enumJOINT.LEFT_WRIST = JOINT_LEFT_WRIST;

  01dca	c7 05 28 00 00
	00 0b 00 00 00	 mov	 DWORD PTR ?enumJOINT@@3UStrEnumJOINT@@A+40, 11 ; 0000000bH

; 1024 : 	enumJOINT.RIGHT_SHOULDER = JOINT_RIGHT_SHOULDER;

  01dd4	c7 05 2c 00 00
	00 0c 00 00 00	 mov	 DWORD PTR ?enumJOINT@@3UStrEnumJOINT@@A+44, 12 ; 0000000cH

; 1025 : 	enumJOINT.RIGHT_ELBOW = JOINT_RIGHT_ELBOW;

  01dde	c7 05 30 00 00
	00 0d 00 00 00	 mov	 DWORD PTR ?enumJOINT@@3UStrEnumJOINT@@A+48, 13 ; 0000000dH

; 1026 : 	enumJOINT.RIGHT_WRIST = JOINT_RIGHT_WRIST;

  01de8	c7 05 34 00 00
	00 0e 00 00 00	 mov	 DWORD PTR ?enumJOINT@@3UStrEnumJOINT@@A+52, 14 ; 0000000eH

; 1027 : 
; 1028 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumSC----------------------
; 1029 : 	enumSC.NORMAL = SC_NORMAL;

  01df2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?enumSC@@3UStrEnumSC@@A, 0

; 1030 : 	enumSC.HALF_WIDTH = SC_HALF_WIDTH;

  01dfc	a3 04 00 00 00	 mov	 DWORD PTR ?enumSC@@3UStrEnumSC@@A+4, eax

; 1031 : 	enumSC.HALF_HEIGHT = SC_HALF_HEIGHT;

  01e01	89 0d 08 00 00
	00		 mov	 DWORD PTR ?enumSC@@3UStrEnumSC@@A+8, ecx

; 1032 : 	enumSC.HALF_SIZE = SC_HALF_SIZE;

  01e07	c7 05 0c 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?enumSC@@3UStrEnumSC@@A+12, 3

; 1033 : 	enumSC.DOUBLE_WIDTH = SC_DOUBLE_WIDTH;

  01e11	89 15 10 00 00
	00		 mov	 DWORD PTR ?enumSC@@3UStrEnumSC@@A+16, edx

; 1034 : 	enumSC.DOUBLE_HEIGHT = SC_DOUBLE_HEIGHT;

  01e17	c7 05 14 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?enumSC@@3UStrEnumSC@@A+20, 5

; 1035 : 	enumSC.DOUBLE_SIZE = SC_DOUBLE_SIZE;

  01e21	c7 05 18 00 00
	00 06 00 00 00	 mov	 DWORD PTR ?enumSC@@3UStrEnumSC@@A+24, 6

; 1036 : 
; 1037 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumSTRING----------------------
; 1038 : 	enumSTRING.NG = STRING_NG;

  01e2b	c7 05 00 00 00
	00 00 80 00 00	 mov	 DWORD PTR ?enumSTRING@@3UStrEnumSTRING@@A, 32768 ; 00008000H

; 1039 : 	enumSTRING.BOTTOM_CENTER = STRING_BOTTOM_CENTER;

  01e35	a3 04 00 00 00	 mov	 DWORD PTR ?enumSTRING@@3UStrEnumSTRING@@A+4, eax

; 1040 : 	enumSTRING.TOP_CENTER = STRING_TOP_CENTER;

  01e3a	89 0d 08 00 00
	00		 mov	 DWORD PTR ?enumSTRING@@3UStrEnumSTRING@@A+8, ecx

; 1041 : 	enumSTRING.CENTER_CENTER = STRING_CENTER_CENTER;

  01e40	c7 05 0c 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?enumSTRING@@3UStrEnumSTRING@@A+12, 3

; 1042 : 	enumSTRING.TOP_LEFT = STRING_TOP_LEFT;

  01e4a	89 15 10 00 00
	00		 mov	 DWORD PTR ?enumSTRING@@3UStrEnumSTRING@@A+16, edx

; 1043 : 	enumSTRING.TOP_RIGHT = STRING_TOP_RIGHT;

  01e50	c7 05 14 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?enumSTRING@@3UStrEnumSTRING@@A+20, 5

; 1044 : 	enumSTRING.BOTTOM_LEFT = STRING_BOTTOM_LEFT;

  01e5a	c7 05 18 00 00
	00 06 00 00 00	 mov	 DWORD PTR ?enumSTRING@@3UStrEnumSTRING@@A+24, 6

; 1045 : 	enumSTRING.BOTTOM_RIGHT = STRING_BOTTOM_RIGHT;

  01e64	c7 05 1c 00 00
	00 07 00 00 00	 mov	 DWORD PTR ?enumSTRING@@3UStrEnumSTRING@@A+28, 7

; 1046 : 	enumSTRING.DOWN_DAMAGE_BAR = STRING_DOWN_DAMAGE_BAR;

  01e6e	89 35 20 00 00
	00		 mov	 DWORD PTR ?enumSTRING@@3UStrEnumSTRING@@A+32, esi

; 1047 : 	enumSTRING.DOWN_COLD_BAR = STRING_DOWN_COLD_BAR;

  01e74	c7 05 24 00 00
	00 09 00 00 00	 mov	 DWORD PTR ?enumSTRING@@3UStrEnumSTRING@@A+36, 9

; 1048 : 	enumSTRING.DOWN_LEFT_BARS = STRING_DOWN_LEFT_BARS;

  01e7e	c7 05 28 00 00
	00 0a 00 00 00	 mov	 DWORD PTR ?enumSTRING@@3UStrEnumSTRING@@A+40, 10 ; 0000000aH

; 1049 : 	enumSTRING.DOWN_RIGHT_BARS = STRING_DOWN_RIGHT_BARS;

  01e88	c7 05 2c 00 00
	00 0b 00 00 00	 mov	 DWORD PTR ?enumSTRING@@3UStrEnumSTRING@@A+44, 11 ; 0000000bH

; 1050 : 
; 1051 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumADD----------------------
; 1052 : 	enumADD.FLAME = ADD_FLAME;

  01e92	a3 00 00 00 00	 mov	 DWORD PTR ?enumADD@@3UStrEnumADD@@A, eax

; 1053 : 	enumADD.SMOKE = ADD_SMOKE;

  01e97	89 0d 04 00 00
	00		 mov	 DWORD PTR ?enumADD@@3UStrEnumADD@@A+4, ecx

; 1054 : 	enumADD.BLOOD = ADD_BLOOD;

  01e9d	c7 05 08 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?enumADD@@3UStrEnumADD@@A+8, 3

; 1055 : 	enumADD.MIST = ADD_MIST;

  01ea7	89 15 0c 00 00
	00		 mov	 DWORD PTR ?enumADD@@3UStrEnumADD@@A+12, edx

; 1056 : 	enumADD.LIGHT_FLAT = ADD_LIGHT_FLAT;

  01ead	c7 05 10 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?enumADD@@3UStrEnumADD@@A+16, 5

; 1057 : 	enumADD.LIGHT_BLINK = ADD_LIGHT_BLINK;

  01eb7	c7 05 14 00 00
	00 06 00 00 00	 mov	 DWORD PTR ?enumADD@@3UStrEnumADD@@A+20, 6

; 1058 : 	enumADD.LIGHT_SPOT = ADD_LIGHT_SPOT;

  01ec1	c7 05 18 00 00
	00 07 00 00 00	 mov	 DWORD PTR ?enumADD@@3UStrEnumADD@@A+24, 7

; 1059 : 	enumADD.LIGHT_GLOVE = ADD_LIGHT_GLOVE;

  01ecb	89 35 1c 00 00
	00		 mov	 DWORD PTR ?enumADD@@3UStrEnumADD@@A+28, esi

; 1060 : 
; 1061 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumENV----------------------
; 1062 : 	enumENV.NO_BLOCK_IN_FRONT = ENV_NO_BLOCK_IN_FRONT;

  01ed1	a3 00 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A, eax

; 1063 : 	enumENV.HANG_WITH_FEET = ENV_HANG_WITH_FEET;

  01ed6	89 0d 04 00 00
	00		 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+4, ecx

; 1064 : 	enumENV.HOLE_FLOOR_IN_FRONT = ENV_HOLE_FLOOR_IN_FRONT;

  01edc	c7 05 08 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+8, 3

; 1065 : 	enumENV.MONKEY_CEILING = ENV_MONKEY_CEILING;

  01ee6	89 15 0c 00 00
	00		 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+12, edx

; 1066 : 	enumENV.CLIMB_WALL_IN_FRONT = ENV_CLIMB_WALL_IN_FRONT;

  01eec	c7 05 10 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+16, 5

; 1067 : 	enumENV.CLIMB_WALL_AT_RIGHT = ENV_CLIMB_WALL_AT_RIGHT;

  01ef6	c7 05 14 00 00
	00 06 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+20, 6

; 1068 : 	enumENV.CLIMB_WALL_AT_LEFT = ENV_CLIMB_WALL_AT_LEFT;

  01f00	c7 05 18 00 00
	00 07 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+24, 7

; 1069 : 	enumENV.HOLE_IN_FRONT_CEILING_CLIMB = ENV_HOLE_IN_FRONT_CEILING_CLIMB;

  01f0a	89 35 1c 00 00
	00		 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+28, esi

; 1070 : 	enumENV.HOLE_BACK_CEILING_CLIMB = ENV_HOLE_BACK_CEILING_CLIMB;

  01f10	c7 05 20 00 00
	00 09 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+32, 9

; 1071 : 	enumENV.NO_BLOCK_AT_RIGHT = ENV_NO_BLOCK_AT_RIGHT;

  01f1a	c7 05 24 00 00
	00 0a 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+36, 10 ; 0000000aH

; 1072 : 	enumENV.NO_BLOCK_AT_LEFT = ENV_NO_BLOCK_AT_LEFT;

  01f24	c7 05 28 00 00
	00 0b 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+40, 11 ; 0000000bH

; 1073 : 	enumENV.HOLE_FLOOR_AT_RIGHT = ENV_HOLE_FLOOR_AT_RIGHT;

  01f2e	c7 05 2c 00 00
	00 0c 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+44, 12 ; 0000000cH

; 1074 : 	enumENV.HOLE_FLOOR_AT_LEFT = ENV_HOLE_FLOOR_AT_LEFT;

  01f38	c7 05 30 00 00
	00 0d 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+48, 13 ; 0000000dH

; 1075 : 	enumENV.HOLE_FLOOR_BACK = ENV_HOLE_FLOOR_BACK;

  01f42	c7 05 34 00 00
	00 0e 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+52, 14 ; 0000000eH

; 1076 : 	enumENV.NO_BLOCK_BACK = ENV_NO_BLOCK_BACK;

  01f4c	c7 05 38 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+56, 15 ; 0000000fH

; 1077 : 	enumENV.CLIMB_WALL_BACK = ENV_CLIMB_WALL_BACK;

  01f56	89 3d 3c 00 00
	00		 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+60, edi

; 1078 : 	enumENV.SUPPORT_IN_FRONT_WALL = ENV_SUPPORT_IN_FRONT_WALL;

  01f5c	c7 05 40 00 00
	00 11 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+64, 17 ; 00000011H

; 1079 : 	enumENV.SUPPORT_IN_RIGHT_WALL = ENV_SUPPORT_IN_RIGHT_WALL;

  01f66	c7 05 44 00 00
	00 12 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+68, 18 ; 00000012H

; 1080 : 	enumENV.SUPPORT_IN_LEFT_WALL = ENV_SUPPORT_IN_LEFT_WALL;

  01f70	c7 05 48 00 00
	00 13 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+72, 19 ; 00000013H

; 1081 : 	enumENV.SUPPORT_IN_BACK_WALL = ENV_SUPPORT_IN_BACK_WALL;

  01f7a	c7 05 4c 00 00
	00 14 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+76, 20 ; 00000014H

; 1082 : 	enumENV.ITEM_EXTRA_IN_FRONT = ENV_ITEM_EXTRA_IN_FRONT;

  01f84	c7 05 50 00 00
	00 15 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+80, 21 ; 00000015H

; 1083 : 	enumENV.ITEM_EXTRA_OVER = ENV_ITEM_EXTRA_OVER;

  01f8e	c7 05 54 00 00
	00 16 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+84, 22 ; 00000016H

; 1084 : 	enumENV.ITEM_EXTRA_UNDER = ENV_ITEM_EXTRA_UNDER;

  01f98	c7 05 58 00 00
	00 17 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+88, 23 ; 00000017H

; 1085 : 	enumENV.MULT_CONDITION = ENV_MULT_CONDITION;

  01fa2	c7 05 5c 00 00
	00 18 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+92, 24 ; 00000018H

; 1086 : 	enumENV.HANG_LEFT_IN_CORNER = ENV_HANG_LEFT_IN_CORNER;

  01fac	c7 05 60 00 00
	00 19 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+96, 25 ; 00000019H

; 1087 : 	enumENV.HANG_LEFT_OUT_CORNER = ENV_HANG_LEFT_OUT_CORNER;

  01fb6	c7 05 64 00 00
	00 1a 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+100, 26 ; 0000001aH

; 1088 : 	enumENV.HANG_RIGHT_IN_CORNER = ENV_HANG_RIGHT_IN_CORNER;

  01fc0	c7 05 68 00 00
	00 1b 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+104, 27 ; 0000001bH

; 1089 : 	enumENV.HANG_RIGHT_OUT_CORNER = ENV_HANG_RIGHT_OUT_CORNER;

  01fca	c7 05 6c 00 00
	00 1c 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+108, 28 ; 0000001cH

; 1090 : 	enumENV.HANG_LEFT_SPACE = ENV_HANG_LEFT_SPACE;

  01fd4	c7 05 70 00 00
	00 1d 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+112, 29 ; 0000001dH

; 1091 : 	enumENV.HANG_RIGHT_SPACE = ENV_HANG_RIGHT_SPACE;

  01fde	c7 05 74 00 00
	00 1e 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+116, 30 ; 0000001eH

; 1092 : 	enumENV.DISTANCE_CEILING = ENV_DISTANCE_CEILING;

  01fe8	c7 05 78 00 00
	00 1f 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+120, 31 ; 0000001fH

; 1093 : 	enumENV.CLIMB_LEFT_IN_CORNER = ENV_CLIMB_LEFT_IN_CORNER;

  01ff2	89 1d 7c 00 00
	00		 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+124, ebx

; 1094 : 	enumENV.CLIMB_LEFT_OUT_CORNER = ENV_CLIMB_LEFT_OUT_CORNER;

  01ff8	c7 05 80 00 00
	00 21 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+128, 33 ; 00000021H

; 1095 : 	enumENV.CLIMB_RIGHT_IN_CORNER = ENV_CLIMB_RIGHT_IN_CORNER;

  02002	c7 05 84 00 00
	00 22 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+132, 34 ; 00000022H

; 1096 : 	enumENV.CLIMB_RIGHT_OUT_CORNER = ENV_CLIMB_RIGHT_OUT_CORNER;

  0200c	c7 05 88 00 00
	00 23 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+136, 35 ; 00000023H

; 1097 : 	enumENV.CLIMB_LEFT_SPACE = ENV_CLIMB_LEFT_SPACE;

  02016	c7 05 8c 00 00
	00 24 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+140, 36 ; 00000024H

; 1098 : 	enumENV.CLIMB_RIGHT_SPACE = ENV_CLIMB_RIGHT_SPACE;

  02020	c7 05 90 00 00
	00 25 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+144, 37 ; 00000025H

; 1099 : 	enumENV.MULT_OR_CONDITION = ENV_MULT_OR_CONDITION;

  0202a	c7 05 94 00 00
	00 26 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+148, 38 ; 00000026H

; 1100 : 	enumENV.DISTANCE_FLOOR = ENV_DISTANCE_FLOOR;

  02034	c7 05 98 00 00
	00 27 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+152, 39 ; 00000027H

; 1101 : 	enumENV.FRAME_NUMBER = ENV_FRAME_NUMBER;

  0203e	c7 05 9c 00 00
	00 28 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+156, 40 ; 00000028H

; 1102 : 	enumENV.VERTICAL_ORIENT = ENV_VERTICAL_ORIENT;

  02048	c7 05 a0 00 00
	00 29 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+160, 41 ; 00000029H

; 1103 : 	enumENV.ON_VEHICLE = ENV_ON_VEHICLE;

  02052	c7 05 a4 00 00
	00 2a 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+164, 42 ; 0000002aH

; 1104 : 	enumENV.FREE_HANDS = ENV_FREE_HANDS;

  0205c	c7 05 a8 00 00
	00 2b 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+168, 43 ; 0000002bH

; 1105 : 	enumENV.UNDERWATER = ENV_UNDERWATER;

  02066	c7 05 ac 00 00
	00 2c 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+172, 44 ; 0000002cH

; 1106 : 	enumENV.FLOATING = ENV_FLOATING;

  02070	c7 05 b0 00 00
	00 2d 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+176, 45 ; 0000002dH

; 1107 : 	enumENV.ONLAND = ENV_ONLAND;

  0207a	c7 05 b4 00 00
	00 2e 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+180, 46 ; 0000002eH

; 1108 : 	enumENV.IS_STILL = ENV_IS_STILL;

  02084	c7 05 b8 00 00
	00 2f 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+184, 47 ; 0000002fH

; 1109 : 	enumENV.ANIM_COMPLETE = ENV_ANIM_COMPLETE;

  0208e	c7 05 bc 00 00
	00 30 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+188, 48 ; 00000030H

; 1110 : 	enumENV.FLYING_UP = ENV_FLYING_UP;

  02098	c7 05 c0 00 00
	00 31 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+192, 49 ; 00000031H

; 1111 : 	enumENV.FLYING_DOWN = ENV_FLYING_DOWN;

  020a2	c7 05 c4 00 00
	00 32 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+196, 50 ; 00000032H

; 1112 : 	enumENV.WALL_HOLE_IN_FRONT = ENV_WALL_HOLE_IN_FRONT;

  020ac	c7 05 c8 00 00
	00 33 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+200, 51 ; 00000033H

; 1113 : 	enumENV.IN_LEFT_SIDE_SECTOR = ENV_IN_LEFT_SIDE_SECTOR;

  020b6	c7 05 cc 00 00
	00 34 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+204, 52 ; 00000034H

; 1114 : 	enumENV.IN_RIGHT_SIDE_SECTOR = ENV_IN_RIGHT_SIDE_SECTOR;

  020c0	c7 05 d0 00 00
	00 35 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+208, 53 ; 00000035H

; 1115 : 	enumENV.ITEM_EXTRA_AT_LEFT = ENV_ITEM_EXTRA_AT_LEFT;

  020ca	c7 05 d4 00 00
	00 36 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+212, 54 ; 00000036H

; 1116 : 	enumENV.ITEM_EXTRA_AT_RIGHT = ENV_ITEM_EXTRA_AT_RIGHT;

  020d4	c7 05 d8 00 00
	00 37 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+216, 55 ; 00000037H

; 1117 : 	enumENV.ITEM_TEST_POSITION = ENV_ITEM_TEST_POSITION;

  020de	c7 05 dc 00 00
	00 38 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+220, 56 ; 00000038H

; 1118 : 	enumENV.HOLD_EXTRA_ITEM_IN_HANDS = ENV_HOLD_EXTRA_ITEM_IN_HANDS;

  020e8	c7 05 e0 00 00
	00 39 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+224, 57 ; 00000039H

; 1119 : 	enumENV.CONDITION_TRIGGER_GROUP = ENV_CONDITION_TRIGGER_GROUP;

  020f2	c7 05 e4 00 00
	00 3a 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+228, 58 ; 0000003aH

; 1120 : 	enumENV.ROOM_IS = ENV_ROOM_IS;

  020fc	c7 05 e8 00 00
	00 3b 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+232, 59 ; 0000003bH

; 1121 : 	enumENV.PLAYER_IS_SLEEPING = ENV_PLAYER_IS_SLEEPING;

  02106	c7 05 ec 00 00
	00 3c 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+236, 60 ; 0000003cH

; 1122 : 	enumENV.PLAYER_WOKE_UP = ENV_PLAYER_WOKE_UP;

  02110	c7 05 f0 00 00
	00 3d 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+240, 61 ; 0000003dH

; 1123 : 	enumENV.DISTANCE_NORTH_WALL = ENV_DISTANCE_NORTH_WALL;

  0211a	c7 05 f4 00 00
	00 3e 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+244, 62 ; 0000003eH

; 1124 : 	enumENV.DISTANCE_SOUTH_WALL = ENV_DISTANCE_SOUTH_WALL;

  02124	c7 05 f8 00 00
	00 3f 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+248, 63 ; 0000003fH

; 1125 : 	enumENV.DISTANCE_EAST_WALL = ENV_DISTANCE_EAST_WALL;

  0212e	c7 05 fc 00 00
	00 40 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+252, 64 ; 00000040H

; 1126 : 	enumENV.DISTANCE_WEST_WALL = ENV_DISTANCE_WEST_WALL;

  02138	c7 05 00 01 00
	00 41 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+256, 65 ; 00000041H

; 1127 : 	enumENV.LARA_IN_MICRO_STRIP = ENV_LARA_IN_MICRO_STRIP;

  02142	c7 05 04 01 00
	00 42 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+260, 66 ; 00000042H

; 1128 : 	enumENV.NO_BOX_IN_FRONT = ENV_NO_BOX_IN_FRONT;

  0214c	c7 05 08 01 00
	00 43 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+264, 67 ; 00000043H

; 1129 : 	enumENV.NO_BOX_AT_LEFT = ENV_NO_BOX_AT_LEFT;

  02156	c7 05 0c 01 00
	00 44 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+268, 68 ; 00000044H

; 1130 : 	enumENV.NO_BOX_AT_RIGHT = ENV_NO_BOX_AT_RIGHT;

  02160	c7 05 10 01 00
	00 45 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+272, 69 ; 00000045H

; 1131 : 	enumENV.NO_BOX_BACK = ENV_NO_BOX_BACK;

  0216a	c7 05 14 01 00
	00 46 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+276, 70 ; 00000046H

; 1132 : 	enumENV.ENEMY_SEE_LARA = ENV_ENEMY_SEE_LARA;

  02174	c7 05 18 01 00
	00 47 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+280, 71 ; 00000047H

; 1133 : 	enumENV.FRAME_RANGE = ENV_FRAME_RANGE;

  0217e	c7 05 1c 01 00
	00 48 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+284, 72 ; 00000048H

; 1134 : 	enumENV.NON_TRUE = ENV_NON_TRUE;

  02188	c7 05 20 01 00
	00 80 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+288, 128 ; 00000080H

; 1135 : 	enumENV.POS_LEFT_CORNER = ENV_POS_LEFT_CORNER;

  02192	c7 05 24 01 00
	00 00 01 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+292, 256 ; 00000100H

; 1136 : 	enumENV.POS_RIGHT_CORNER = ENV_POS_RIGHT_CORNER;

  0219c	c7 05 28 01 00
	00 00 02 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+296, 512 ; 00000200H

; 1137 : 	enumENV.POS_CENTRAL = ENV_POS_CENTRAL;

  021a6	c7 05 2c 01 00
	00 00 04 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+300, 1024 ; 00000400H

; 1138 : 	enumENV.POS_HORTOGONAL = ENV_POS_HORTOGONAL;

  021b0	c7 05 30 01 00
	00 00 08 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+304, 2048 ; 00000800H

; 1139 : 	enumENV.POS_IN_THE_MIDDLE = ENV_POS_IN_THE_MIDDLE;

  021ba	c7 05 34 01 00
	00 00 10 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+308, 4096 ; 00001000H

; 1140 : 	enumENV.POS_STRIP_3 = ENV_POS_STRIP_3;

  021c4	c7 05 38 01 00
	00 00 20 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+312, 8192 ; 00002000H

; 1141 : 	enumENV.POS_STRIP_2 = ENV_POS_STRIP_2;

  021ce	c7 05 3c 01 00
	00 00 40 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+316, 16384 ; 00004000H

; 1142 : 	enumENV.POS_STRIP_1 = ENV_POS_STRIP_1;

  021d8	c7 05 40 01 00
	00 00 80 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+320, 32768 ; 00008000H

; 1143 : 	enumENV.MASK_CONDITION = ENV_MASK_CONDITION;

  021e2	c7 05 44 01 00
	00 7f 00 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+324, 127 ; 0000007fH

; 1144 : 	enumENV.MASK_FLAGS = ENV_MASK_FLAGS;

  021ec	c7 05 48 01 00
	00 80 ff 00 00	 mov	 DWORD PTR ?enumENV@@3UStrEnumENV@@A+328, 65408 ; 0000ff80H

; 1145 : 
; 1146 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumCBT----------------------
; 1147 : 	enumCBT.FIRST = CBT_FIRST;

  021f6	a3 00 00 00 00	 mov	 DWORD PTR ?enumCBT@@3UStrEnumCBT@@A, eax

; 1148 : 	enumCBT.AFTER = CBT_AFTER;

  021fb	89 0d 04 00 00
	00		 mov	 DWORD PTR ?enumCBT@@3UStrEnumCBT@@A+4, ecx

; 1149 : 	enumCBT.REPLACE = CBT_REPLACE;

  02201	89 15 08 00 00
	00		 mov	 DWORD PTR ?enumCBT@@3UStrEnumCBT@@A+8, edx

; 1150 : 	enumCBT.ASM = CBT_ASM;

  02207	89 35 0c 00 00
	00		 mov	 DWORD PTR ?enumCBT@@3UStrEnumCBT@@A+12, esi

; 1151 : 	enumCBT.PRESENT = CBT_PRESENT;

  0220d	89 3d 10 00 00
	00		 mov	 DWORD PTR ?enumCBT@@3UStrEnumCBT@@A+16, edi

; 1152 : 	enumCBT.LOOPED = CBT_LOOPED;

  02213	89 1d 14 00 00
	00		 mov	 DWORD PTR ?enumCBT@@3UStrEnumCBT@@A+20, ebx

; 1153 : 	enumCBT.ANY = CBT_ANY;

  02219	c7 05 18 00 00
	00 ff ff 00 00	 mov	 DWORD PTR ?enumCBT@@3UStrEnumCBT@@A+24, 65535 ; 0000ffffH

; 1154 : 
; 1155 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumFAN----------------------
; 1156 : 	enumFAN.MASK_FPS_UV = FAN_MASK_FPS_UV;

  02223	c7 05 00 00 00
	00 00 1f 00 00	 mov	 DWORD PTR ?enumFAN@@3UStrEnumFAN@@A, 7936 ; 00001f00H

; 1157 : 	enumFAN.MASK_UVROTATE = FAN_MASK_UVROTATE;

  0222d	c7 05 04 00 00
	00 ff 00 00 00	 mov	 DWORD PTR ?enumFAN@@3UStrEnumFAN@@A+4, 255 ; 000000ffH

; 1158 : 	enumFAN.MASK_DELAY = FAN_MASK_DELAY;

  02237	c7 05 08 00 00
	00 ff 1f 00 00	 mov	 DWORD PTR ?enumFAN@@3UStrEnumFAN@@A+8, 8191 ; 00001fffH

; 1159 : 	enumFAN.MASK_ANIM = FAN_MASK_ANIM;

  02241	c7 05 0c 00 00
	00 00 e0 00 00	 mov	 DWORD PTR ?enumFAN@@3UStrEnumFAN@@A+12, 57344 ; 0000e000H

; 1160 : 	enumFAN.FRAMES = FAN_FRAMES;

  0224b	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?enumFAN@@3UStrEnumFAN@@A+16, 0

; 1161 : 	enumFAN.P_FRAMES = FAN_P_FRAMES;

  02255	c7 05 14 00 00
	00 00 40 00 00	 mov	 DWORD PTR ?enumFAN@@3UStrEnumFAN@@A+20, 16384 ; 00004000H

; 1162 : 	enumFAN.FULL_ROTATE = FAN_FULL_ROTATE;

  0225f	c7 05 18 00 00
	00 00 80 00 00	 mov	 DWORD PTR ?enumFAN@@3UStrEnumFAN@@A+24, 32768 ; 00008000H

; 1163 : 	enumFAN.RIVER_ROTATE = FAN_RIVER_ROTATE;

  02269	c7 05 1c 00 00
	00 00 a0 00 00	 mov	 DWORD PTR ?enumFAN@@3UStrEnumFAN@@A+28, 40960 ; 0000a000H

; 1164 : 	enumFAN.HALF_ROTATE = FAN_HALF_ROTATE;

  02273	c7 05 20 00 00
	00 00 c0 00 00	 mov	 DWORD PTR ?enumFAN@@3UStrEnumFAN@@A+32, 49152 ; 0000c000H

; 1165 : 	enumFAN.ANY_ROTATE = FAN_ANY_ROTATE;

  0227d	c7 05 24 00 00
	00 00 80 00 00	 mov	 DWORD PTR ?enumFAN@@3UStrEnumFAN@@A+36, 32768 ; 00008000H

; 1166 : 	enumFAN.SET_FREE_HANDS = FAN_SET_FREE_HANDS;

  02287	a3 28 00 00 00	 mov	 DWORD PTR ?enumFAN@@3UStrEnumFAN@@A+40, eax

; 1167 : 	enumFAN.START_FROM_EXTRA_FRAME = FAN_START_FROM_EXTRA_FRAME;

  0228c	89 0d 2c 00 00
	00		 mov	 DWORD PTR ?enumFAN@@3UStrEnumFAN@@A+44, ecx

; 1168 : 	enumFAN.SET_NEUTRAL_STATE_ID = FAN_SET_NEUTRAL_STATE_ID;

  02292	89 15 30 00 00
	00		 mov	 DWORD PTR ?enumFAN@@3UStrEnumFAN@@A+48, edx

; 1169 : 	enumFAN.KEYS_AS_SCANCODE = FAN_KEYS_AS_SCANCODE;

  02298	89 35 34 00 00
	00		 mov	 DWORD PTR ?enumFAN@@3UStrEnumFAN@@A+52, esi

; 1170 : 	enumFAN.DISABLE_PUSH_AWAY = FAN_DISABLE_PUSH_AWAY;

  0229e	89 3d 38 00 00
	00		 mov	 DWORD PTR ?enumFAN@@3UStrEnumFAN@@A+56, edi

; 1171 : 	enumFAN.KEEP_NEXT_STATEID = FAN_KEEP_NEXT_STATEID;

  022a4	89 1d 3c 00 00
	00		 mov	 DWORD PTR ?enumFAN@@3UStrEnumFAN@@A+60, ebx

; 1172 : 	enumFAN.ENABLE_GRAVITY = FAN_ENABLE_GRAVITY;

  022aa	c7 05 40 00 00
	00 40 00 00 00	 mov	 DWORD PTR ?enumFAN@@3UStrEnumFAN@@A+64, 64 ; 00000040H

; 1173 : 	enumFAN.DISABLE_GRAVITY = FAN_DISABLE_GRAVITY;

  022b4	c7 05 44 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?enumFAN@@3UStrEnumFAN@@A+68, 128 ; 00000080H

; 1174 : 	enumFAN.PERFORM_TRIGGER_GROUP = FAN_PERFORM_TRIGGER_GROUP;

  022be	c7 05 48 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?enumFAN@@3UStrEnumFAN@@A+72, 256 ; 00000100H

; 1175 : 	enumFAN.SET_FREE_HANDS_TEMP = FAN_SET_FREE_HANDS_TEMP;

  022c8	c7 05 4c 00 00
	00 00 02 00 00	 mov	 DWORD PTR ?enumFAN@@3UStrEnumFAN@@A+76, 512 ; 00000200H

; 1176 : 	enumFAN.SET_BUSY_HANDS = FAN_SET_BUSY_HANDS;

  022d2	c7 05 50 00 00
	00 00 04 00 00	 mov	 DWORD PTR ?enumFAN@@3UStrEnumFAN@@A+80, 1024 ; 00000400H

; 1177 : 	enumFAN.ALIGN_TO_ENV_POS = FAN_ALIGN_TO_ENV_POS;

  022dc	c7 05 54 00 00
	00 00 08 00 00	 mov	 DWORD PTR ?enumFAN@@3UStrEnumFAN@@A+84, 2048 ; 00000800H

; 1178 : 	enumFAN.SET_ADDEFFECT = FAN_SET_ADDEFFECT;

  022e6	c7 05 58 00 00
	00 00 10 00 00	 mov	 DWORD PTR ?enumFAN@@3UStrEnumFAN@@A+88, 4096 ; 00001000H

; 1179 : 	enumFAN.RANDOM = FAN_RANDOM;

  022f0	c7 05 5c 00 00
	00 00 20 00 00	 mov	 DWORD PTR ?enumFAN@@3UStrEnumFAN@@A+92, 8192 ; 00002000H

; 1180 : 	enumFAN.SET_LARA_PLACE = FAN_SET_LARA_PLACE;

  022fa	c7 05 60 00 00
	00 00 40 00 00	 mov	 DWORD PTR ?enumFAN@@3UStrEnumFAN@@A+96, 16384 ; 00004000H

; 1181 : 
; 1182 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumFLH----------------------
; 1183 : 	enumFLH.ALMOST_FREE_HANDS = FLH_ALMOST_FREE_HANDS;

  02304	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?enumFLH@@3UStrEnumFLH@@A, 0

; 1184 : 	enumFLH.IS_GRABBING = FLH_IS_GRABBING;

  0230e	a3 04 00 00 00	 mov	 DWORD PTR ?enumFLH@@3UStrEnumFLH@@A+4, eax

; 1185 : 	enumFLH.IS_EXTRACTING = FLH_IS_EXTRACTING;

  02313	89 0d 08 00 00
	00		 mov	 DWORD PTR ?enumFLH@@3UStrEnumFLH@@A+8, ecx

; 1186 : 	enumFLH.IS_THROWING = FLH_IS_THROWING;

  02319	c7 05 0c 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?enumFLH@@3UStrEnumFLH@@A+12, 3

; 1187 : 	enumFLH.HOLDS_ITEM = FLH_HOLDS_ITEM;

  02323	89 15 10 00 00
	00		 mov	 DWORD PTR ?enumFLH@@3UStrEnumFLH@@A+16, edx

; 1188 : 
; 1189 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumCMD----------------------
; 1190 : 	enumCMD.ALL = CMD_ALL;

  02329	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?enumCMD@@3UStrEnumCMD@@A, -1

; 1191 : 	enumCMD.UP = CMD_UP;

  02333	a3 04 00 00 00	 mov	 DWORD PTR ?enumCMD@@3UStrEnumCMD@@A+4, eax

; 1192 : 	enumCMD.DOWN = CMD_DOWN;

  02338	89 0d 08 00 00
	00		 mov	 DWORD PTR ?enumCMD@@3UStrEnumCMD@@A+8, ecx

; 1193 : 	enumCMD.LEFT = CMD_LEFT;

  0233e	89 15 0c 00 00
	00		 mov	 DWORD PTR ?enumCMD@@3UStrEnumCMD@@A+12, edx

; 1194 : 	enumCMD.RIGHT = CMD_RIGHT;

  02344	89 35 10 00 00
	00		 mov	 DWORD PTR ?enumCMD@@3UStrEnumCMD@@A+16, esi

; 1195 : 	enumCMD.DUCK = CMD_DUCK;

  0234a	c7 05 14 00 00
	00 00 00 00 20	 mov	 DWORD PTR ?enumCMD@@3UStrEnumCMD@@A+20, 536870912 ; 20000000H

; 1196 : 	enumCMD.DASH = CMD_DASH;

  02354	c7 05 18 00 00
	00 00 00 00 40	 mov	 DWORD PTR ?enumCMD@@3UStrEnumCMD@@A+24, 1073741824 ; 40000000H

; 1197 : 	enumCMD.WALK = CMD_WALK;

  0235e	c7 05 1c 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?enumCMD@@3UStrEnumCMD@@A+28, 128 ; 00000080H

; 1198 : 	enumCMD.JUMP = CMD_JUMP;

  02368	89 3d 20 00 00
	00		 mov	 DWORD PTR ?enumCMD@@3UStrEnumCMD@@A+32, edi

; 1199 : 	enumCMD.ACTION = CMD_ACTION;

  0236e	c7 05 24 00 00
	00 40 00 00 00	 mov	 DWORD PTR ?enumCMD@@3UStrEnumCMD@@A+36, 64 ; 00000040H

; 1200 : 	enumCMD.DRAW_WEAPON = CMD_DRAW_WEAPON;

  02378	89 1d 28 00 00
	00		 mov	 DWORD PTR ?enumCMD@@3UStrEnumCMD@@A+40, ebx

; 1201 : 	enumCMD.USE_FLARE = CMD_USE_FLARE;

  0237e	c7 05 2c 00 00
	00 00 00 08 00	 mov	 DWORD PTR ?enumCMD@@3UStrEnumCMD@@A+44, 524288 ; 00080000H

; 1202 : 	enumCMD.LOOK = CMD_LOOK;

  02388	c7 05 30 00 00
	00 00 02 00 00	 mov	 DWORD PTR ?enumCMD@@3UStrEnumCMD@@A+48, 512 ; 00000200H

; 1203 : 	enumCMD.ROLL = CMD_ROLL;

  02392	c7 05 34 00 00
	00 00 10 00 00	 mov	 DWORD PTR ?enumCMD@@3UStrEnumCMD@@A+52, 4096 ; 00001000H

; 1204 : 	enumCMD.INVENTORY = CMD_INVENTORY;

  0239c	c7 05 38 00 00
	00 00 01 20 00	 mov	 DWORD PTR ?enumCMD@@3UStrEnumCMD@@A+56, 2097408 ; 00200100H

; 1205 : 	enumCMD.STEP_LEFT = CMD_STEP_LEFT;

  023a6	c7 05 3c 00 00
	00 80 04 00 00	 mov	 DWORD PTR ?enumCMD@@3UStrEnumCMD@@A+60, 1152 ; 00000480H

; 1206 : 	enumCMD.STEP_RIGHT = CMD_STEP_RIGHT;

  023b0	c7 05 40 00 00
	00 80 08 00 00	 mov	 DWORD PTR ?enumCMD@@3UStrEnumCMD@@A+64, 2176 ; 00000880H

; 1207 : 	enumCMD.PAUSE = CMD_PAUSE;

  023ba	c7 05 44 00 00
	00 00 20 00 00	 mov	 DWORD PTR ?enumCMD@@3UStrEnumCMD@@A+68, 8192 ; 00002000H

; 1208 : 	enumCMD.SAVE_GAME = CMD_SAVE_GAME;

  023c4	c7 05 48 00 00
	00 00 00 40 00	 mov	 DWORD PTR ?enumCMD@@3UStrEnumCMD@@A+72, 4194304 ; 00400000H

; 1209 : 	enumCMD.LOAD_GAME = CMD_LOAD_GAME;

  023ce	c7 05 4c 00 00
	00 00 00 80 00	 mov	 DWORD PTR ?enumCMD@@3UStrEnumCMD@@A+76, 8388608 ; 00800000H

; 1210 : 	enumCMD.WEAPON_KEYS = CMD_WEAPON_KEYS;

  023d8	c7 05 50 00 00
	00 00 00 00 10	 mov	 DWORD PTR ?enumCMD@@3UStrEnumCMD@@A+80, 268435456 ; 10000000H

; 1211 : 	enumCMD.ENTER = CMD_ENTER;

  023e2	c7 05 54 00 00
	00 00 00 10 00	 mov	 DWORD PTR ?enumCMD@@3UStrEnumCMD@@A+84, 1048576 ; 00100000H

; 1212 : 
; 1213 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumSRV----------------------
; 1214 : 	enumSRV.PERFORM_FLIPEFFECT = SRV_PERFORM_FLIPEFFECT;

  023ec	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A, 0

; 1215 : 	enumSRV.PERFORM_ACTION = SRV_PERFORM_ACTION;

  023f6	a3 04 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+4, eax

; 1216 : 	enumSRV.PERFORM_CONDITION = SRV_PERFORM_CONDITION;

  023fb	89 0d 08 00 00
	00		 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+8, ecx

; 1217 : 	enumSRV.PERFORM_TRIGGERGROUP_ID = SRV_PERFORM_TRIGGERGROUP_ID;

  02401	c7 05 0c 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+12, 3

; 1218 : 	enumSRV.PERFORM_EXPORTED_TRIGGER = SRV_PERFORM_EXPORTED_TRIGGER;

  0240b	89 15 10 00 00
	00		 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+16, edx

; 1219 : 	enumSRV.CREATE_TRIGGERGROUP = SRV_CREATE_TRIGGERGROUP;

  02411	c7 05 14 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+20, 5

; 1220 : 	enumSRV.CREATE_ANIMATION = SRV_CREATE_ANIMATION;

  0241b	c7 05 18 00 00
	00 07 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+24, 7

; 1221 : 	enumSRV.CREATE_ANIMATIONSLOT = SRV_CREATE_ANIMATIONSLOT;

  02425	89 35 1c 00 00
	00		 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+28, esi

; 1222 : 	enumSRV.CREATE_MULTENVCONDITION = SRV_CREATE_MULTENVCONDITION;

  0242b	c7 05 20 00 00
	00 09 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+32, 9

; 1223 : 	enumSRV.CREATE_TESTPOSITION = SRV_CREATE_TESTPOSITION;

  02435	c7 05 24 00 00
	00 0a 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+36, 10 ; 0000000aH

; 1224 : 	enumSRV.CREATE_ADDEFFECT = SRV_CREATE_ADDEFFECT;

  0243f	c7 05 28 00 00
	00 0c 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+40, 12 ; 0000000cH

; 1225 : 	enumSRV.SetReservedDataZone = SRV_SetReservedDataZone;

  02449	c7 05 2c 00 00
	00 0d 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+44, 13 ; 0000000dH

; 1226 : 	enumSRV.F_ProporzioneDistanza = SRV_F_ProporzioneDistanza;

  02453	c7 05 30 00 00
	00 0e 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+48, 14 ; 0000000eH

; 1227 : 	enumSRV.F_EseguiTriggerGroup = SRV_F_EseguiTriggerGroup;

  0245d	c7 05 34 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+52, 15 ; 0000000fH

; 1228 : 	enumSRV.F_DetectedGlobalTriggerEvent = SRV_F_DetectedGlobalTriggerEvent;

  02467	89 3d 38 00 00
	00		 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+56, edi

; 1229 : 	enumSRV.F_InviaErroreLog = SRV_F_InviaErroreLog;

  0246d	c7 05 3c 00 00
	00 11 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+60, 17 ; 00000011H

; 1230 : 	enumSRV.CREATE_PARAM_COMMAND = SRV_CREATE_PARAM_COMMAND;

  02477	c7 05 40 00 00
	00 12 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+64, 18 ; 00000012H

; 1231 : 	enumSRV.F_TestEnvCondition = SRV_F_TestEnvCondition;

  02481	c7 05 44 00 00
	00 13 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+68, 19 ; 00000013H

; 1232 : 	enumSRV.F_IsBoxSettore = SRV_F_IsBoxSettore;

  0248b	c7 05 48 00 00
	00 14 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+72, 20 ; 00000014H

; 1233 : 	enumSRV.F_VerificaTestPosition = SRV_F_VerificaTestPosition;

  02495	c7 05 4c 00 00
	00 15 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+76, 21 ; 00000015H

; 1234 : 	enumSRV.F_CollideItemConCustom = SRV_F_CollideItemConCustom;

  0249f	c7 05 50 00 00
	00 16 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+80, 22 ; 00000016H

; 1235 : 	enumSRV.F_IsCollisioneConItems = SRV_F_IsCollisioneConItems;

  024a9	c7 05 54 00 00
	00 17 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+84, 23 ; 00000017H

; 1236 : 	enumSRV.F_InviaLog = SRV_F_InviaLog;

  024b3	c7 05 58 00 00
	00 18 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+88, 24 ; 00000018H

; 1237 : 	enumSRV.F_EseguiAnimNemico = SRV_F_EseguiAnimNemico;

  024bd	c7 05 5c 00 00
	00 19 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+92, 25 ; 00000019H

; 1238 : 	enumSRV.F_CreateAIRecord = SRV_F_CreateAIRecord;

  024c7	c7 05 60 00 00
	00 1a 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+96, 26 ; 0000001aH

; 1239 : 	enumSRV.F_DeleteAIRecord = SRV_F_DeleteAIRecord;

  024d1	c7 05 64 00 00
	00 1b 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+100, 27 ; 0000001bH

; 1240 : 	enumSRV.F_CreateNewMoveable = SRV_F_CreateNewMoveable;

  024db	c7 05 68 00 00
	00 1c 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+104, 28 ; 0000001cH

; 1241 : 	enumSRV.F_DeleteNewMoveable = SRV_F_DeleteNewMoveable;

  024e5	c7 05 6c 00 00
	00 1d 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+108, 29 ; 0000001dH

; 1242 : 	enumSRV.CREATE_COLOR_RGB_COMMAND = SRV_CREATE_COLOR_RGB_COMMAND;

  024ef	c7 05 70 00 00
	00 1e 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+112, 30 ; 0000001eH

; 1243 : 	enumSRV.DeleteParamCommand = SRV_DeleteParamCommand;

  024f9	c7 05 74 00 00
	00 1f 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+116, 31 ; 0000001fH

; 1244 : 	enumSRV.DeleteTriggerGroup = SRV_DeleteTriggerGroup;

  02503	89 1d 78 00 00
	00		 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+120, ebx

; 1245 : 	enumSRV.DeleteColorRgb = SRV_DeleteColorRgb;

  02509	c7 05 7c 00 00
	00 21 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+124, 33 ; 00000021H

; 1246 : 	enumSRV.DeleteMultEnvCondition = SRV_DeleteMultEnvCondition;

  02513	c7 05 80 00 00
	00 22 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+128, 34 ; 00000022H

; 1247 : 	enumSRV.DeleteTestPosition = SRV_DeleteTestPosition;

  0251d	c7 05 84 00 00
	00 23 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+132, 35 ; 00000023H

; 1248 : 	enumSRV.DeleteAddEffect = SRV_DeleteAddEffect;

  02527	c7 05 88 00 00
	00 24 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+136, 36 ; 00000024H

; 1249 : 	enumSRV.F_DisableSaving = SRV_F_DisableSaving;

  02531	c7 05 8c 00 00
	00 25 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+140, 37 ; 00000025H

; 1250 : 	enumSRV.F_AggiungiItemMosso = SRV_F_AggiungiItemMosso;

  0253b	c7 05 90 00 00
	00 26 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+144, 38 ; 00000026H

; 1251 : 	enumSRV.F_CheckForStartMovePushable = SRV_F_CheckForStartMovePushable;

  02545	c7 05 94 00 00
	00 27 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+148, 39 ; 00000027H

; 1252 : 	enumSRV.F_CheckForEndMovePushable = SRV_F_CheckForEndMovePushable;

  0254f	c7 05 98 00 00
	00 28 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+152, 40 ; 00000028H

; 1253 : 	enumSRV.F_ExplosionOnVehicle = SRV_F_ExplosionOnVehicle;

  02559	c7 05 9c 00 00
	00 29 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+156, 41 ; 00000029H

; 1254 : 	enumSRV.F_ConvertMicroUnits = SRV_F_ConvertMicroUnits;

  02563	c7 05 a0 00 00
	00 2a 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+160, 42 ; 0000002aH

; 1255 : 	enumSRV.F_AllocateImage = SRV_F_AllocateImage;

  0256d	c7 05 a4 00 00
	00 2b 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+164, 43 ; 0000002bH

; 1256 : 	enumSRV.F_FreeImage = SRV_F_FreeImage;

  02577	c7 05 a8 00 00
	00 2c 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+168, 44 ; 0000002cH

; 1257 : 	enumSRV.F_AllocateTombHdc = SRV_F_AllocateTombHdc;

  02581	c7 05 ac 00 00
	00 2d 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+172, 45 ; 0000002dH

; 1258 : 	enumSRV.F_FreeTombHdc = SRV_F_FreeTombHdc;

  0258b	c7 05 b0 00 00
	00 2e 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+176, 46 ; 0000002eH

; 1259 : 	enumSRV.F_DrawSprite2D = SRV_F_DrawSprite2D;

  02595	c7 05 b4 00 00
	00 2f 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+180, 47 ; 0000002fH

; 1260 : 	enumSRV.F_DrawMesh3D = SRV_F_DrawMesh3D;

  0259f	c7 05 b8 00 00
	00 30 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+184, 48 ; 00000030H

; 1261 : 	enumSRV.F_DrawObject2D = SRV_F_DrawObject2D;

  025a9	c7 05 bc 00 00
	00 31 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+188, 49 ; 00000031H

; 1262 : 	enumSRV.F_PrintText = SRV_F_PrintText;

  025b3	c7 05 c0 00 00
	00 32 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+192, 50 ; 00000032H

; 1263 : 	enumSRV.F_ReadDxInput = SRV_F_ReadDxInput;

  025bd	c7 05 c4 00 00
	00 33 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+196, 51 ; 00000033H

; 1264 : 	enumSRV.F_SuspendAudioTrack = SRV_F_SuspendAudioTrack;

  025c7	c7 05 c8 00 00
	00 34 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+200, 52 ; 00000034H

; 1265 : 	enumSRV.F_ResumeAudioTrack = SRV_F_ResumeAudioTrack;

  025d1	c7 05 cc 00 00
	00 35 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+204, 53 ; 00000035H

; 1266 : 	enumSRV.F_CreateWindowsFont = SRV_F_CreateWindowsFont;

  025db	c7 05 d0 00 00
	00 36 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+208, 54 ; 00000036H

; 1267 : 	enumSRV.F_FreeWindowsFont = SRV_F_FreeWindowsFont;

  025e5	c7 05 d4 00 00
	00 37 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+212, 55 ; 00000037H

; 1268 : 	enumSRV.F_ReadInputBox = SRV_F_ReadInputBox;

  025ef	c7 05 d8 00 00
	00 38 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+216, 56 ; 00000038H

; 1269 : 	enumSRV.F_ReadNumVariable = SRV_F_ReadNumVariable;

  025f9	c7 05 dc 00 00
	00 39 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+220, 57 ; 00000039H

; 1270 : 	enumSRV.F_WriteNumVariable = SRV_F_WriteNumVariable;

  02603	c7 05 e0 00 00
	00 3a 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+224, 58 ; 0000003aH

; 1271 : 	enumSRV.F_ReadTextVariable = SRV_F_ReadTextVariable;

  0260d	c7 05 e4 00 00
	00 3b 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+228, 59 ; 0000003bH

; 1272 : 	enumSRV.F_WriteTextVariable = SRV_F_WriteTextVariable;

  02617	c7 05 e8 00 00
	00 3c 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+232, 60 ; 0000003cH

; 1273 : 	enumSRV.F_ReadMemVariable = SRV_F_ReadMemVariable;

  02621	c7 05 ec 00 00
	00 3d 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+236, 61 ; 0000003dH

; 1274 : 	enumSRV.F_WriteMemVariable = SRV_F_WriteMemVariable;

  0262b	c7 05 f0 00 00
	00 3e 00 00 00	 mov	 DWORD PTR ?enumSRV@@3UStrEnumSRV@@A+240, 62 ; 0000003eH

; 1275 : 
; 1276 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumSLEV----------------------
; 1277 : 	enumSLEV.YOUNG_LARA = SLEV_YOUNG_LARA;

  02635	a3 00 00 00 00	 mov	 DWORD PTR ?enumSLEV@@3UStrEnumSLEV@@A, eax

; 1278 : 	enumSLEV.WEATHER = SLEV_WEATHER;

  0263a	89 0d 04 00 00
	00		 mov	 DWORD PTR ?enumSLEV@@3UStrEnumSLEV@@A+4, ecx

; 1279 : 	enumSLEV.HORIZON = SLEV_HORIZON;

  02640	89 15 08 00 00
	00		 mov	 DWORD PTR ?enumSLEV@@3UStrEnumSLEV@@A+8, edx

; 1280 : 	enumSLEV.LAYER1 = SLEV_LAYER1;

  02646	89 35 0c 00 00
	00		 mov	 DWORD PTR ?enumSLEV@@3UStrEnumSLEV@@A+12, esi

; 1281 : 	enumSLEV.LAYER2 = SLEV_LAYER2;

  0264c	89 3d 10 00 00
	00		 mov	 DWORD PTR ?enumSLEV@@3UStrEnumSLEV@@A+16, edi

; 1282 : 	enumSLEV.STAR_FIELD = SLEV_STAR_FIELD;

  02652	89 1d 14 00 00
	00		 mov	 DWORD PTR ?enumSLEV@@3UStrEnumSLEV@@A+20, ebx

; 1283 : 	enumSLEV.LIGHTNING = SLEV_LIGHTNING;

  02658	c7 05 18 00 00
	00 40 00 00 00	 mov	 DWORD PTR ?enumSLEV@@3UStrEnumSLEV@@A+24, 64 ; 00000040H

; 1284 : 	enumSLEV.TRAIN = SLEV_TRAIN;

  02662	c7 05 1c 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?enumSLEV@@3UStrEnumSLEV@@A+28, 128 ; 00000080H

; 1285 : 	enumSLEV.PULSE = SLEV_PULSE;

  0266c	c7 05 20 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?enumSLEV@@3UStrEnumSLEV@@A+32, 256 ; 00000100H

; 1286 : 	enumSLEV.COL_ADD_HORIZON = SLEV_COL_ADD_HORIZON;

  02676	c7 05 24 00 00
	00 00 02 00 00	 mov	 DWORD PTR ?enumSLEV@@3UStrEnumSLEV@@A+36, 512 ; 00000200H

; 1287 : 	enumSLEV.RESET_HUB = SLEV_RESET_HUB;

  02680	c7 05 28 00 00
	00 00 04 00 00	 mov	 DWORD PTR ?enumSLEV@@3UStrEnumSLEV@@A+40, 1024 ; 00000400H

; 1288 : 	enumSLEV.LENS_FLARE = SLEV_LENS_FLARE;

  0268a	c7 05 2c 00 00
	00 00 08 00 00	 mov	 DWORD PTR ?enumSLEV@@3UStrEnumSLEV@@A+44, 2048 ; 00000800H

; 1289 : 	enumSLEV.TIMER = SLEV_TIMER;

  02694	c7 05 30 00 00
	00 00 10 00 00	 mov	 DWORD PTR ?enumSLEV@@3UStrEnumSLEV@@A+48, 4096 ; 00001000H

; 1290 : 	enumSLEV.MIRROR = SLEV_MIRROR;

  0269e	c7 05 34 00 00
	00 00 20 00 00	 mov	 DWORD PTR ?enumSLEV@@3UStrEnumSLEV@@A+52, 8192 ; 00002000H

; 1291 : 	enumSLEV.REMOVE_AMULET = SLEV_REMOVE_AMULET;

  026a8	c7 05 38 00 00
	00 00 40 00 00	 mov	 DWORD PTR ?enumSLEV@@3UStrEnumSLEV@@A+56, 16384 ; 00004000H

; 1292 : 	enumSLEV.NO_LEVEL = SLEV_NO_LEVEL;

  026b2	c7 05 3c 00 00
	00 00 80 00 00	 mov	 DWORD PTR ?enumSLEV@@3UStrEnumSLEV@@A+60, 32768 ; 00008000H

; 1293 : 
; 1294 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumSMAIN----------------------
; 1295 : 	enumSMAIN.FLY_CHEAT = SMAIN_FLY_CHEAT;

  026bc	a3 00 00 00 00	 mov	 DWORD PTR ?enumSMAIN@@3UStrEnumSMAIN@@A, eax

; 1296 : 	enumSMAIN.LOAD_SAVE = SMAIN_LOAD_SAVE;

  026c1	89 0d 04 00 00
	00		 mov	 DWORD PTR ?enumSMAIN@@3UStrEnumSMAIN@@A+4, ecx

; 1297 : 	enumSMAIN.TITLE = SMAIN_TITLE;

  026c7	89 15 08 00 00
	00		 mov	 DWORD PTR ?enumSMAIN@@3UStrEnumSMAIN@@A+8, edx

; 1298 : 	enumSMAIN.PLAY_ANY_LEVEL = SMAIN_PLAY_ANY_LEVEL;

  026cd	89 35 0c 00 00
	00		 mov	 DWORD PTR ?enumSMAIN@@3UStrEnumSMAIN@@A+12, esi

; 1299 : 	enumSMAIN.DEMO_DISK = SMAIN_DEMO_DISK;

  026d3	c7 05 10 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?enumSMAIN@@3UStrEnumSMAIN@@A+16, 128 ; 00000080H

; 1300 : 
; 1301 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumEDGX----------------------
; 1302 : 	enumEDGX.CONCISE_SCRIPT_LOG = EDGX_CONCISE_SCRIPT_LOG;

  026dd	a3 00 00 00 00	 mov	 DWORD PTR ?enumEDGX@@3UStrEnumEDGX@@A, eax

; 1303 : 	enumEDGX.SLOW_MOTION = EDGX_SLOW_MOTION;

  026e2	89 0d 04 00 00
	00		 mov	 DWORD PTR ?enumEDGX@@3UStrEnumEDGX@@A+4, ecx

; 1304 : 	enumEDGX.SWAP_VIEW = EDGX_SWAP_VIEW;

  026e8	89 15 08 00 00
	00		 mov	 DWORD PTR ?enumEDGX@@3UStrEnumEDGX@@A+8, edx

; 1305 : 	enumEDGX.LARA_CORD_IN_LOG = EDGX_LARA_CORD_IN_LOG;

  026ee	89 35 0c 00 00
	00		 mov	 DWORD PTR ?enumEDGX@@3UStrEnumEDGX@@A+12, esi

; 1306 : 	enumEDGX.TRIGGER_TIMING = EDGX_TRIGGER_TIMING;

  026f4	89 3d 10 00 00
	00		 mov	 DWORD PTR ?enumEDGX@@3UStrEnumEDGX@@A+16, edi

; 1307 : 	enumEDGX.RECORDING_DEMO = EDGX_RECORDING_DEMO;

  026fa	89 1d 14 00 00
	00		 mov	 DWORD PTR ?enumEDGX@@3UStrEnumEDGX@@A+20, ebx

; 1308 : 	enumEDGX.CUTSCENE_LOG = EDGX_CUTSCENE_LOG;

  02700	c7 05 18 00 00
	00 40 00 00 00	 mov	 DWORD PTR ?enumEDGX@@3UStrEnumEDGX@@A+24, 64 ; 00000040H

; 1309 : 	enumEDGX.ANIMATION_SLOT = EDGX_ANIMATION_SLOT;

  0270a	c7 05 1c 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?enumEDGX@@3UStrEnumEDGX@@A+28, 128 ; 00000080H

; 1310 : 
; 1311 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumDGX----------------------
; 1312 : 	enumDGX.LARA = DGX_LARA;

  02714	a3 00 00 00 00	 mov	 DWORD PTR ?enumDGX@@3UStrEnumDGX@@A, eax

; 1313 : 	enumDGX.ANIMATION = DGX_ANIMATION;

  02719	89 0d 04 00 00
	00		 mov	 DWORD PTR ?enumDGX@@3UStrEnumDGX@@A+4, ecx

; 1314 : 	enumDGX.SFX_SOUNDS = DGX_SFX_SOUNDS;

  0271f	89 15 08 00 00
	00		 mov	 DWORD PTR ?enumDGX@@3UStrEnumDGX@@A+8, edx

; 1315 : 	enumDGX.FAR_VIEW = DGX_FAR_VIEW;

  02725	89 35 0c 00 00
	00		 mov	 DWORD PTR ?enumDGX@@3UStrEnumDGX@@A+12, esi

; 1316 : 	enumDGX.AUDIO_TRACKS = DGX_AUDIO_TRACKS;

  0272b	89 3d 10 00 00
	00		 mov	 DWORD PTR ?enumDGX@@3UStrEnumDGX@@A+16, edi

; 1317 : 	enumDGX.CHEATS = DGX_CHEATS;

  02731	89 1d 14 00 00
	00		 mov	 DWORD PTR ?enumDGX@@3UStrEnumDGX@@A+20, ebx

; 1318 : 	enumDGX.FOG = DGX_FOG;

  02737	c7 05 18 00 00
	00 40 00 00 00	 mov	 DWORD PTR ?enumDGX@@3UStrEnumDGX@@A+24, 64 ; 00000040H

; 1319 : 	enumDGX.COMMON_VARIABLES = DGX_COMMON_VARIABLES;

  02741	c7 05 1c 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?enumDGX@@3UStrEnumDGX@@A+28, 128 ; 00000080H

; 1320 : 	enumDGX.STORE_VARIABLES = DGX_STORE_VARIABLES;

  0274b	c7 05 20 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?enumDGX@@3UStrEnumDGX@@A+32, 256 ; 00000100H

; 1321 : 	enumDGX.FLYBY = DGX_FLYBY;

  02755	c7 05 24 00 00
	00 00 02 00 00	 mov	 DWORD PTR ?enumDGX@@3UStrEnumDGX@@A+36, 512 ; 00000200H

; 1322 : 	enumDGX.TEXT_VARIABLES = DGX_TEXT_VARIABLES;

  0275f	c7 05 28 00 00
	00 00 04 00 00	 mov	 DWORD PTR ?enumDGX@@3UStrEnumDGX@@A+40, 1024 ; 00000400H

; 1323 : 	enumDGX.LOG_SCRIPT_COMMANDS = DGX_LOG_SCRIPT_COMMANDS;

  02769	c7 05 2c 00 00
	00 00 08 00 00	 mov	 DWORD PTR ?enumDGX@@3UStrEnumDGX@@A+44, 2048 ; 00000800H

; 1324 : 	enumDGX.WEAPON_ANIMATION = DGX_WEAPON_ANIMATION;

  02773	c7 05 30 00 00
	00 00 10 00 00	 mov	 DWORD PTR ?enumDGX@@3UStrEnumDGX@@A+48, 4096 ; 00001000H

; 1325 : 	enumDGX.ADJUSTMENT_MODE = DGX_ADJUSTMENT_MODE;

  0277d	c7 05 34 00 00
	00 00 20 00 00	 mov	 DWORD PTR ?enumDGX@@3UStrEnumDGX@@A+52, 8192 ; 00002000H

; 1326 : 	enumDGX.FPS = DGX_FPS;

  02787	c7 05 38 00 00
	00 00 40 00 00	 mov	 DWORD PTR ?enumDGX@@3UStrEnumDGX@@A+56, 16384 ; 00004000H

; 1327 : 	enumDGX.ERRORS = DGX_ERRORS;

  02791	c7 05 3c 00 00
	00 00 80 00 00	 mov	 DWORD PTR ?enumDGX@@3UStrEnumDGX@@A+60, 32768 ; 00008000H

; 1328 : 
; 1329 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumFROOM----------------------
; 1330 : 	enumFROOM.COLD = FROOM_COLD;

  0279b	c7 05 00 00 00
	00 00 10 00 00	 mov	 DWORD PTR ?enumFROOM@@3UStrEnumFROOM@@A, 4096 ; 00001000H

; 1331 : 	enumFROOM.RAIN = FROOM_RAIN;

  027a5	c7 05 04 00 00
	00 00 08 00 00	 mov	 DWORD PTR ?enumFROOM@@3UStrEnumFROOM@@A+4, 2048 ; 00000800H

; 1332 : 	enumFROOM.SNOW = FROOM_SNOW;

  027af	c7 05 08 00 00
	00 00 04 00 00	 mov	 DWORD PTR ?enumFROOM@@3UStrEnumFROOM@@A+8, 1024 ; 00000400H

; 1333 : 	enumFROOM.REFLECTION = FROOM_REFLECTION;

  027b9	c7 05 0c 00 00
	00 00 02 00 00	 mov	 DWORD PTR ?enumFROOM@@3UStrEnumFROOM@@A+12, 512 ; 00000200H

; 1334 : 	enumFROOM.MIST = FROOM_MIST;

  027c3	c7 05 10 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?enumFROOM@@3UStrEnumFROOM@@A+16, 256 ; 00000100H

; 1335 : 	enumFROOM.NON_LENS_FLARE = FROOM_NON_LENS_FLARE;

  027cd	c7 05 14 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?enumFROOM@@3UStrEnumFROOM@@A+20, 128 ; 00000080H

; 1336 : 	enumFROOM.MISTERY = FROOM_MISTERY;

  027d7	c7 05 18 00 00
	00 40 00 00 00	 mov	 DWORD PTR ?enumFROOM@@3UStrEnumFROOM@@A+24, 64 ; 00000040H

; 1337 : 	enumFROOM.OUTSIDE = FROOM_OUTSIDE;

  027e1	89 1d 1c 00 00
	00		 mov	 DWORD PTR ?enumFROOM@@3UStrEnumFROOM@@A+28, ebx

; 1338 : 	enumFROOM.DAMAGE = FROOM_DAMAGE;

  027e7	89 3d 20 00 00
	00		 mov	 DWORD PTR ?enumFROOM@@3UStrEnumFROOM@@A+32, edi

; 1339 : 	enumFROOM.HORIZON = FROOM_HORIZON;

  027ed	89 35 24 00 00
	00		 mov	 DWORD PTR ?enumFROOM@@3UStrEnumFROOM@@A+36, esi

; 1340 : 	enumFROOM.QUICKSAND = FROOM_QUICKSAND;

  027f3	89 15 28 00 00
	00		 mov	 DWORD PTR ?enumFROOM@@3UStrEnumFROOM@@A+40, edx

; 1341 : 	enumFROOM.IS_FLIPROOM = FROOM_IS_FLIPROOM;

  027f9	89 0d 2c 00 00
	00		 mov	 DWORD PTR ?enumFROOM@@3UStrEnumFROOM@@A+44, ecx

; 1342 : 	enumFROOM.WATER = FROOM_WATER;

  027ff	a3 30 00 00 00	 mov	 DWORD PTR ?enumFROOM@@3UStrEnumFROOM@@A+48, eax

; 1343 : 
; 1344 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumFIND----------------------
; 1345 : 	enumFIND.ITEM = FIND_ITEM;

  02804	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?enumFIND@@3UStrEnumFIND@@A, 0

; 1346 : 	enumFIND.STATIC = FIND_STATIC;

  0280e	a3 04 00 00 00	 mov	 DWORD PTR ?enumFIND@@3UStrEnumFIND@@A+4, eax

; 1347 : 	enumFIND.AI = FIND_AI;

  02813	89 0d 08 00 00
	00		 mov	 DWORD PTR ?enumFIND@@3UStrEnumFIND@@A+8, ecx

; 1348 : 	enumFIND.LIGHT = FIND_LIGHT;

  02819	c7 05 0c 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?enumFIND@@3UStrEnumFIND@@A+12, 3

; 1349 : 	enumFIND.CAMERA_FIXED = FIND_CAMERA_FIXED;

  02823	89 15 10 00 00
	00		 mov	 DWORD PTR ?enumFIND@@3UStrEnumFIND@@A+16, edx

; 1350 : 	enumFIND.CAMERA_FLY = FIND_CAMERA_FLY;

  02829	c7 05 14 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?enumFIND@@3UStrEnumFIND@@A+20, 5

; 1351 : 	enumFIND.ITEMS_NEARBY = FIND_ITEMS_NEARBY;

  02833	c7 05 18 00 00
	00 06 00 00 00	 mov	 DWORD PTR ?enumFIND@@3UStrEnumFIND@@A+24, 6

; 1352 : 	enumFIND.ITEMS_SECTOR = FIND_ITEMS_SECTOR;

  0283d	c7 05 1c 00 00
	00 07 00 00 00	 mov	 DWORD PTR ?enumFIND@@3UStrEnumFIND@@A+28, 7

; 1353 : 	enumFIND.STATICS_NEARBY = FIND_STATICS_NEARBY;

  02847	89 35 20 00 00
	00		 mov	 DWORD PTR ?enumFIND@@3UStrEnumFIND@@A+32, esi

; 1354 : 	enumFIND.STATICS_SECTOR = FIND_STATICS_SECTOR;

  0284d	c7 05 24 00 00
	00 09 00 00 00	 mov	 DWORD PTR ?enumFIND@@3UStrEnumFIND@@A+36, 9

; 1355 : 	enumFIND.ENEMY_COMMAND = FIND_ENEMY_COMMAND;

  02857	c7 05 28 00 00
	00 0a 00 00 00	 mov	 DWORD PTR ?enumFIND@@3UStrEnumFIND@@A+40, 10 ; 0000000aH

; 1356 : 	enumFIND.IMAGE_COMMAND = FIND_IMAGE_COMMAND;

  02861	c7 05 2c 00 00
	00 0b 00 00 00	 mov	 DWORD PTR ?enumFIND@@3UStrEnumFIND@@A+44, 11 ; 0000000bH

; 1357 : 	enumFIND.WINDOWS_FONT = FIND_WINDOWS_FONT;

  0286b	c7 05 30 00 00
	00 0c 00 00 00	 mov	 DWORD PTR ?enumFIND@@3UStrEnumFIND@@A+48, 12 ; 0000000cH

; 1358 : 	enumFIND.DIAGNOSTIC = FIND_DIAGNOSTIC;

  02875	c7 05 34 00 00
	00 0d 00 00 00	 mov	 DWORD PTR ?enumFIND@@3UStrEnumFIND@@A+52, 13 ; 0000000dH

; 1359 : 	enumFIND.PROGR_ACTION_TRNG = FIND_PROGR_ACTION_TRNG;

  0287f	c7 05 38 00 00
	00 0e 00 00 00	 mov	 DWORD PTR ?enumFIND@@3UStrEnumFIND@@A+56, 14 ; 0000000eH

; 1360 : 	enumFIND.PROGR_ACTION_MINE = FIND_PROGR_ACTION_MINE;

  02889	c7 05 3c 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?enumFIND@@3UStrEnumFIND@@A+60, 15 ; 0000000fH

; 1361 : 	enumFIND.ASSIGN_SLOT_MINE = FIND_ASSIGN_SLOT_MINE;

  02893	89 3d 40 00 00
	00		 mov	 DWORD PTR ?enumFIND@@3UStrEnumFIND@@A+64, edi

; 1362 : 
; 1363 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumSSLOT----------------------
; 1364 : 	enumSSLOT.PLANT0 = SSLOT_PLANT0;

  02899	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A, 0

; 1365 : 	enumSSLOT.PLANT1 = SSLOT_PLANT1;

  028a3	a3 04 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+4, eax

; 1366 : 	enumSSLOT.PLANT2 = SSLOT_PLANT2;

  028a8	89 0d 08 00 00
	00		 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+8, ecx

; 1367 : 	enumSSLOT.PLANT3 = SSLOT_PLANT3;

  028ae	c7 05 0c 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+12, 3

; 1368 : 	enumSSLOT.PLANT4 = SSLOT_PLANT4;

  028b8	89 15 10 00 00
	00		 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+16, edx

; 1369 : 	enumSSLOT.PLANT5 = SSLOT_PLANT5;

  028be	c7 05 14 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+20, 5

; 1370 : 	enumSSLOT.PLANT6 = SSLOT_PLANT6;

  028c8	c7 05 18 00 00
	00 06 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+24, 6

; 1371 : 	enumSSLOT.PLANT7 = SSLOT_PLANT7;

  028d2	c7 05 1c 00 00
	00 07 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+28, 7

; 1372 : 	enumSSLOT.PLANT8 = SSLOT_PLANT8;

  028dc	89 35 20 00 00
	00		 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+32, esi

; 1373 : 	enumSSLOT.PLANT9 = SSLOT_PLANT9;

  028e2	c7 05 24 00 00
	00 09 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+36, 9

; 1374 : 	enumSSLOT.FURNITURE0 = SSLOT_FURNITURE0;

  028ec	c7 05 28 00 00
	00 0a 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+40, 10 ; 0000000aH

; 1375 : 	enumSSLOT.FURNITURE1 = SSLOT_FURNITURE1;

  028f6	c7 05 2c 00 00
	00 0b 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+44, 11 ; 0000000bH

; 1376 : 	enumSSLOT.FURNITURE2 = SSLOT_FURNITURE2;

  02900	c7 05 30 00 00
	00 0c 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+48, 12 ; 0000000cH

; 1377 : 	enumSSLOT.FURNITURE3 = SSLOT_FURNITURE3;

  0290a	c7 05 34 00 00
	00 0d 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+52, 13 ; 0000000dH

; 1378 : 	enumSSLOT.FURNITURE4 = SSLOT_FURNITURE4;

  02914	c7 05 38 00 00
	00 0e 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+56, 14 ; 0000000eH

; 1379 : 	enumSSLOT.FURNITURE5 = SSLOT_FURNITURE5;

  0291e	c7 05 3c 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+60, 15 ; 0000000fH

; 1380 : 	enumSSLOT.FURNITURE6 = SSLOT_FURNITURE6;

  02928	89 3d 40 00 00
	00		 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+64, edi

; 1381 : 	enumSSLOT.FURNITURE7 = SSLOT_FURNITURE7;

  0292e	c7 05 44 00 00
	00 11 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+68, 17 ; 00000011H

; 1382 : 	enumSSLOT.FURNITURE8 = SSLOT_FURNITURE8;

  02938	c7 05 48 00 00
	00 12 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+72, 18 ; 00000012H

; 1383 : 	enumSSLOT.FURNITURE9 = SSLOT_FURNITURE9;

  02942	c7 05 4c 00 00
	00 13 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+76, 19 ; 00000013H

; 1384 : 	enumSSLOT.ROCK0 = SSLOT_ROCK0;

  0294c	c7 05 50 00 00
	00 14 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+80, 20 ; 00000014H

; 1385 : 	enumSSLOT.ROCK1 = SSLOT_ROCK1;

  02956	c7 05 54 00 00
	00 15 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+84, 21 ; 00000015H

; 1386 : 	enumSSLOT.ROCK2 = SSLOT_ROCK2;

  02960	c7 05 58 00 00
	00 16 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+88, 22 ; 00000016H

; 1387 : 	enumSSLOT.ROCK3 = SSLOT_ROCK3;

  0296a	c7 05 5c 00 00
	00 17 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+92, 23 ; 00000017H

; 1388 : 	enumSSLOT.ROCK4 = SSLOT_ROCK4;

  02974	c7 05 60 00 00
	00 18 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+96, 24 ; 00000018H

; 1389 : 	enumSSLOT.ROCK5 = SSLOT_ROCK5;

  0297e	c7 05 64 00 00
	00 19 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+100, 25 ; 00000019H

; 1390 : 	enumSSLOT.ROCK6 = SSLOT_ROCK6;

  02988	c7 05 68 00 00
	00 1a 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+104, 26 ; 0000001aH

; 1391 : 	enumSSLOT.ROCK7 = SSLOT_ROCK7;

  02992	c7 05 6c 00 00
	00 1b 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+108, 27 ; 0000001bH

; 1392 : 	enumSSLOT.ROCK8 = SSLOT_ROCK8;

  0299c	c7 05 70 00 00
	00 1c 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+112, 28 ; 0000001cH

; 1393 : 	enumSSLOT.ROCK9 = SSLOT_ROCK9;

  029a6	c7 05 74 00 00
	00 1d 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+116, 29 ; 0000001dH

; 1394 : 	enumSSLOT.ARCHITECTURE0 = SSLOT_ARCHITECTURE0;

  029b0	c7 05 78 00 00
	00 1e 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+120, 30 ; 0000001eH

; 1395 : 	enumSSLOT.ARCHITECTURE1 = SSLOT_ARCHITECTURE1;

  029ba	c7 05 7c 00 00
	00 1f 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+124, 31 ; 0000001fH

; 1396 : 	enumSSLOT.ARCHITECTURE2 = SSLOT_ARCHITECTURE2;

  029c4	89 1d 80 00 00
	00		 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+128, ebx

; 1397 : 	enumSSLOT.ARCHITECTURE3 = SSLOT_ARCHITECTURE3;

  029ca	c7 05 84 00 00
	00 21 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+132, 33 ; 00000021H

; 1398 : 	enumSSLOT.ARCHITECTURE4 = SSLOT_ARCHITECTURE4;

  029d4	c7 05 88 00 00
	00 22 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+136, 34 ; 00000022H

; 1399 : 	enumSSLOT.ARCHITECTURE5 = SSLOT_ARCHITECTURE5;

  029de	c7 05 8c 00 00
	00 23 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+140, 35 ; 00000023H

; 1400 : 	enumSSLOT.ARCHITECTURE6 = SSLOT_ARCHITECTURE6;

  029e8	c7 05 90 00 00
	00 24 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+144, 36 ; 00000024H

; 1401 : 	enumSSLOT.ARCHITECTURE7 = SSLOT_ARCHITECTURE7;

  029f2	c7 05 94 00 00
	00 25 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+148, 37 ; 00000025H

; 1402 : 	enumSSLOT.ARCHITECTURE8 = SSLOT_ARCHITECTURE8;

  029fc	c7 05 98 00 00
	00 26 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+152, 38 ; 00000026H

; 1403 : 	enumSSLOT.ARCHITECTURE9 = SSLOT_ARCHITECTURE9;

  02a06	c7 05 9c 00 00
	00 27 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+156, 39 ; 00000027H

; 1404 : 	enumSSLOT.DEBRIS0 = SSLOT_DEBRIS0;

  02a10	c7 05 a0 00 00
	00 28 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+160, 40 ; 00000028H

; 1405 : 	enumSSLOT.DEBRIS1 = SSLOT_DEBRIS1;

  02a1a	c7 05 a4 00 00
	00 29 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+164, 41 ; 00000029H

; 1406 : 	enumSSLOT.DEBRIS2 = SSLOT_DEBRIS2;

  02a24	c7 05 a8 00 00
	00 2a 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+168, 42 ; 0000002aH

; 1407 : 	enumSSLOT.DEBRIS3 = SSLOT_DEBRIS3;

  02a2e	c7 05 ac 00 00
	00 2b 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+172, 43 ; 0000002bH

; 1408 : 	enumSSLOT.DEBRIS4 = SSLOT_DEBRIS4;

  02a38	c7 05 b0 00 00
	00 2c 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+176, 44 ; 0000002cH

; 1409 : 	enumSSLOT.DEBRIS5 = SSLOT_DEBRIS5;

  02a42	c7 05 b4 00 00
	00 2d 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+180, 45 ; 0000002dH

; 1410 : 	enumSSLOT.DEBRIS6 = SSLOT_DEBRIS6;

  02a4c	c7 05 b8 00 00
	00 2e 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+184, 46 ; 0000002eH

; 1411 : 	enumSSLOT.DEBRIS7 = SSLOT_DEBRIS7;

  02a56	c7 05 bc 00 00
	00 2f 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+188, 47 ; 0000002fH

; 1412 : 	enumSSLOT.DEBRIS8 = SSLOT_DEBRIS8;

  02a60	c7 05 c0 00 00
	00 30 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+192, 48 ; 00000030H

; 1413 : 	enumSSLOT.DEBRIS9 = SSLOT_DEBRIS9;

  02a6a	c7 05 c4 00 00
	00 31 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+196, 49 ; 00000031H

; 1414 : 	enumSSLOT.SHATTER0 = SSLOT_SHATTER0;

  02a74	c7 05 c8 00 00
	00 32 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+200, 50 ; 00000032H

; 1415 : 	enumSSLOT.SHATTER1 = SSLOT_SHATTER1;

  02a7e	c7 05 cc 00 00
	00 33 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+204, 51 ; 00000033H

; 1416 : 	enumSSLOT.SHATTER2 = SSLOT_SHATTER2;

  02a88	c7 05 d0 00 00
	00 34 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+208, 52 ; 00000034H

; 1417 : 	enumSSLOT.SHATTER3 = SSLOT_SHATTER3;

  02a92	c7 05 d4 00 00
	00 35 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+212, 53 ; 00000035H

; 1418 : 	enumSSLOT.SHATTER4 = SSLOT_SHATTER4;

  02a9c	c7 05 d8 00 00
	00 36 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+216, 54 ; 00000036H

; 1419 : 	enumSSLOT.SHATTER5 = SSLOT_SHATTER5;

  02aa6	c7 05 dc 00 00
	00 37 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+220, 55 ; 00000037H

; 1420 : 	enumSSLOT.SHATTER6 = SSLOT_SHATTER6;

  02ab0	c7 05 e0 00 00
	00 38 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+224, 56 ; 00000038H

; 1421 : 	enumSSLOT.SHATTER7 = SSLOT_SHATTER7;

  02aba	c7 05 e4 00 00
	00 39 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+228, 57 ; 00000039H

; 1422 : 	enumSSLOT.SHATTER8 = SSLOT_SHATTER8;

  02ac4	c7 05 e8 00 00
	00 3a 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+232, 58 ; 0000003aH

; 1423 : 	enumSSLOT.SHATTER9 = SSLOT_SHATTER9;

  02ace	c7 05 ec 00 00
	00 3b 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+236, 59 ; 0000003bH

; 1424 : 	enumSSLOT.EXTRA00 = SSLOT_EXTRA00;

  02ad8	c7 05 f0 00 00
	00 3c 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+240, 60 ; 0000003cH

; 1425 : 	enumSSLOT.EXTRA01 = SSLOT_EXTRA01;

  02ae2	c7 05 f4 00 00
	00 3d 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+244, 61 ; 0000003dH

; 1426 : 	enumSSLOT.EXTRA02 = SSLOT_EXTRA02;

  02aec	c7 05 f8 00 00
	00 3e 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+248, 62 ; 0000003eH

; 1427 : 	enumSSLOT.EXTRA03 = SSLOT_EXTRA03;

  02af6	c7 05 fc 00 00
	00 3f 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+252, 63 ; 0000003fH

; 1428 : 	enumSSLOT.EXTRA04 = SSLOT_EXTRA04;

  02b00	c7 05 00 01 00
	00 40 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+256, 64 ; 00000040H

; 1429 : 	enumSSLOT.EXTRA05 = SSLOT_EXTRA05;

  02b0a	c7 05 04 01 00
	00 41 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+260, 65 ; 00000041H

; 1430 : 	enumSSLOT.EXTRA06 = SSLOT_EXTRA06;

  02b14	c7 05 08 01 00
	00 42 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+264, 66 ; 00000042H

; 1431 : 	enumSSLOT.EXTRA07 = SSLOT_EXTRA07;

  02b1e	c7 05 0c 01 00
	00 43 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+268, 67 ; 00000043H

; 1432 : 	enumSSLOT.EXTRA08 = SSLOT_EXTRA08;

  02b28	c7 05 10 01 00
	00 44 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+272, 68 ; 00000044H

; 1433 : 	enumSSLOT.EXTRA09 = SSLOT_EXTRA09;

  02b32	c7 05 14 01 00
	00 45 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+276, 69 ; 00000045H

; 1434 : 	enumSSLOT.EXTRA10 = SSLOT_EXTRA10;

  02b3c	c7 05 18 01 00
	00 46 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+280, 70 ; 00000046H

; 1435 : 	enumSSLOT.EXTRA11 = SSLOT_EXTRA11;

  02b46	c7 05 1c 01 00
	00 47 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+284, 71 ; 00000047H

; 1436 : 	enumSSLOT.EXTRA12 = SSLOT_EXTRA12;

  02b50	c7 05 20 01 00
	00 48 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+288, 72 ; 00000048H

; 1437 : 	enumSSLOT.EXTRA13 = SSLOT_EXTRA13;

  02b5a	c7 05 24 01 00
	00 49 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+292, 73 ; 00000049H

; 1438 : 	enumSSLOT.EXTRA14 = SSLOT_EXTRA14;

  02b64	c7 05 28 01 00
	00 4a 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+296, 74 ; 0000004aH

; 1439 : 	enumSSLOT.EXTRA15 = SSLOT_EXTRA15;

  02b6e	c7 05 2c 01 00
	00 4b 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+300, 75 ; 0000004bH

; 1440 : 	enumSSLOT.EXTRA16 = SSLOT_EXTRA16;

  02b78	c7 05 30 01 00
	00 4c 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+304, 76 ; 0000004cH

; 1441 : 	enumSSLOT.EXTRA17 = SSLOT_EXTRA17;

  02b82	c7 05 34 01 00
	00 4d 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+308, 77 ; 0000004dH

; 1442 : 	enumSSLOT.EXTRA18 = SSLOT_EXTRA18;

  02b8c	c7 05 38 01 00
	00 4e 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+312, 78 ; 0000004eH

; 1443 : 	enumSSLOT.EXTRA19 = SSLOT_EXTRA19;

  02b96	c7 05 3c 01 00
	00 4f 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+316, 79 ; 0000004fH

; 1444 : 	enumSSLOT.EXTRA20 = SSLOT_EXTRA20;

  02ba0	c7 05 40 01 00
	00 50 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+320, 80 ; 00000050H

; 1445 : 	enumSSLOT.EXTRA21 = SSLOT_EXTRA21;

  02baa	c7 05 44 01 00
	00 51 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+324, 81 ; 00000051H

; 1446 : 	enumSSLOT.EXTRA22 = SSLOT_EXTRA22;

  02bb4	c7 05 48 01 00
	00 52 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+328, 82 ; 00000052H

; 1447 : 	enumSSLOT.EXTRA23 = SSLOT_EXTRA23;

  02bbe	c7 05 4c 01 00
	00 53 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+332, 83 ; 00000053H

; 1448 : 	enumSSLOT.EXTRA24 = SSLOT_EXTRA24;

  02bc8	c7 05 50 01 00
	00 54 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+336, 84 ; 00000054H

; 1449 : 	enumSSLOT.EXTRA25 = SSLOT_EXTRA25;

  02bd2	c7 05 54 01 00
	00 55 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+340, 85 ; 00000055H

; 1450 : 	enumSSLOT.EXTRA26 = SSLOT_EXTRA26;

  02bdc	c7 05 58 01 00
	00 56 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+344, 86 ; 00000056H

; 1451 : 	enumSSLOT.EXTRA27 = SSLOT_EXTRA27;

  02be6	c7 05 5c 01 00
	00 57 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+348, 87 ; 00000057H

; 1452 : 	enumSSLOT.EXTRA28 = SSLOT_EXTRA28;

  02bf0	c7 05 60 01 00
	00 58 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+352, 88 ; 00000058H

; 1453 : 	enumSSLOT.EXTRA29 = SSLOT_EXTRA29;

  02bfa	c7 05 64 01 00
	00 59 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+356, 89 ; 00000059H

; 1454 : 	enumSSLOT.EXTRA30 = SSLOT_EXTRA30;

  02c04	c7 05 68 01 00
	00 5a 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+360, 90 ; 0000005aH

; 1455 : 	enumSSLOT.EXTRA31 = SSLOT_EXTRA31;

  02c0e	c7 05 6c 01 00
	00 5b 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+364, 91 ; 0000005bH

; 1456 : 	enumSSLOT.EXTRA32 = SSLOT_EXTRA32;

  02c18	c7 05 70 01 00
	00 5c 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+368, 92 ; 0000005cH

; 1457 : 	enumSSLOT.EXTRA33 = SSLOT_EXTRA33;

  02c22	c7 05 74 01 00
	00 5d 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+372, 93 ; 0000005dH

; 1458 : 	enumSSLOT.EXTRA34 = SSLOT_EXTRA34;

  02c2c	c7 05 78 01 00
	00 5e 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+376, 94 ; 0000005eH

; 1459 : 	enumSSLOT.EXTRA35 = SSLOT_EXTRA35;

  02c36	c7 05 7c 01 00
	00 5f 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+380, 95 ; 0000005fH

; 1460 : 	enumSSLOT.EXTRA36 = SSLOT_EXTRA36;

  02c40	c7 05 80 01 00
	00 60 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+384, 96 ; 00000060H

; 1461 : 	enumSSLOT.EXTRA37 = SSLOT_EXTRA37;

  02c4a	c7 05 84 01 00
	00 61 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+388, 97 ; 00000061H

; 1462 : 	enumSSLOT.EXTRA38 = SSLOT_EXTRA38;

  02c54	c7 05 88 01 00
	00 62 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+392, 98 ; 00000062H

; 1463 : 	enumSSLOT.EXTRA39 = SSLOT_EXTRA39;

  02c5e	c7 05 8c 01 00
	00 63 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+396, 99 ; 00000063H

; 1464 : 	enumSSLOT.EXTRA40 = SSLOT_EXTRA40;

  02c68	c7 05 90 01 00
	00 64 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+400, 100 ; 00000064H

; 1465 : 	enumSSLOT.EXTRA41 = SSLOT_EXTRA41;

  02c72	c7 05 94 01 00
	00 65 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+404, 101 ; 00000065H

; 1466 : 	enumSSLOT.EXTRA42 = SSLOT_EXTRA42;

  02c7c	c7 05 98 01 00
	00 66 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+408, 102 ; 00000066H

; 1467 : 	enumSSLOT.EXTRA43 = SSLOT_EXTRA43;

  02c86	c7 05 9c 01 00
	00 67 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+412, 103 ; 00000067H

; 1468 : 	enumSSLOT.EXTRA44 = SSLOT_EXTRA44;

  02c90	c7 05 a0 01 00
	00 68 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+416, 104 ; 00000068H

; 1469 : 	enumSSLOT.EXTRA45 = SSLOT_EXTRA45;

  02c9a	c7 05 a4 01 00
	00 69 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+420, 105 ; 00000069H

; 1470 : 	enumSSLOT.EXTRA46 = SSLOT_EXTRA46;

  02ca4	c7 05 a8 01 00
	00 6a 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+424, 106 ; 0000006aH

; 1471 : 	enumSSLOT.EXTRA47 = SSLOT_EXTRA47;

  02cae	c7 05 ac 01 00
	00 6b 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+428, 107 ; 0000006bH

; 1472 : 	enumSSLOT.EXTRA48 = SSLOT_EXTRA48;

  02cb8	c7 05 b0 01 00
	00 6c 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+432, 108 ; 0000006cH

; 1473 : 	enumSSLOT.EXTRA49 = SSLOT_EXTRA49;

  02cc2	c7 05 b4 01 00
	00 6d 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+436, 109 ; 0000006dH

; 1474 : 	enumSSLOT.EXTRA50 = SSLOT_EXTRA50;

  02ccc	c7 05 b8 01 00
	00 6e 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+440, 110 ; 0000006eH

; 1475 : 	enumSSLOT.EXTRA51 = SSLOT_EXTRA51;

  02cd6	c7 05 bc 01 00
	00 6f 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+444, 111 ; 0000006fH

; 1476 : 	enumSSLOT.EXTRA52 = SSLOT_EXTRA52;

  02ce0	c7 05 c0 01 00
	00 70 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+448, 112 ; 00000070H

; 1477 : 	enumSSLOT.EXTRA53 = SSLOT_EXTRA53;

  02cea	c7 05 c4 01 00
	00 71 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+452, 113 ; 00000071H

; 1478 : 	enumSSLOT.EXTRA54 = SSLOT_EXTRA54;

  02cf4	c7 05 c8 01 00
	00 72 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+456, 114 ; 00000072H

; 1479 : 	enumSSLOT.EXTRA55 = SSLOT_EXTRA55;

  02cfe	c7 05 cc 01 00
	00 73 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+460, 115 ; 00000073H

; 1480 : 	enumSSLOT.EXTRA56 = SSLOT_EXTRA56;

  02d08	c7 05 d0 01 00
	00 74 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+464, 116 ; 00000074H

; 1481 : 	enumSSLOT.EXTRA57 = SSLOT_EXTRA57;

  02d12	c7 05 d4 01 00
	00 75 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+468, 117 ; 00000075H

; 1482 : 	enumSSLOT.EXTRA58 = SSLOT_EXTRA58;

  02d1c	c7 05 d8 01 00
	00 76 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+472, 118 ; 00000076H

; 1483 : 	enumSSLOT.EXTRA59 = SSLOT_EXTRA59;

  02d26	c7 05 dc 01 00
	00 77 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+476, 119 ; 00000077H

; 1484 : 	enumSSLOT.EXTRA60 = SSLOT_EXTRA60;

  02d30	c7 05 e0 01 00
	00 78 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+480, 120 ; 00000078H

; 1485 : 	enumSSLOT.EXTRA61 = SSLOT_EXTRA61;

  02d3a	c7 05 e4 01 00
	00 79 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+484, 121 ; 00000079H

; 1486 : 	enumSSLOT.EXTRA62 = SSLOT_EXTRA62;

  02d44	c7 05 e8 01 00
	00 7a 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+488, 122 ; 0000007aH

; 1487 : 	enumSSLOT.EXTRA63 = SSLOT_EXTRA63;

  02d4e	c7 05 ec 01 00
	00 7b 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+492, 123 ; 0000007bH

; 1488 : 	enumSSLOT.EXTRA64 = SSLOT_EXTRA64;

  02d58	c7 05 f0 01 00
	00 7c 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+496, 124 ; 0000007cH

; 1489 : 	enumSSLOT.EXTRA65 = SSLOT_EXTRA65;

  02d62	c7 05 f4 01 00
	00 7d 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+500, 125 ; 0000007dH

; 1490 : 	enumSSLOT.EXTRA66 = SSLOT_EXTRA66;

  02d6c	c7 05 f8 01 00
	00 7e 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+504, 126 ; 0000007eH

; 1491 : 	enumSSLOT.EXTRA67 = SSLOT_EXTRA67;

  02d76	c7 05 fc 01 00
	00 7f 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+508, 127 ; 0000007fH

; 1492 : 	enumSSLOT.EXTRA68 = SSLOT_EXTRA68;

  02d80	c7 05 00 02 00
	00 80 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+512, 128 ; 00000080H

; 1493 : 	enumSSLOT.EXTRA69 = SSLOT_EXTRA69;

  02d8a	c7 05 04 02 00
	00 81 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+516, 129 ; 00000081H

; 1494 : 	enumSSLOT.EXTRA70 = SSLOT_EXTRA70;

  02d94	c7 05 08 02 00
	00 82 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+520, 130 ; 00000082H

; 1495 : 	enumSSLOT.EXTRA71 = SSLOT_EXTRA71;

  02d9e	c7 05 0c 02 00
	00 83 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+524, 131 ; 00000083H

; 1496 : 	enumSSLOT.EXTRA72 = SSLOT_EXTRA72;

  02da8	c7 05 10 02 00
	00 84 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+528, 132 ; 00000084H

; 1497 : 	enumSSLOT.EXTRA73 = SSLOT_EXTRA73;

  02db2	c7 05 14 02 00
	00 85 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+532, 133 ; 00000085H

; 1498 : 	enumSSLOT.EXTRA74 = SSLOT_EXTRA74;

  02dbc	c7 05 18 02 00
	00 86 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+536, 134 ; 00000086H

; 1499 : 	enumSSLOT.EXTRA75 = SSLOT_EXTRA75;

  02dc6	c7 05 1c 02 00
	00 87 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+540, 135 ; 00000087H

; 1500 : 	enumSSLOT.EXTRA76 = SSLOT_EXTRA76;

  02dd0	c7 05 20 02 00
	00 88 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+544, 136 ; 00000088H

; 1501 : 	enumSSLOT.EXTRA77 = SSLOT_EXTRA77;

  02dda	c7 05 24 02 00
	00 89 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+548, 137 ; 00000089H

; 1502 : 	enumSSLOT.EXTRA78 = SSLOT_EXTRA78;

  02de4	c7 05 28 02 00
	00 8a 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+552, 138 ; 0000008aH

; 1503 : 	enumSSLOT.EXTRA79 = SSLOT_EXTRA79;

  02dee	c7 05 2c 02 00
	00 8b 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+556, 139 ; 0000008bH

; 1504 : 	enumSSLOT.EXTRA80 = SSLOT_EXTRA80;

  02df8	c7 05 30 02 00
	00 8c 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+560, 140 ; 0000008cH

; 1505 : 	enumSSLOT.EXTRA81 = SSLOT_EXTRA81;

  02e02	c7 05 34 02 00
	00 8d 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+564, 141 ; 0000008dH

; 1506 : 	enumSSLOT.EXTRA82 = SSLOT_EXTRA82;

  02e0c	c7 05 38 02 00
	00 8e 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+568, 142 ; 0000008eH

; 1507 : 	enumSSLOT.EXTRA83 = SSLOT_EXTRA83;

  02e16	c7 05 3c 02 00
	00 8f 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+572, 143 ; 0000008fH

; 1508 : 	enumSSLOT.EXTRA84 = SSLOT_EXTRA84;

  02e20	c7 05 40 02 00
	00 90 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+576, 144 ; 00000090H

; 1509 : 	enumSSLOT.EXTRA85 = SSLOT_EXTRA85;

  02e2a	c7 05 44 02 00
	00 91 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+580, 145 ; 00000091H

; 1510 : 	enumSSLOT.EXTRA86 = SSLOT_EXTRA86;

  02e34	c7 05 48 02 00
	00 92 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+584, 146 ; 00000092H

; 1511 : 	enumSSLOT.EXTRA87 = SSLOT_EXTRA87;

  02e3e	c7 05 4c 02 00
	00 93 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+588, 147 ; 00000093H

; 1512 : 	enumSSLOT.EXTRA88 = SSLOT_EXTRA88;

  02e48	c7 05 50 02 00
	00 94 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+592, 148 ; 00000094H

; 1513 : 	enumSSLOT.EXTRA89 = SSLOT_EXTRA89;

  02e52	c7 05 54 02 00
	00 95 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+596, 149 ; 00000095H

; 1514 : 	enumSSLOT.EXTRA90 = SSLOT_EXTRA90;

  02e5c	c7 05 58 02 00
	00 96 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+600, 150 ; 00000096H

; 1515 : 	enumSSLOT.EXTRA91 = SSLOT_EXTRA91;

  02e66	c7 05 5c 02 00
	00 97 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+604, 151 ; 00000097H

; 1516 : 	enumSSLOT.EXTRA92 = SSLOT_EXTRA92;

  02e70	c7 05 60 02 00
	00 98 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+608, 152 ; 00000098H

; 1517 : 	enumSSLOT.EXTRA93 = SSLOT_EXTRA93;

  02e7a	c7 05 64 02 00
	00 99 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+612, 153 ; 00000099H

; 1518 : 	enumSSLOT.EXTRA94 = SSLOT_EXTRA94;

  02e84	c7 05 68 02 00
	00 9a 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+616, 154 ; 0000009aH

; 1519 : 	enumSSLOT.EXTRA95 = SSLOT_EXTRA95;

  02e8e	c7 05 6c 02 00
	00 9b 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+620, 155 ; 0000009bH

; 1520 : 	enumSSLOT.EXTRA96 = SSLOT_EXTRA96;

  02e98	c7 05 70 02 00
	00 9c 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+624, 156 ; 0000009cH

; 1521 : 	enumSSLOT.EXTRA97 = SSLOT_EXTRA97;

  02ea2	c7 05 74 02 00
	00 9d 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+628, 157 ; 0000009dH

; 1522 : 	enumSSLOT.EXTRA98 = SSLOT_EXTRA98;

  02eac	c7 05 78 02 00
	00 9e 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+632, 158 ; 0000009eH

; 1523 : 	enumSSLOT.EXTRA99 = SSLOT_EXTRA99;

  02eb6	c7 05 7c 02 00
	00 9f 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+636, 159 ; 0000009fH

; 1524 : 	enumSSLOT.NUMBER_STATIC_OBJECTS = SSLOT_NUMBER_STATIC_OBJECTS;

  02ec0	c7 05 80 02 00
	00 a0 00 00 00	 mov	 DWORD PTR ?enumSSLOT@@3UStrEnumSSLOT@@A+640, 160 ; 000000a0H

; 1525 : 
; 1526 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumFWEAP----------------------
; 1527 : 	enumFWEAP.PRESENT = FWEAP_PRESENT;

  02eca	a3 00 00 00 00	 mov	 DWORD PTR ?enumFWEAP@@3UStrEnumFWEAP@@A, eax

; 1528 : 	enumFWEAP.LASERSIGHT = FWEAP_LASERSIGHT;

  02ecf	89 15 04 00 00
	00		 mov	 DWORD PTR ?enumFWEAP@@3UStrEnumFWEAP@@A+4, edx

; 1529 : 	enumFWEAP.AMMO_NORMAL = FWEAP_AMMO_NORMAL;

  02ed5	89 35 08 00 00
	00		 mov	 DWORD PTR ?enumFWEAP@@3UStrEnumFWEAP@@A+8, esi

; 1530 : 	enumFWEAP.AMMO_SUPER = FWEAP_AMMO_SUPER;

  02edb	89 3d 0c 00 00
	00		 mov	 DWORD PTR ?enumFWEAP@@3UStrEnumFWEAP@@A+12, edi

; 1531 : 	enumFWEAP.AMMO_EXPLOSIVE = FWEAP_AMMO_EXPLOSIVE;

  02ee1	89 1d 10 00 00
	00		 mov	 DWORD PTR ?enumFWEAP@@3UStrEnumFWEAP@@A+16, ebx

; 1532 : 
; 1533 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumCBEET----------------------
; 1534 : 	enumCBEET.BEETLE_WITH_KEY = CBEET_BEETLE_WITH_KEY;

  02ee7	a3 00 00 00 00	 mov	 DWORD PTR ?enumCBEET@@3UStrEnumCBEET@@A, eax

; 1535 : 	enumCBEET.KEY_SINGLE = CBEET_KEY_SINGLE;

  02eec	89 0d 04 00 00
	00		 mov	 DWORD PTR ?enumCBEET@@3UStrEnumCBEET@@A+4, ecx

; 1536 : 	enumCBEET.BEETLE_SINGLE = CBEET_BEETLE_SINGLE;

  02ef2	89 15 08 00 00
	00		 mov	 DWORD PTR ?enumCBEET@@3UStrEnumCBEET@@A+8, edx

; 1537 : 
; 1538 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumWSKIN----------------------
; 1539 : 	enumWSKIN.MISSING = WSKIN_MISSING;

  02ef8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?enumWSKIN@@3UStrEnumWSKIN@@A, 0

; 1540 : 	enumWSKIN.EMPTY_WATER_SKIN = WSKIN_EMPTY_WATER_SKIN;

  02f02	a3 04 00 00 00	 mov	 DWORD PTR ?enumWSKIN@@3UStrEnumWSKIN@@A+4, eax

; 1541 : 	enumWSKIN.ONE_LITER = WSKIN_ONE_LITER;

  02f07	89 0d 08 00 00
	00		 mov	 DWORD PTR ?enumWSKIN@@3UStrEnumWSKIN@@A+8, ecx

; 1542 : 	enumWSKIN.THREE_LITERS = WSKIN_THREE_LITERS;

  02f0d	89 15 0c 00 00
	00		 mov	 DWORD PTR ?enumWSKIN@@3UStrEnumWSKIN@@A+12, edx

; 1543 : 	enumWSKIN.FIVE_LITERS = WSKIN_FIVE_LITERS;

  02f13	c7 05 10 00 00
	00 06 00 00 00	 mov	 DWORD PTR ?enumWSKIN@@3UStrEnumWSKIN@@A+16, 6

; 1544 : 
; 1545 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumCOMBO----------------------
; 1546 : 	enumCOMBO.ITEM1_FOR_PUZZLE_1 = COMBO_ITEM1_FOR_PUZZLE_1;

  02f1d	a3 00 00 00 00	 mov	 DWORD PTR ?enumCOMBO@@3UStrEnumCOMBO@@A, eax

; 1547 : 	enumCOMBO.ITEM2_FOR_PUZZLE_1 = COMBO_ITEM2_FOR_PUZZLE_1;

  02f22	89 0d 04 00 00
	00		 mov	 DWORD PTR ?enumCOMBO@@3UStrEnumCOMBO@@A+4, ecx

; 1548 : 	enumCOMBO.ITEM1_FOR_PUZZLE_2 = COMBO_ITEM1_FOR_PUZZLE_2;

  02f28	89 15 08 00 00
	00		 mov	 DWORD PTR ?enumCOMBO@@3UStrEnumCOMBO@@A+8, edx

; 1549 : 	enumCOMBO.ITEM2_FOR_PUZZLE_2 = COMBO_ITEM2_FOR_PUZZLE_2;

  02f2e	89 35 0c 00 00
	00		 mov	 DWORD PTR ?enumCOMBO@@3UStrEnumCOMBO@@A+12, esi

; 1550 : 	enumCOMBO.ITEM1_FOR_PUZZLE_3 = COMBO_ITEM1_FOR_PUZZLE_3;

  02f34	89 3d 10 00 00
	00		 mov	 DWORD PTR ?enumCOMBO@@3UStrEnumCOMBO@@A+16, edi

; 1551 : 	enumCOMBO.ITEM2_FOR_PUZZLE_3 = COMBO_ITEM2_FOR_PUZZLE_3;

  02f3a	89 1d 14 00 00
	00		 mov	 DWORD PTR ?enumCOMBO@@3UStrEnumCOMBO@@A+20, ebx

; 1552 : 	enumCOMBO.ITEM1_FOR_PUZZLE_4 = COMBO_ITEM1_FOR_PUZZLE_4;

  02f40	c7 05 18 00 00
	00 40 00 00 00	 mov	 DWORD PTR ?enumCOMBO@@3UStrEnumCOMBO@@A+24, 64 ; 00000040H

; 1553 : 	enumCOMBO.ITEM2_FOR_PUZZLE_4 = COMBO_ITEM2_FOR_PUZZLE_4;

  02f4a	c7 05 1c 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?enumCOMBO@@3UStrEnumCOMBO@@A+28, 128 ; 00000080H

; 1554 : 	enumCOMBO.ITEM1_FOR_PUZZLE_5 = COMBO_ITEM1_FOR_PUZZLE_5;

  02f54	c7 05 20 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?enumCOMBO@@3UStrEnumCOMBO@@A+32, 256 ; 00000100H

; 1555 : 	enumCOMBO.ITEM2_FOR_PUZZLE_5 = COMBO_ITEM2_FOR_PUZZLE_5;

  02f5e	c7 05 24 00 00
	00 00 02 00 00	 mov	 DWORD PTR ?enumCOMBO@@3UStrEnumCOMBO@@A+36, 512 ; 00000200H

; 1556 : 	enumCOMBO.ITEM1_FOR_PUZZLE_6 = COMBO_ITEM1_FOR_PUZZLE_6;

  02f68	c7 05 28 00 00
	00 00 04 00 00	 mov	 DWORD PTR ?enumCOMBO@@3UStrEnumCOMBO@@A+40, 1024 ; 00000400H

; 1557 : 	enumCOMBO.ITEM2_FOR_PUZZLE_6 = COMBO_ITEM2_FOR_PUZZLE_6;

  02f72	c7 05 2c 00 00
	00 00 08 00 00	 mov	 DWORD PTR ?enumCOMBO@@3UStrEnumCOMBO@@A+44, 2048 ; 00000800H

; 1558 : 	enumCOMBO.ITEM1_FOR_PUZZLE_7 = COMBO_ITEM1_FOR_PUZZLE_7;

  02f7c	c7 05 30 00 00
	00 00 10 00 00	 mov	 DWORD PTR ?enumCOMBO@@3UStrEnumCOMBO@@A+48, 4096 ; 00001000H

; 1559 : 	enumCOMBO.ITEM2_FOR_PUZZLE_7 = COMBO_ITEM2_FOR_PUZZLE_7;

  02f86	c7 05 34 00 00
	00 00 20 00 00	 mov	 DWORD PTR ?enumCOMBO@@3UStrEnumCOMBO@@A+52, 8192 ; 00002000H

; 1560 : 	enumCOMBO.ITEM1_FOR_PUZZLE_8 = COMBO_ITEM1_FOR_PUZZLE_8;

  02f90	c7 05 38 00 00
	00 00 40 00 00	 mov	 DWORD PTR ?enumCOMBO@@3UStrEnumCOMBO@@A+56, 16384 ; 00004000H

; 1561 : 	enumCOMBO.ITEM2_FOR_PUZZLE_8 = COMBO_ITEM2_FOR_PUZZLE_8;

  02f9a	c7 05 3c 00 00
	00 00 80 00 00	 mov	 DWORD PTR ?enumCOMBO@@3UStrEnumCOMBO@@A+60, 32768 ; 00008000H

; 1562 : 
; 1563 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumKCOMBO----------------------
; 1564 : 	enumKCOMBO.ITEM1_FOR_KEY_1 = KCOMBO_ITEM1_FOR_KEY_1;

  02fa4	a3 00 00 00 00	 mov	 DWORD PTR ?enumKCOMBO@@3UStrEnumKCOMBO@@A, eax

; 1565 : 	enumKCOMBO.ITEM2_FOR_KEY_1 = KCOMBO_ITEM2_FOR_KEY_1;

  02fa9	89 0d 04 00 00
	00		 mov	 DWORD PTR ?enumKCOMBO@@3UStrEnumKCOMBO@@A+4, ecx

; 1566 : 	enumKCOMBO.ITEM1_FOR_KEY_2 = KCOMBO_ITEM1_FOR_KEY_2;

  02faf	89 15 08 00 00
	00		 mov	 DWORD PTR ?enumKCOMBO@@3UStrEnumKCOMBO@@A+8, edx

; 1567 : 	enumKCOMBO.ITEM2_FOR_KEY_2 = KCOMBO_ITEM2_FOR_KEY_2;

  02fb5	89 35 0c 00 00
	00		 mov	 DWORD PTR ?enumKCOMBO@@3UStrEnumKCOMBO@@A+12, esi

; 1568 : 	enumKCOMBO.ITEM1_FOR_KEY_3 = KCOMBO_ITEM1_FOR_KEY_3;

  02fbb	89 3d 10 00 00
	00		 mov	 DWORD PTR ?enumKCOMBO@@3UStrEnumKCOMBO@@A+16, edi

; 1569 : 	enumKCOMBO.ITEM2_FOR_KEY_3 = KCOMBO_ITEM2_FOR_KEY_3;

  02fc1	89 1d 14 00 00
	00		 mov	 DWORD PTR ?enumKCOMBO@@3UStrEnumKCOMBO@@A+20, ebx

; 1570 : 	enumKCOMBO.ITEM1_FOR_KEY_4 = KCOMBO_ITEM1_FOR_KEY_4;

  02fc7	c7 05 18 00 00
	00 40 00 00 00	 mov	 DWORD PTR ?enumKCOMBO@@3UStrEnumKCOMBO@@A+24, 64 ; 00000040H

; 1571 : 	enumKCOMBO.ITEM2_FOR_KEY_4 = KCOMBO_ITEM2_FOR_KEY_4;

  02fd1	c7 05 1c 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?enumKCOMBO@@3UStrEnumKCOMBO@@A+28, 128 ; 00000080H

; 1572 : 	enumKCOMBO.ITEM1_FOR_KEY_5 = KCOMBO_ITEM1_FOR_KEY_5;

  02fdb	c7 05 20 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?enumKCOMBO@@3UStrEnumKCOMBO@@A+32, 256 ; 00000100H

; 1573 : 	enumKCOMBO.ITEM2_FOR_KEY_5 = KCOMBO_ITEM2_FOR_KEY_5;

  02fe5	c7 05 24 00 00
	00 00 02 00 00	 mov	 DWORD PTR ?enumKCOMBO@@3UStrEnumKCOMBO@@A+36, 512 ; 00000200H

; 1574 : 	enumKCOMBO.ITEM1_FOR_KEY_6 = KCOMBO_ITEM1_FOR_KEY_6;

  02fef	c7 05 28 00 00
	00 00 04 00 00	 mov	 DWORD PTR ?enumKCOMBO@@3UStrEnumKCOMBO@@A+40, 1024 ; 00000400H

; 1575 : 	enumKCOMBO.ITEM2_FOR_KEY_6 = KCOMBO_ITEM2_FOR_KEY_6;

  02ff9	c7 05 2c 00 00
	00 00 08 00 00	 mov	 DWORD PTR ?enumKCOMBO@@3UStrEnumKCOMBO@@A+44, 2048 ; 00000800H

; 1576 : 	enumKCOMBO.ITEM1_FOR_KEY_7 = KCOMBO_ITEM1_FOR_KEY_7;

  03003	c7 05 30 00 00
	00 00 10 00 00	 mov	 DWORD PTR ?enumKCOMBO@@3UStrEnumKCOMBO@@A+48, 4096 ; 00001000H

; 1577 : 	enumKCOMBO.ITEM2_FOR_KEY_7 = KCOMBO_ITEM2_FOR_KEY_7;

  0300d	c7 05 34 00 00
	00 00 20 00 00	 mov	 DWORD PTR ?enumKCOMBO@@3UStrEnumKCOMBO@@A+52, 8192 ; 00002000H

; 1578 : 	enumKCOMBO.ITEM1_FOR_KEY_8 = KCOMBO_ITEM1_FOR_KEY_8;

  03017	c7 05 38 00 00
	00 00 40 00 00	 mov	 DWORD PTR ?enumKCOMBO@@3UStrEnumKCOMBO@@A+56, 16384 ; 00004000H

; 1579 : 	enumKCOMBO.ITEM2_FOR_KEY_8 = KCOMBO_ITEM2_FOR_KEY_8;

  03021	c7 05 3c 00 00
	00 00 80 00 00	 mov	 DWORD PTR ?enumKCOMBO@@3UStrEnumKCOMBO@@A+60, 32768 ; 00008000H

; 1580 : 
; 1581 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumEX16----------------------
; 1582 : 	enumEX16.EXIST_1 = EX16_EXIST_1;

  0302b	a3 00 00 00 00	 mov	 DWORD PTR ?enumEX16@@3UStrEnumEX16@@A, eax

; 1583 : 	enumEX16.EXIST_2 = EX16_EXIST_2;

  03030	89 0d 04 00 00
	00		 mov	 DWORD PTR ?enumEX16@@3UStrEnumEX16@@A+4, ecx

; 1584 : 	enumEX16.EXIST_3 = EX16_EXIST_3;

  03036	89 15 08 00 00
	00		 mov	 DWORD PTR ?enumEX16@@3UStrEnumEX16@@A+8, edx

; 1585 : 	enumEX16.EXIST_4 = EX16_EXIST_4;

  0303c	89 35 0c 00 00
	00		 mov	 DWORD PTR ?enumEX16@@3UStrEnumEX16@@A+12, esi

; 1586 : 	enumEX16.EXIST_5 = EX16_EXIST_5;

  03042	89 3d 10 00 00
	00		 mov	 DWORD PTR ?enumEX16@@3UStrEnumEX16@@A+16, edi

; 1587 : 	enumEX16.EXIST_6 = EX16_EXIST_6;

  03048	89 1d 14 00 00
	00		 mov	 DWORD PTR ?enumEX16@@3UStrEnumEX16@@A+20, ebx

; 1588 : 	enumEX16.EXIST_7 = EX16_EXIST_7;

  0304e	c7 05 18 00 00
	00 40 00 00 00	 mov	 DWORD PTR ?enumEX16@@3UStrEnumEX16@@A+24, 64 ; 00000040H

; 1589 : 	enumEX16.EXIST_8 = EX16_EXIST_8;

  03058	c7 05 1c 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?enumEX16@@3UStrEnumEX16@@A+28, 128 ; 00000080H

; 1590 : 	enumEX16.EXIST_9 = EX16_EXIST_9;

  03062	c7 05 20 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?enumEX16@@3UStrEnumEX16@@A+32, 256 ; 00000100H

; 1591 : 	enumEX16.EXIST_10 = EX16_EXIST_10;

  0306c	c7 05 24 00 00
	00 00 02 00 00	 mov	 DWORD PTR ?enumEX16@@3UStrEnumEX16@@A+36, 512 ; 00000200H

; 1592 : 	enumEX16.EXIST_11 = EX16_EXIST_11;

  03076	c7 05 28 00 00
	00 00 04 00 00	 mov	 DWORD PTR ?enumEX16@@3UStrEnumEX16@@A+40, 1024 ; 00000400H

; 1593 : 	enumEX16.EXIST_12 = EX16_EXIST_12;

  03080	c7 05 2c 00 00
	00 00 08 00 00	 mov	 DWORD PTR ?enumEX16@@3UStrEnumEX16@@A+44, 2048 ; 00000800H

; 1594 : 	enumEX16.EXIST_13 = EX16_EXIST_13;

  0308a	c7 05 30 00 00
	00 00 10 00 00	 mov	 DWORD PTR ?enumEX16@@3UStrEnumEX16@@A+48, 4096 ; 00001000H

; 1595 : 	enumEX16.EXIST_14 = EX16_EXIST_14;

  03094	c7 05 34 00 00
	00 00 20 00 00	 mov	 DWORD PTR ?enumEX16@@3UStrEnumEX16@@A+52, 8192 ; 00002000H

; 1596 : 	enumEX16.EXIST_15 = EX16_EXIST_15;

  0309e	c7 05 38 00 00
	00 00 40 00 00	 mov	 DWORD PTR ?enumEX16@@3UStrEnumEX16@@A+56, 16384 ; 00004000H

; 1597 : 	enumEX16.EXIST_16 = EX16_EXIST_16;

  030a8	c7 05 3c 00 00
	00 00 80 00 00	 mov	 DWORD PTR ?enumEX16@@3UStrEnumEX16@@A+60, 32768 ; 00008000H

; 1598 : 
; 1599 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumPCOMBO----------------------
; 1600 : 	enumPCOMBO.ITEM1_FOR_PICKUP_1 = PCOMBO_ITEM1_FOR_PICKUP_1;

  030b2	a3 00 00 00 00	 mov	 DWORD PTR ?enumPCOMBO@@3UStrEnumPCOMBO@@A, eax

; 1601 : 	enumPCOMBO.ITEM2_FOR_PICKUP_1 = PCOMBO_ITEM2_FOR_PICKUP_1;

  030b7	89 0d 04 00 00
	00		 mov	 DWORD PTR ?enumPCOMBO@@3UStrEnumPCOMBO@@A+4, ecx

; 1602 : 	enumPCOMBO.ITEM1_FOR_PICKUP_2 = PCOMBO_ITEM1_FOR_PICKUP_2;

  030bd	89 15 08 00 00
	00		 mov	 DWORD PTR ?enumPCOMBO@@3UStrEnumPCOMBO@@A+8, edx

; 1603 : 	enumPCOMBO.ITEM2_FOR_PICKUP_2 = PCOMBO_ITEM2_FOR_PICKUP_2;

  030c3	89 35 0c 00 00
	00		 mov	 DWORD PTR ?enumPCOMBO@@3UStrEnumPCOMBO@@A+12, esi

; 1604 : 	enumPCOMBO.ITEM1_FOR_PICKUP_3 = PCOMBO_ITEM1_FOR_PICKUP_3;

  030c9	89 3d 10 00 00
	00		 mov	 DWORD PTR ?enumPCOMBO@@3UStrEnumPCOMBO@@A+16, edi

; 1605 : 	enumPCOMBO.ITEM2_FOR_PICKUP_3 = PCOMBO_ITEM2_FOR_PICKUP_3;

  030cf	89 1d 14 00 00
	00		 mov	 DWORD PTR ?enumPCOMBO@@3UStrEnumPCOMBO@@A+20, ebx

; 1606 : 	enumPCOMBO.ITEM1_FOR_PICKUP_4 = PCOMBO_ITEM1_FOR_PICKUP_4;

  030d5	c7 05 18 00 00
	00 40 00 00 00	 mov	 DWORD PTR ?enumPCOMBO@@3UStrEnumPCOMBO@@A+24, 64 ; 00000040H

; 1607 : 	enumPCOMBO.ITEM2_FOR_PICKUP_4 = PCOMBO_ITEM2_FOR_PICKUP_4;

  030df	c7 05 1c 00 00
	00 80 00 00 00	 mov	 DWORD PTR ?enumPCOMBO@@3UStrEnumPCOMBO@@A+28, 128 ; 00000080H

; 1608 : 	enumPCOMBO.ITEM1_FOR_PICKUP_5 = PCOMBO_ITEM1_FOR_PICKUP_5;

  030e9	c7 05 20 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?enumPCOMBO@@3UStrEnumPCOMBO@@A+32, 256 ; 00000100H

; 1609 : 	enumPCOMBO.ITEM2_FOR_PICKUP_5 = PCOMBO_ITEM2_FOR_PICKUP_5;

  030f3	c7 05 24 00 00
	00 00 02 00 00	 mov	 DWORD PTR ?enumPCOMBO@@3UStrEnumPCOMBO@@A+36, 512 ; 00000200H

; 1610 : 	enumPCOMBO.ITEM1_FOR_PICKUP_6 = PCOMBO_ITEM1_FOR_PICKUP_6;

  030fd	c7 05 28 00 00
	00 00 04 00 00	 mov	 DWORD PTR ?enumPCOMBO@@3UStrEnumPCOMBO@@A+40, 1024 ; 00000400H

; 1611 : 	enumPCOMBO.ITEM2_FOR_PICKUP_6 = PCOMBO_ITEM2_FOR_PICKUP_6;

  03107	c7 05 2c 00 00
	00 00 08 00 00	 mov	 DWORD PTR ?enumPCOMBO@@3UStrEnumPCOMBO@@A+44, 2048 ; 00000800H

; 1612 : 	enumPCOMBO.ITEM1_FOR_PICKUP_7 = PCOMBO_ITEM1_FOR_PICKUP_7;

  03111	c7 05 30 00 00
	00 00 10 00 00	 mov	 DWORD PTR ?enumPCOMBO@@3UStrEnumPCOMBO@@A+48, 4096 ; 00001000H

; 1613 : 	enumPCOMBO.ITEM2_FOR_PICKUP_7 = PCOMBO_ITEM2_FOR_PICKUP_7;

  0311b	c7 05 34 00 00
	00 00 20 00 00	 mov	 DWORD PTR ?enumPCOMBO@@3UStrEnumPCOMBO@@A+52, 8192 ; 00002000H

; 1614 : 	enumPCOMBO.ITEM1_FOR_PICKUP_8 = PCOMBO_ITEM1_FOR_PICKUP_8;

  03125	c7 05 38 00 00
	00 00 40 00 00	 mov	 DWORD PTR ?enumPCOMBO@@3UStrEnumPCOMBO@@A+56, 16384 ; 00004000H

; 1615 : 	enumPCOMBO.ITEM2_FOR_PICKUP_8 = PCOMBO_ITEM2_FOR_PICKUP_8;

  0312f	c7 05 3c 00 00
	00 00 80 00 00	 mov	 DWORD PTR ?enumPCOMBO@@3UStrEnumPCOMBO@@A+60, 32768 ; 00008000H

; 1616 : 
; 1617 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumDENV----------------------
; 1618 : 	enumDENV.FLAG_FACE2FACE = DENV_FLAG_FACE2FACE;

  03139	c7 05 00 00 00
	00 00 80 00 00	 mov	 DWORD PTR ?enumDENV@@3UStrEnumDENV@@A, 32768 ; 00008000H

; 1619 : 	enumDENV.FLAG_FACE2BACK = DENV_FLAG_FACE2BACK;

  03143	c7 05 04 00 00
	00 00 40 00 00	 mov	 DWORD PTR ?enumDENV@@3UStrEnumDENV@@A+4, 16384 ; 00004000H

; 1620 : 	enumDENV.MASK_DISTANCE = DENV_MASK_DISTANCE;

  0314d	c7 05 08 00 00
	00 ff 3f 00 00	 mov	 DWORD PTR ?enumDENV@@3UStrEnumDENV@@A+8, 16383 ; 00003fffH

; 1621 : 	enumDENV.MASK_FLAGS = DENV_MASK_FLAGS;

  03157	c7 05 0c 00 00
	00 00 c0 00 00	 mov	 DWORD PTR ?enumDENV@@3UStrEnumDENV@@A+12, 49152 ; 0000c000H

; 1622 : 
; 1623 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumSLOPE----------------------
; 1624 : 	enumSLOPE.FLAT = SLOPE_FLAT;

  03161	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?enumSLOPE@@3UStrEnumSLOPE@@A, 0

; 1625 : 	enumSLOPE.GENTLE_SLOPE = SLOPE_GENTLE_SLOPE;

  0316b	a3 04 00 00 00	 mov	 DWORD PTR ?enumSLOPE@@3UStrEnumSLOPE@@A+4, eax

; 1626 : 	enumSLOPE.STEEP_SLOPE = SLOPE_STEEP_SLOPE;

  03170	89 0d 08 00 00
	00		 mov	 DWORD PTR ?enumSLOPE@@3UStrEnumSLOPE@@A+8, ecx

; 1627 : 	enumSLOPE.GENTLE_CORNER = SLOPE_GENTLE_CORNER;

  03176	c7 05 0c 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?enumSLOPE@@3UStrEnumSLOPE@@A+12, 3

; 1628 : 	enumSLOPE.STEEP_CORNER = SLOPE_STEEP_CORNER;

  03180	89 15 10 00 00
	00		 mov	 DWORD PTR ?enumSLOPE@@3UStrEnumSLOPE@@A+16, edx

; 1629 : 
; 1630 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumORIENT----------------------
; 1631 : 	enumORIENT.NORTH = ORIENT_NORTH;

  03186	c7 05 00 00 00
	00 00 c0 ff ff	 mov	 DWORD PTR ?enumORIENT@@3UStrEnumORIENT@@A, -16384 ; ffffc000H

; 1632 : 	enumORIENT.SOUTH = ORIENT_SOUTH;

  03190	c7 05 04 00 00
	00 00 40 00 00	 mov	 DWORD PTR ?enumORIENT@@3UStrEnumORIENT@@A+4, 16384 ; 00004000H

; 1633 : 	enumORIENT.EAST = ORIENT_EAST;

  0319a	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?enumORIENT@@3UStrEnumORIENT@@A+8, 0

; 1634 : 	enumORIENT.WEST = ORIENT_WEST;

  031a4	c7 05 0c 00 00
	00 00 80 ff ff	 mov	 DWORD PTR ?enumORIENT@@3UStrEnumORIENT@@A+12, -32768 ; ffff8000H

; 1635 : 	enumORIENT.SOUTH_EAST = ORIENT_SOUTH_EAST;
; 1636 : 	enumORIENT.NORTH_EAST = ORIENT_NORTH_EAST;
; 1637 : 	enumORIENT.SOUTH_WEST = ORIENT_SOUTH_WEST;
; 1638 : 	enumORIENT.NORTH_WEST = ORIENT_NORTH_WEST;
; 1639 : 
; 1640 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumFSLOT----------------------
; 1641 : 	enumFSLOT.NONE = FSLOT_NONE;
; 1642 : 	enumFSLOT.PRESENT = FSLOT_PRESENT;
; 1643 : 	enumFSLOT.AI_STANDARD = FSLOT_AI_STANDARD;
; 1644 : 	enumFSLOT.CHANGE_POS_ITEM = FSLOT_CHANGE_POS_ITEM;
; 1645 : 	enumFSLOT.MOVED_BY_ANIMATIONS = FSLOT_MOVED_BY_ANIMATIONS;

  031ae	89 3d 10 00 00
	00		 mov	 DWORD PTR ?enumFSLOT@@3UStrEnumFSLOT@@A+16, edi

; 1646 : 	enumFSLOT.SAVE_ALL_DATA = FSLOT_SAVE_ALL_DATA;
; 1647 : 	enumFSLOT.AFFECT_LARA_AT_CONTACT = FSLOT_AFFECT_LARA_AT_CONTACT;
; 1648 : 	enumFSLOT.SFX_LOCAL_SOUND = FSLOT_SFX_LOCAL_SOUND;
; 1649 : 	enumFSLOT.USE_COLLISION_BOX = FSLOT_USE_COLLISION_BOX;
; 1650 : 	enumFSLOT.AMPHIBIOUS_CREATURE = FSLOT_AMPHIBIOUS_CREATURE;
; 1651 : 	enumFSLOT.HIT_BUT_NOT_HURT_BY_SHOTGUN = FSLOT_HIT_BUT_NOT_HURT_BY_SHOTGUN;
; 1652 : 	enumFSLOT.NO_DAMAGE_FOR_NO_EXPLOSIVE_AMMO = FSLOT_NO_DAMAGE_FOR_NO_EXPLOSIVE_AMMO;
; 1653 : 	enumFSLOT.SAVE_MESH_MASK = FSLOT_SAVE_MESH_MASK;
; 1654 : 
; 1655 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumFITEM----------------------
; 1656 : 	enumFITEM.NONE = FITEM_NONE;
; 1657 : 	enumFITEM.ACTIVE = FITEM_ACTIVE;
; 1658 : 	enumFITEM.CREATURE = FITEM_CREATURE;
; 1659 : 	enumFITEM.NOT_VISIBLE = FITEM_NOT_VISIBLE;
; 1660 : 	enumFITEM.GRAVITY_AFFECTED = FITEM_GRAVITY_AFFECTED;
; 1661 : 	enumFITEM.FLAG_10 = FITEM_FLAG_10;

  031b4	89 3d 14 00 00
	00		 mov	 DWORD PTR ?enumFITEM@@3UStrEnumFITEM@@A+20, edi

; 1662 : 	enumFITEM.ITEM_HAS_BEEN_HIT = FITEM_ITEM_HAS_BEEN_HIT;

  031ba	89 3d 18 00 00
	00		 mov	 DWORD PTR ?enumFITEM@@3UStrEnumFITEM@@A+24, edi

; 1663 : 	enumFITEM.NOT_YET_ENABLED = FITEM_NOT_YET_ENABLED;
; 1664 : 	enumFITEM.KILLED_WITH_EXPLOSION = FITEM_KILLED_WITH_EXPLOSION;
; 1665 : 	enumFITEM.POISONED = FITEM_POISONED;
; 1666 : 	enumFITEM.AI_GUARD = FITEM_AI_GUARD;

  031c0	bf 00 02 00 00	 mov	 edi, 512		; 00000200H
  031c5	89 35 0c 00 00
	00		 mov	 DWORD PTR ?enumFSLOT@@3UStrEnumFSLOT@@A+12, esi
  031cb	89 35 10 00 00
	00		 mov	 DWORD PTR ?enumFITEM@@3UStrEnumFITEM@@A+16, esi

; 1667 : 	enumFITEM.AI_AMBUSH = FITEM_AI_AMBUSH;

  031d1	be 00 04 00 00	 mov	 esi, 1024		; 00000400H
  031d6	89 1d 14 00 00
	00		 mov	 DWORD PTR ?enumFSLOT@@3UStrEnumFSLOT@@A+20, ebx
  031dc	89 1d 1c 00 00
	00		 mov	 DWORD PTR ?enumFITEM@@3UStrEnumFITEM@@A+28, ebx
  031e2	bb 00 01 00 00	 mov	 ebx, 256		; 00000100H
  031e7	89 3d 28 00 00
	00		 mov	 DWORD PTR ?enumFITEM@@3UStrEnumFITEM@@A+40, edi

; 1668 : 	enumFITEM.AI_PATROL1 = FITEM_AI_PATROL1;
; 1669 : 	enumFITEM.AI_MODIFY = FITEM_AI_MODIFY;
; 1670 : 	enumFITEM.AI_FOLLOW = FITEM_AI_FOLLOW;
; 1671 : 	enumFITEM.THROWN_AMMO = FITEM_THROWN_AMMO;
; 1672 : 
; 1673 : //  --------------- LOAD CONSTANTS FOR ENUM STRUCTURE: enumMEMT----------------------
; 1674 : 	enumMEMT.SAVEGAME = MEMT_SAVEGAME;
; 1675 : 	enumMEMT.CODE = MEMT_CODE;

  031ed	89 3d 04 00 00
	00		 mov	 DWORD PTR ?enumMEMT@@3UStrEnumMEMT@@A+4, edi
  031f3	5f		 pop	 edi
  031f4	a3 04 00 00 00	 mov	 DWORD PTR ?enumFSLOT@@3UStrEnumFSLOT@@A+4, eax
  031f9	89 0d 08 00 00
	00		 mov	 DWORD PTR ?enumFSLOT@@3UStrEnumFSLOT@@A+8, ecx
  031ff	a3 04 00 00 00	 mov	 DWORD PTR ?enumFITEM@@3UStrEnumFITEM@@A+4, eax
  03204	89 0d 08 00 00
	00		 mov	 DWORD PTR ?enumFITEM@@3UStrEnumFITEM@@A+8, ecx
  0320a	89 15 0c 00 00
	00		 mov	 DWORD PTR ?enumFITEM@@3UStrEnumFITEM@@A+12, edx
  03210	89 35 2c 00 00
	00		 mov	 DWORD PTR ?enumFITEM@@3UStrEnumFITEM@@A+44, esi
  03216	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  0321b	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  03220	b8 00 20 00 00	 mov	 eax, 8192		; 00002000H

; 1676 : 	enumMEMT.ITEM = MEMT_ITEM;

  03225	89 35 08 00 00
	00		 mov	 DWORD PTR ?enumMEMT@@3UStrEnumMEMT@@A+8, esi
  0322b	5e		 pop	 esi
  0322c	89 1d 24 00 00
	00		 mov	 DWORD PTR ?enumFITEM@@3UStrEnumFITEM@@A+36, ebx
  03232	89 1d 00 00 00
	00		 mov	 DWORD PTR ?enumMEMT@@3UStrEnumMEMT@@A, ebx
  03238	c7 05 10 00 00
	00 00 20 00 00	 mov	 DWORD PTR ?enumORIENT@@3UStrEnumORIENT@@A+16, 8192 ; 00002000H
  03242	c7 05 14 00 00
	00 00 e0 ff ff	 mov	 DWORD PTR ?enumORIENT@@3UStrEnumORIENT@@A+20, -8192 ; ffffe000H
  0324c	c7 05 18 00 00
	00 00 60 00 00	 mov	 DWORD PTR ?enumORIENT@@3UStrEnumORIENT@@A+24, 24576 ; 00006000H
  03256	c7 05 1c 00 00
	00 00 a0 ff ff	 mov	 DWORD PTR ?enumORIENT@@3UStrEnumORIENT@@A+28, -24576 ; ffffa000H
  03260	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?enumFSLOT@@3UStrEnumFSLOT@@A, 0
  0326a	c7 05 18 00 00
	00 40 00 00 00	 mov	 DWORD PTR ?enumFSLOT@@3UStrEnumFSLOT@@A+24, 64 ; 00000040H
  03274	c7 05 1c 00 00
	00 00 01 00 00	 mov	 DWORD PTR ?enumFSLOT@@3UStrEnumFSLOT@@A+28, 256 ; 00000100H
  0327e	c7 05 20 00 00
	00 00 02 00 00	 mov	 DWORD PTR ?enumFSLOT@@3UStrEnumFSLOT@@A+32, 512 ; 00000200H
  03288	c7 05 24 00 00
	00 00 04 00 00	 mov	 DWORD PTR ?enumFSLOT@@3UStrEnumFSLOT@@A+36, 1024 ; 00000400H
  03292	c7 05 28 00 00
	00 00 08 00 00	 mov	 DWORD PTR ?enumFSLOT@@3UStrEnumFSLOT@@A+40, 2048 ; 00000800H
  0329c	c7 05 2c 00 00
	00 00 10 00 00	 mov	 DWORD PTR ?enumFSLOT@@3UStrEnumFSLOT@@A+44, 4096 ; 00001000H
  032a6	c7 05 30 00 00
	00 00 20 00 00	 mov	 DWORD PTR ?enumFSLOT@@3UStrEnumFSLOT@@A+48, 8192 ; 00002000H
  032b0	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?enumFITEM@@3UStrEnumFITEM@@A, 0
  032ba	c7 05 20 00 00
	00 40 00 00 00	 mov	 DWORD PTR ?enumFITEM@@3UStrEnumFITEM@@A+32, 64 ; 00000040H
  032c4	89 15 30 00 00
	00		 mov	 DWORD PTR ?enumFITEM@@3UStrEnumFITEM@@A+48, edx
  032ca	89 0d 34 00 00
	00		 mov	 DWORD PTR ?enumFITEM@@3UStrEnumFITEM@@A+52, ecx
  032d0	a3 38 00 00 00	 mov	 DWORD PTR ?enumFITEM@@3UStrEnumFITEM@@A+56, eax
  032d5	c7 05 3c 00 00
	00 00 40 00 00	 mov	 DWORD PTR ?enumFITEM@@3UStrEnumFITEM@@A+60, 16384 ; 00004000H

; 1677 : 	enumMEMT.SLOT = MEMT_SLOT;

  032df	89 15 0c 00 00
	00		 mov	 DWORD PTR ?enumMEMT@@3UStrEnumMEMT@@A+12, edx

; 1678 : 	enumMEMT.ANIMATION = MEMT_ANIMATION;

  032e5	89 0d 10 00 00
	00		 mov	 DWORD PTR ?enumMEMT@@3UStrEnumMEMT@@A+16, ecx

; 1679 : 	enumMEMT.INVENTORY = MEMT_INVENTORY;

  032eb	a3 14 00 00 00	 mov	 DWORD PTR ?enumMEMT@@3UStrEnumMEMT@@A+20, eax
  032f0	5b		 pop	 ebx

; 1680 : 
; 1681 : 
; 1682 : }

  032f1	c3		 ret	 0
?InitialiseEnums@@YAXXZ ENDP				; InitialiseEnums
PUBLIC	?SendErrorToDiskLog@@YAXPADK_N@Z		; SendErrorToDiskLog
; Function compile flags: /Ogtp
;	COMDAT ?SendErrorToDiskLog@@YAXPADK_N@Z
_TEXT	SEGMENT
?SendErrorToDiskLog@@YAXPADK_N@Z PROC			; SendErrorToDiskLog, COMDAT
; _PluginID$ = eax

; 3724 : 
; 3725 : 	Service(SRV_F_InviaErroreLog, pMessage, PluginID, TestMsgBox);

  00000	6a 00		 push	 0
  00002	50		 push	 eax
  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0FC@LGLKDBFF@ERROR?3?5failed?5check?5of?5alignment@
  00008	6a 11		 push	 17			; 00000011H
  0000a	e8 00 00 00 00	 call	 ?Service@@YAHKZZ	; Service
  0000f	83 c4 10	 add	 esp, 16			; 00000010H

; 3726 : 
; 3727 : }

  00012	c3		 ret	 0
?SendErrorToDiskLog@@YAXPADK_N@Z ENDP			; SendErrorToDiskLog
_TEXT	ENDS
PUBLIC	?ResizeMemory@@YAPAXPAXK@Z			; ResizeMemory
; Function compile flags: /Ogtp
;	COMDAT ?ResizeMemory@@YAPAXPAXK@Z
_TEXT	SEGMENT
?ResizeMemory@@YAPAXPAXK@Z PROC				; ResizeMemory, COMDAT
; _NewSize$ = eax

; 3276 : 	if (pOldMemory==NULL) {
; 3277 : 		return GetMemory(NewSize);

  00000	50		 push	 eax
  00001	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00007	83 c4 04	 add	 esp, 4

; 3278 : 	}
; 3279 : 
; 3280 : 	return realloc(pOldMemory, NewSize);
; 3281 : 
; 3282 : 
; 3283 : }

  0000a	c3		 ret	 0
?ResizeMemory@@YAPAXPAXK@Z ENDP				; ResizeMemory
_TEXT	ENDS
PUBLIC	?GetTrngInfo@@YAXXZ				; GetTrngInfo
; Function compile flags: /Ogtp
;	COMDAT ?GetTrngInfo@@YAXXZ
_TEXT	SEGMENT
?GetTrngInfo@@YAXXZ PROC				; GetTrngInfo, COMDAT

; 3220 : 
; 3221 : 	StrTrngInfos *pSrcInfo = (StrTrngInfos *) 0x4A6E70;
; 3222 : 
; 3223 : 	Trng = *pSrcInfo;
; 3224 : 	// the plugin returns the setting about the address of MainPatcher function:
; 3225 : 	pSrcInfo->pAdrDllPatcher = &MainPatcher;
; 3226 : 	// and the address in tomb4 code where this address will be saved: 
; 3227 : 	pSrcInfo->AdrTomb4Patcher = MyTomb4PatcherAddress; 

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?MyTomb4PatcherAddress@@3KA ; MyTomb4PatcherAddress
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	be 70 6e 4a 00	 mov	 esi, 4877936		; 004a6e70H
  0000c	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  00011	bf 00 00 00 00	 mov	 edi, OFFSET ?Trng@@3UStrTrngInfos@@A ; Trng
  00016	f3 a5		 rep movsd

; 3228 : 	// and the address for directcall from trng to plugin code
; 3229 : 	pSrcInfo->pDirectCallBack = &CallFromTrng;
; 3230 : 
; 3231 : 	// copy current plugin name
; 3232 : 	strcpy(TexMyPluginName, pSrcInfo->pMyPluginName);

  00018	8b 0d a0 6e 4a
	00		 mov	 ecx, DWORD PTR ds:4877984
  0001e	5f		 pop	 edi
  0001f	c7 05 8c 6e 4a
	00 00 00 00 00	 mov	 DWORD PTR ds:4877964, OFFSET ?MainPatcher@@YAHXZ ; MainPatcher
  00029	a3 88 6e 4a 00	 mov	 DWORD PTR ds:4877960, eax
  0002e	c7 05 84 6e 4a
	00 00 00 00 00	 mov	 DWORD PTR ds:4877956, OFFSET ?CallFromTrng@@YAHXZ ; CallFromTrng
  00038	ba 00 00 00 00	 mov	 edx, OFFSET ?TexMyPluginName@@3PADA ; TexMyPluginName
  0003d	5e		 pop	 esi
  0003e	8b ff		 npad	 2
$LL3@GetTrngInf:
  00040	8a 01		 mov	 al, BYTE PTR [ecx]
  00042	88 02		 mov	 BYTE PTR [edx], al
  00044	41		 inc	 ecx
  00045	42		 inc	 edx
  00046	84 c0		 test	 al, al
  00048	75 f6		 jne	 SHORT $LL3@GetTrngInf

; 3233 : 	
; 3234 : 	// initialise auto-enumerator for some mnemonic constants
; 3235 : 	InitialiseEnums();

  0004a	e8 00 00 00 00	 call	 ?InitialiseEnums@@YAXXZ	; InitialiseEnums

; 3236 : 
; 3237 : 	// and the current version (debug or release)
; 3238 : #ifdef DEBUG_ON
; 3239 : 	pSrcInfo->TestDebugMode = 1;
; 3240 : #else
; 3241 : 	pSrcInfo->TestDebugMode = 0;

  0004f	c7 05 90 6e 4a
	00 00 00 00 00	 mov	 DWORD PTR ds:4877968, 0

; 3242 : #endif
; 3243 : }

  00059	c3		 ret	 0
?GetTrngInfo@@YAXXZ ENDP				; GetTrngInfo
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?AlignLaraAtPosition@@YA_NPAUStrTestPositionCmd@@H@Z ; AlignLaraAtPosition
EXTRN	___security_cookie:DWORD
; Function compile flags: /Ogtp
;	COMDAT ?AlignLaraAtPosition@@YA_NPAUStrTestPositionCmd@@H@Z
_TEXT	SEGMENT
_SalvaLara$ = -60					; size = 32
_DifOrientH$ = -28					; size = 2
_SalvaOrientH$ = -24					; size = 2
_MovePosData$ = -20					; size = 12
__$ArrayPad$ = -8					; size = 4
_ObjectIndex$ = 8					; size = 4
?AlignLaraAtPosition@@YA_NPAUStrTestPositionCmd@@H@Z PROC ; AlignLaraAtPosition, COMDAT
; _pTestPosition$ = ecx

; 2148 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 f8	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _ObjectIndex$[ebp]
  00013	53		 push	 ebx

; 2149 : 
; 2150 : 	StrItemTr4 *pItem;
; 2151 : 	StrItemTr4 *pLara;
; 2152 : 	StrMovePosition MovePosData;
; 2153 : 	short SalvaOrientH;
; 2154 : 	StrMovePosition *pMovPos;
; 2155 : 	short DifOrientH;
; 2156 : 	StrBackupLara SalvaLara;
; 2157 : 	int Index;
; 2158 : 
; 2159 : 	if (ObjectIndex & NGLE_INDEX) {

  00014	8b 1d 04 00 00
	00		 mov	 ebx, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a9 00 40 00 00	 test	 eax, 16384		; 00004000H
  00021	74 0d		 je	 SHORT $LN8@AlignLaraA

; 2160 : 		Index = ObjectIndex & MASK_NGLE_INDEX;

  00023	25 ff 3f 00 00	 and	 eax, 16383		; 00003fffH

; 2161 : 		ObjectIndex = FromNgleIndexToTomb4Index(Index);

  00028	0f bf 84 43 74
	2c 1a 00	 movsx	 eax, WORD PTR [ebx+eax*2+1715316]
$LN8@AlignLaraA:

; 2162 : 	
; 2163 : 	}
; 2164 : 	Trng.pGlobTomb4->TestFixLaraMovPos=false;
; 2165 : 	pLara= Trng.pGlobTomb4->pAdr->pLara;
; 2166 : 	pItem = &Trng.pGlobTomb4->pAdr->pVetItems[ObjectIndex];

  00030	8b f0		 mov	 esi, eax
  00032	69 f6 f6 15 00
	00		 imul	 esi, 5622		; 000015f6H
  00038	c6 83 d8 e6 00
	00 00		 mov	 BYTE PTR [ebx+59096], 0
  0003f	8b 93 4a 34 19
	00		 mov	 edx, DWORD PTR [ebx+1651786]
  00045	03 72 08	 add	 esi, DWORD PTR [edx+8]

; 2167 : 
; 2168 : 	// farlo in modo immediato se c''e orientamento round in testposition
; 2169 : 	if (pTestPosition->Flags & TPOS_ROUND_HORIENT) {

  00048	f6 41 02 20	 test	 BYTE PTR [ecx+2], 32	; 00000020H
  0004c	8b 3a		 mov	 edi, DWORD PTR [edx]
  0004e	74 30		 je	 SHORT $LN7@AlignLaraA

; 2170 : 		pItem->CordX = Trng.pGlobTomb4->TestPosXIdeal;

  00050	8b 83 8c 7b 07
	00		 mov	 eax, DWORD PTR [ebx+490380]
  00056	89 46 40	 mov	 DWORD PTR [esi+64], eax

; 2171 : 		pItem->CordZ = Trng.pGlobTomb4->TestPosZIdeal;

  00059	8b 8b 90 7b 07
	00		 mov	 ecx, DWORD PTR [ebx+490384]
  0005f	89 4e 48	 mov	 DWORD PTR [esi+72], ecx

; 2172 : 		pItem->OrientationH = Trng.pGlobTomb4->TestPosOrientIdeal;

  00062	66 8b 93 8a 7b
	07 00		 mov	 dx, WORD PTR [ebx+490378]
  00069	66 89 56 4e	 mov	 WORD PTR [esi+78], dx

; 2240 : 		Trng.pGlobTomb4->TestAlignmentInProgress=false;
; 2241 : 		*Trng.pGlobTomb4->pAdr->pFlagsLara &= ~0x20;
; 2242 : 		
; 2243 : 		
; 2244 : 
; 2245 : 	}
; 2246 : 	return true;

  0006d	b0 01		 mov	 al, 1

; 2247 : 
; 2248 : }

  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	8b 4d f8	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00075	33 cd		 xor	 ecx, ebp
  00077	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
$LN7@AlignLaraA:

; 2173 : 	}else {
; 2174 : 		// traditionl alignment
; 2175 : 
; 2176 : 		Trng.pGlobTomb4->TestAlignmentInProgress=true;

  00080	c6 83 a3 5e 21
	00 01		 mov	 BYTE PTR [ebx+2186915], 1

; 2177 : 		*Trng.pGlobTomb4->pAdr->pObjectActive = ObjectIndex;

  00087	8b 93 4a 34 19
	00		 mov	 edx, DWORD PTR [ebx+1651786]
  0008d	8b 92 94 00 00
	00		 mov	 edx, DWORD PTR [edx+148]
  00093	89 02		 mov	 DWORD PTR [edx], eax

; 2178 : 
; 2179 : 		pMovPos = &MovePosData;
; 2180 : 
; 2181 : 
; 2182 : 		pMovPos->RelX  = (pTestPosition->DatiPosition.Distance.MaxX + 
; 2183 : 					pTestPosition->DatiPosition.Distance.MinX ) / 2;

  00095	0f bf 51 06	 movsx	 edx, WORD PTR [ecx+6]
  00099	0f bf 41 08	 movsx	 eax, WORD PTR [ecx+8]
  0009d	03 c2		 add	 eax, edx
  0009f	99		 cdq
  000a0	2b c2		 sub	 eax, edx

; 2184 : 
; 2185 : 		pMovPos->RelY = (pTestPosition->DatiPosition.Distance.MaxY +
; 2186 : 					pTestPosition->DatiPosition.Distance.MinY) / 2;

  000a2	0f bf 51 0a	 movsx	 edx, WORD PTR [ecx+10]
  000a6	d1 f8		 sar	 eax, 1
  000a8	89 45 ec	 mov	 DWORD PTR _MovePosData$[ebp], eax
  000ab	0f bf 41 0c	 movsx	 eax, WORD PTR [ecx+12]
  000af	03 c2		 add	 eax, edx
  000b1	99		 cdq
  000b2	2b c2		 sub	 eax, edx

; 2187 : 
; 2188 : 		pMovPos->RelZ = (pTestPosition->DatiPosition.Distance.MaxZ + 
; 2189 : 					pTestPosition->DatiPosition.Distance.MinZ ) / 2;

  000b4	0f bf 51 0e	 movsx	 edx, WORD PTR [ecx+14]
  000b8	d1 f8		 sar	 eax, 1
  000ba	89 45 f0	 mov	 DWORD PTR _MovePosData$[ebp+4], eax
  000bd	0f bf 41 10	 movsx	 eax, WORD PTR [ecx+16]
  000c1	03 c2		 add	 eax, edx
  000c3	99		 cdq
  000c4	2b c2		 sub	 eax, edx

; 2190 : 
; 2191 : 		DifOrientH = (pTestPosition->DatiPosition.Orienting.OrientHMax +
; 2192 : 					pTestPosition->DatiPosition.Orienting.OrientHMin) / 2;

  000c6	0f bf 51 16	 movsx	 edx, WORD PTR [ecx+22]
  000ca	d1 f8		 sar	 eax, 1
  000cc	89 45 f4	 mov	 DWORD PTR _MovePosData$[ebp+8], eax
  000cf	0f bf 41 18	 movsx	 eax, WORD PTR [ecx+24]
  000d3	03 c2		 add	 eax, edx
  000d5	99		 cdq
  000d6	2b c2		 sub	 eax, edx
  000d8	d1 f8		 sar	 eax, 1

; 2193 : 		
; 2194 : 		if (pTestPosition->Flags & TPOS_TURN_FACING_90) {

  000da	f6 41 02 40	 test	 BYTE PTR [ecx+2], 64	; 00000040H
  000de	0f b7 c0	 movzx	 eax, ax
  000e1	89 45 e4	 mov	 DWORD PTR _DifOrientH$[ebp], eax
  000e4	74 0e		 je	 SHORT $LN5@AlignLaraA

; 2195 : 			// fixing turning 90 position:
; 2196 : 			
; 2197 : 			Index = pMovPos->RelX;

  000e6	8b 45 ec	 mov	 eax, DWORD PTR _MovePosData$[ebp]

; 2198 : 			pMovPos->RelX = pMovPos->RelZ;

  000e9	8b 55 f4	 mov	 edx, DWORD PTR _MovePosData$[ebp+8]

; 2199 : 			pMovPos->RelZ = -Index;

  000ec	f7 d8		 neg	 eax
  000ee	89 55 ec	 mov	 DWORD PTR _MovePosData$[ebp], edx
  000f1	89 45 f4	 mov	 DWORD PTR _MovePosData$[ebp+8], eax
$LN5@AlignLaraA:

; 2200 : 		}
; 2201 : 
; 2202 : 
; 2203 : 	
; 2204 : 		SalvaOrientH = pItem->OrientationH;
; 2205 : 		pItem->OrientationH = Trng.pGlobTomb4->TestPosOrientIdeal;

  000f4	0f b7 93 8a 7b
	07 00		 movzx	 edx, WORD PTR [ebx+490378]
  000fb	0f b7 46 4e	 movzx	 eax, WORD PTR [esi+78]
  000ff	66 89 56 4e	 mov	 WORD PTR [esi+78], dx

; 2206 : 		
; 2207 : 		BackupLara(&SalvaLara, pLara);
; 2208 : 		if (pTestPosition->Flags & TPOS_FAST_ALIGNMENT) {

  00103	f6 41 02 08	 test	 BYTE PTR [ecx+2], 8
  00107	0f b7 57 14	 movzx	 edx, WORD PTR [edi+20]
  0010b	89 45 e8	 mov	 DWORD PTR _SalvaOrientH$[ebp], eax
  0010e	a1 64 df 80 00	 mov	 eax, DWORD PTR ds:8445796
  00113	66 89 55 c4	 mov	 WORD PTR _SalvaLara$[ebp], dx
  00117	0f b7 57 0e	 movzx	 edx, WORD PTR [edi+14]
  0011b	89 45 e0	 mov	 DWORD PTR _SalvaLara$[ebp+28], eax
  0011e	0f b7 47 16	 movzx	 eax, WORD PTR [edi+22]
  00122	66 89 55 c6	 mov	 WORD PTR _SalvaLara$[ebp+2], dx
  00126	0f b7 57 18	 movzx	 edx, WORD PTR [edi+24]
  0012a	66 89 45 ca	 mov	 WORD PTR _SalvaLara$[ebp+6], ax
  0012e	0f b7 47 10	 movzx	 eax, WORD PTR [edi+16]
  00132	66 89 55 d8	 mov	 WORD PTR _SalvaLara$[ebp+20], dx
  00136	8b 57 44	 mov	 edx, DWORD PTR [edi+68]
  00139	66 89 45 c8	 mov	 WORD PTR _SalvaLara$[ebp+4], ax
  0013d	8b 47 40	 mov	 eax, DWORD PTR [edi+64]
  00140	89 55 d0	 mov	 DWORD PTR _SalvaLara$[ebp+12], edx
  00143	0f b7 57 4e	 movzx	 edx, WORD PTR [edi+78]
  00147	89 45 cc	 mov	 DWORD PTR _SalvaLara$[ebp+8], eax
  0014a	8b 47 48	 mov	 eax, DWORD PTR [edi+72]
  0014d	89 45 d4	 mov	 DWORD PTR _SalvaLara$[ebp+16], eax
  00150	0f b7 47 1e	 movzx	 eax, WORD PTR [edi+30]
  00154	66 89 55 da	 mov	 WORD PTR _SalvaLara$[ebp+22], dx
  00158	0f b7 57 20	 movzx	 edx, WORD PTR [edi+32]
  0015c	66 89 45 dc	 mov	 WORD PTR _SalvaLara$[ebp+24], ax
  00160	66 89 55 de	 mov	 WORD PTR _SalvaLara$[ebp+26], dx
  00164	74 0f		 je	 SHORT $LN4@AlignLaraA

; 2209 : 			*Trng.pGlobTomb4->pAdr->pFlagsLara |= 0x20;

  00166	8b 83 4a 34 19
	00		 mov	 eax, DWORD PTR [ebx+1651786]
  0016c	8b 80 8c 00 00
	00		 mov	 eax, DWORD PTR [eax+140]
  00172	80 08 20	 or	 BYTE PTR [eax], 32	; 00000020H
$LN4@AlignLaraA:

; 2210 : 					
; 2211 : 		}
; 2212 : 
; 2213 : 		if (pTestPosition->Flags & TPOS_OPPOSITE_FACING) {

  00175	f6 41 02 10	 test	 BYTE PTR [ecx+2], 16	; 00000010H
  00179	74 16		 je	 SHORT $LN3@AlignLaraA

; 2214 : 			// attivare correzione di orientamento
; 2215 : 			Trng.pGlobTomb4->TestFixLaraMovPos=true;

  0017b	c6 83 d8 e6 00
	00 01		 mov	 BYTE PTR [ebx+59096], 1

; 2216 : 			Trng.pGlobTomb4->OrientFixLaraMovPos = 
; 2217 : 				pItem->OrientationH + DifOrientH;

  00182	66 8b 56 4e	 mov	 dx, WORD PTR [esi+78]
  00186	66 03 55 e4	 add	 dx, WORD PTR _DifOrientH$[ebp]
  0018a	66 89 93 db e6
	00 00		 mov	 WORD PTR [ebx+59099], dx
$LN3@AlignLaraA:

; 2218 : 		}
; 2219 : 		if (pTestPosition->Flags & TPOS_TURN_FACING_180) {

  00191	f6 41 02 80	 test	 BYTE PTR [ecx+2], 128	; 00000080H
  00195	74 17		 je	 SHORT $LN2@AlignLaraA

; 2220 : 			// fixing turning 180
; 2221 : 			Trng.pGlobTomb4->TestFixLaraMovPos = true;

  00197	c6 83 d8 e6 00
	00 01		 mov	 BYTE PTR [ebx+59096], 1

; 2222 : 			Trng.pGlobTomb4->OrientFixLaraMovPos = pItem->OrientationH + 0x8000;

  0019e	b8 00 80 ff ff	 mov	 eax, -32768		; ffff8000H
  001a3	66 03 46 4e	 add	 ax, WORD PTR [esi+78]
  001a7	66 89 83 db e6
	00 00		 mov	 WORD PTR [ebx+59099], ax
$LN2@AlignLaraA:

; 2223 : 		}
; 2224 : 	
; 2225 : 		if (MoveLaraPosition(pMovPos, pItem ,pLara) == false) {

  001ae	57		 push	 edi
  001af	8d 4d ec	 lea	 ecx, DWORD PTR _MovePosData$[ebp]
  001b2	56		 push	 esi
  001b3	51		 push	 ecx
  001b4	ba 50 7b 44 00	 mov	 edx, 4488016		; 00447b50H
  001b9	ff d2		 call	 edx
  001bb	83 c4 0c	 add	 esp, 12			; 0000000cH
  001be	84 c0		 test	 al, al
  001c0	75 1b		 jne	 SHORT $LN1@AlignLaraA

; 2226 : 
; 2227 : 			pItem->OrientationH = SalvaOrientH;

  001c2	66 8b 45 e8	 mov	 ax, WORD PTR _SalvaOrientH$[ebp]
  001c6	66 89 46 4e	 mov	 WORD PTR [esi+78], ax

; 2228 : 
; 2229 : 
; 2230 : 			return false;

  001ca	32 c0		 xor	 al, al

; 2247 : 
; 2248 : }

  001cc	5f		 pop	 edi
  001cd	5e		 pop	 esi
  001ce	5b		 pop	 ebx
  001cf	8b 4d f8	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d2	33 cd		 xor	 ecx, ebp
  001d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d9	8b e5		 mov	 esp, ebp
  001db	5d		 pop	 ebp
  001dc	c3		 ret	 0
$LN1@AlignLaraA:

; 2231 : 		}
; 2232 : 		// completed
; 2233 : 
; 2234 : 		RestoreLara(&SalvaLara, pLara);

  001dd	8b cf		 mov	 ecx, edi
  001df	8d 45 c4	 lea	 eax, DWORD PTR _SalvaLara$[ebp]
  001e2	e8 00 00 00 00	 call	 ?RestoreLara@@YAXPAUStrBackupLara@@PAUStrItemTr4@@@Z ; RestoreLara

; 2235 : 		Trng.pGlobTomb4->TestFixLaraMovPos=false;

  001e7	a1 04 00 00 00	 mov	 eax, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4

; 2236 : 		
; 2237 : 		pItem->OrientationH = SalvaOrientH;

  001ec	66 8b 4d e8	 mov	 cx, WORD PTR _SalvaOrientH$[ebp]
  001f0	c6 80 d8 e6 00
	00 00		 mov	 BYTE PTR [eax+59096], 0
  001f7	66 89 4e 4e	 mov	 WORD PTR [esi+78], cx

; 2238 : 
; 2239 : 		*Trng.pGlobTomb4->pAdr->pObjectActive = -1;

  001fb	8b 90 4a 34 19
	00		 mov	 edx, DWORD PTR [eax+1651786]
  00201	8b 8a 94 00 00
	00		 mov	 ecx, DWORD PTR [edx+148]
  00207	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [ecx], -1

; 2247 : 
; 2248 : }

  0020d	8b 4d f8	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00210	c6 80 a3 5e 21
	00 00		 mov	 BYTE PTR [eax+2186915], 0
  00217	8b 90 4a 34 19
	00		 mov	 edx, DWORD PTR [eax+1651786]
  0021d	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00223	80 20 df	 and	 BYTE PTR [eax], 223	; 000000dfH
  00226	5f		 pop	 edi
  00227	5e		 pop	 esi
  00228	33 cd		 xor	 ecx, ebp
  0022a	b0 01		 mov	 al, 1
  0022c	5b		 pop	 ebx
  0022d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00232	8b e5		 mov	 esp, ebp
  00234	5d		 pop	 ebp
  00235	c3		 ret	 0
?AlignLaraAtPosition@@YA_NPAUStrTestPositionCmd@@H@Z ENDP ; AlignLaraAtPosition
_TEXT	ENDS
PUBLIC	?CheckPositionAlignment@@YA_NPAUStrTestPositionCmd@@H@Z ; CheckPositionAlignment
; Function compile flags: /Ogtp
;	COMDAT ?CheckPositionAlignment@@YA_NPAUStrTestPositionCmd@@H@Z
_TEXT	SEGMENT
?CheckPositionAlignment@@YA_NPAUStrTestPositionCmd@@H@Z PROC ; CheckPositionAlignment, COMDAT
; _pTestPosition$ = edx
; _ObjectIndex$ = eax

; 2063 : 	int Index;
; 2064 : 
; 2065 : 
; 2066 : 
; 2067 : 	if (ObjectIndex & NGLE_INDEX) {

  00000	a9 00 40 00 00	 test	 eax, 16384		; 00004000H
  00005	74 13		 je	 SHORT $LN3@CheckPosit

; 2068 : 		Index = ObjectIndex & MASK_NGLE_INDEX;
; 2069 : 		ObjectIndex = FromNgleIndexToTomb4Index(Index);

  00007	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  0000d	25 ff 3f 00 00	 and	 eax, 16383		; 00003fffH
  00012	0f bf 84 41 74
	2c 1a 00	 movsx	 eax, WORD PTR [ecx+eax*2+1715316]
$LN3@CheckPosit:

; 2070 : 	
; 2071 : 	}	
; 2072 : 
; 2073 : 	if (ObjectIndex==-1) return false;

  0001a	83 f8 ff	 cmp	 eax, -1
  0001d	75 03		 jne	 SHORT $LN2@CheckPosit
  0001f	32 c0		 xor	 al, al

; 2076 : 
; 2077 : 	return true;
; 2078 : }

  00021	c3		 ret	 0
$LN2@CheckPosit:

; 2074 : 
; 2075 : 	if (Service(SRV_F_VerificaTestPosition, pTestPosition, ObjectIndex) ==0) return false;

  00022	50		 push	 eax
  00023	52		 push	 edx
  00024	6a 15		 push	 21			; 00000015H
  00026	e8 00 00 00 00	 call	 ?Service@@YAHKZZ	; Service
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002e	85 c0		 test	 eax, eax
  00030	0f 95 c0	 setne	 al

; 2076 : 
; 2077 : 	return true;
; 2078 : }

  00033	c3		 ret	 0
?CheckPositionAlignment@@YA_NPAUStrTestPositionCmd@@H@Z ENDP ; CheckPositionAlignment
_TEXT	ENDS
PUBLIC	?GetMaxDistance@@YAHPAK0_N@Z			; GetMaxDistance
; Function compile flags: /Ogtp
;	COMDAT ?GetMaxDistance@@YAHPAK0_N@Z
_TEXT	SEGMENT
?GetMaxDistance@@YAHPAK0_N@Z PROC			; GetMaxDistance, COMDAT
; _pSource$ = ebx
; _pTarget$ = edi

; 1881 : 	DWORD DifX;
; 1882 : 	DWORD DifY;
; 1883 : 	DWORD DifZ;
; 1884 : 	DWORD MaxDif;
; 1885 : 
; 1886 : 	DifX = AbsDiff(pSource[0], pTarget[0] );

  00000	8b 03		 mov	 eax, DWORD PTR [ebx]
  00002	2b 07		 sub	 eax, DWORD PTR [edi]
  00004	56		 push	 esi
  00005	99		 cdq
  00006	8b c8		 mov	 ecx, eax

; 1887 : 	if (TestIgnoreY==false) {
; 1888 : 		DifY = AbsDiff(pSource[1],pTarget[1]);

  00008	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0000b	2b 47 04	 sub	 eax, DWORD PTR [edi+4]
  0000e	33 ca		 xor	 ecx, edx
  00010	2b ca		 sub	 ecx, edx
  00012	99		 cdq
  00013	8b f0		 mov	 esi, eax

; 1889 : 	}
; 1890 : 	DifZ = AbsDiff(pSource[2],pTarget[2]);

  00015	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00018	2b 47 08	 sub	 eax, DWORD PTR [edi+8]
  0001b	33 f2		 xor	 esi, edx
  0001d	2b f2		 sub	 esi, edx
  0001f	99		 cdq
  00020	33 c2		 xor	 eax, edx
  00022	2b c2		 sub	 eax, edx

; 1891 : 
; 1892 : 	MaxDif= DifX;
; 1893 : 	if (TestIgnoreY==false) {
; 1894 : 		if (DifY > MaxDif) MaxDif = DifY;

  00024	3b f1		 cmp	 esi, ecx
  00026	76 02		 jbe	 SHORT $LN2@GetMaxDist
  00028	8b ce		 mov	 ecx, esi
$LN2@GetMaxDist:
  0002a	5e		 pop	 esi

; 1895 : 	}
; 1896 : 	if (DifZ > MaxDif) MaxDif = DifZ;

  0002b	3b c1		 cmp	 eax, ecx
  0002d	77 02		 ja	 SHORT $LN1@GetMaxDist

; 1897 : 	return MaxDif;

  0002f	8b c1		 mov	 eax, ecx
$LN1@GetMaxDist:

; 1898 : 
; 1899 : }

  00031	c3		 ret	 0
?GetMaxDistance@@YAHPAK0_N@Z ENDP			; GetMaxDistance
_TEXT	ENDS
PUBLIC	?SendToLog@@YA_NPADZZ				; SendToLog
;	COMDAT ?MyInternalBuffer@?1??SendToLog@@YA_NPADZZ@4PADA
_BSS	SEGMENT
?MyInternalBuffer@?1??SendToLog@@YA_NPADZZ@4PADA DB 0200H DUP (?) ; `SendToLog'::`2'::MyInternalBuffer
; Function compile flags: /Ogtp
_BSS	ENDS
;	COMDAT ?SendToLog@@YA_NPADZZ
_TEXT	SEGMENT
_szFormat$ = 8						; size = 4
?SendToLog@@YA_NPADZZ PROC				; SendToLog, COMDAT

; 1804 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1805 : 	static DWORD* pTombWind4 = (DWORD*) 0x75385C;  //  ;HandleWindowMain
; 1806 : 	static char MyInternalBuffer[512];
; 1807 : 
; 1808 : 	if (*pTombWind4 == 0) return false;

  00003	83 3d 5c 38 75
	00 00		 cmp	 DWORD PTR ds:7682140, 0
  0000a	75 04		 jne	 SHORT $LN1@SendToLog
  0000c	32 c0		 xor	 al, al

; 1817 : 
; 1818 : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
$LN1@SendToLog:

; 1809 : 
; 1810 :     va_list pArgs;
; 1811 :     va_start(pArgs, szFormat);
; 1812 :     vsprintf(MyInternalBuffer, szFormat, pArgs);

  00010	8b 4d 08	 mov	 ecx, DWORD PTR _szFormat$[ebp]
  00013	8d 45 0c	 lea	 eax, DWORD PTR _szFormat$[ebp+4]
  00016	50		 push	 eax
  00017	51		 push	 ecx
  00018	68 00 00 00 00	 push	 OFFSET ?MyInternalBuffer@?1??SendToLog@@YA_NPADZZ@4PADA
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__vsprintf

; 1813 :     va_end(pArgs);
; 1814 : 
; 1815 : 	Service(SRV_F_InviaLog, MyInternalBuffer);

  00023	68 00 00 00 00	 push	 OFFSET ?MyInternalBuffer@?1??SendToLog@@YA_NPADZZ@4PADA
  00028	6a 18		 push	 24			; 00000018H
  0002a	e8 00 00 00 00	 call	 ?Service@@YAHKZZ	; Service
  0002f	83 c4 14	 add	 esp, 20			; 00000014H

; 1816 : 	return true;

  00032	b0 01		 mov	 al, 1

; 1817 : 
; 1818 : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?SendToLog@@YA_NPADZZ ENDP				; SendToLog
_TEXT	ENDS
PUBLIC	?AbsDiffO@@YAHFF@Z				; AbsDiffO
; Function compile flags: /Ogtp
;	COMDAT ?AbsDiffO@@YAHFF@Z
_TEXT	SEGMENT
?AbsDiffO@@YAHFF@Z PROC					; AbsDiffO, COMDAT
; _First$ = eax
; _Second$ = ecx

; 1780 : 
; 1781 : 	short SwapValue;
; 1782 : 	WORD WordValue;
; 1783 : 
; 1784 : 
; 1785 : 	if (First > Second) {

  00000	66 3b c1	 cmp	 ax, cx
  00003	7e 08		 jle	 SHORT $LN2@AbsDiffO

; 1786 : 		SwapValue = First;

  00005	0f b7 d0	 movzx	 edx, ax

; 1787 : 		First = Second;

  00008	0f b7 c1	 movzx	 eax, cx

; 1788 : 		Second = SwapValue;

  0000b	8b ca		 mov	 ecx, edx
$LN2@AbsDiffO:

; 1789 : 	}
; 1790 : 
; 1791 : 	// check for problem: first value is negative (very little value) and second positive (very higher value)
; 1792 : 	// but really two values are very closed (0x7fff 0x8001)
; 1793 : 	if (First < -16384 && Second > 16384) {

  0000d	ba 00 c0 ff ff	 mov	 edx, -16384		; ffffc000H
  00012	66 3b c2	 cmp	 ax, dx
  00015	7d 18		 jge	 SHORT $LN1@AbsDiffO
  00017	ba 00 40 00 00	 mov	 edx, 16384		; 00004000H
  0001c	66 3b ca	 cmp	 cx, dx
  0001f	7e 0e		 jle	 SHORT $LN1@AbsDiffO

; 1794 : 		// compute with positive values
; 1795 : 		WordValue = (WORD) First;
; 1796 : 		return AbsDiffY(WordValue, Second);

  00021	0f b7 c0	 movzx	 eax, ax
  00024	0f bf c9	 movsx	 ecx, cx
  00027	2b c1		 sub	 eax, ecx

; 1797 : 	}
; 1798 : 
; 1799 : 	return abs(First-Second);

  00029	99		 cdq
  0002a	33 c2		 xor	 eax, edx
  0002c	2b c2		 sub	 eax, edx

; 1800 : }

  0002e	c3		 ret	 0
$LN1@AbsDiffO:

; 1797 : 	}
; 1798 : 
; 1799 : 	return abs(First-Second);

  0002f	98		 cwde
  00030	0f bf d1	 movsx	 edx, cx
  00033	2b c2		 sub	 eax, edx
  00035	99		 cdq
  00036	33 c2		 xor	 eax, edx
  00038	2b c2		 sub	 eax, edx

; 1800 : }

  0003a	c3		 ret	 0
?AbsDiffO@@YAHFF@Z ENDP					; AbsDiffO
PUBLIC	?GetColorRgb@@YAKFK_NPAD@Z			; GetColorRgb
; Function compile flags: /Ogtp
;	COMDAT ?GetColorRgb@@YAKFK_NPAD@Z
_TEXT	SEGMENT
_NewColor$ = -4						; size = 4
_TestInvert$ = 8					; size = 1
?GetColorRgb@@YAKFK_NPAD@Z PROC				; GetColorRgb, COMDAT
; _IdColorRgb$ = eax

; 3892 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 3893 : 	
; 3894 : 	int Indice;
; 3895 : 	COLORREF NewColor;
; 3896 : 	StrSingleColors *pDest;
; 3897 : 	StrColorRGB *pRgb;
; 3898 : 
; 3899 : 	if (IdColorRgb < 0) {

  00004	66 85 c0	 test	 ax, ax
  00007	79 1b		 jns	 SHORT $LN3@GetColorRg

; 3900 : 		SendToLog("ERROR it has not been set the ID for ColorRbg in the script command %s", pMexCommand);

  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MLPNHJIJ@Get?$CI?$CJ?5function?$AA@
  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@DLBKKJCI@ERROR?5it?5has?5not?5been?5set?5the?5ID@
  00013	e8 00 00 00 00	 call	 ?SendToLog@@YA_NPADZZ	; SendToLog
  00018	83 c4 08	 add	 esp, 8

; 3901 : 		return DefColor;

  0001b	b8 00 00 00 ff	 mov	 eax, -16777216		; ff000000H

; 3926 : 
; 3927 : 
; 3928 : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
$LN3@GetColorRg:

; 3902 : 	}
; 3903 : 
; 3904 : 	Indice = Trng.pGlobTomb4->BaseColoriRGB.VetID[IdColorRgb];

  00024	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  0002a	0f bf c8	 movsx	 ecx, ax
  0002d	0f bf 84 4a f6
	56 09 00	 movsx	 eax, WORD PTR [edx+ecx*2+612086]

; 3905 : 	
; 3906 : 	if (Indice == -1) {

  00035	83 f8 ff	 cmp	 eax, -1
  00038	75 1c		 jne	 SHORT $LN2@GetColorRg

; 3907 : 		SendToLog("INTERNAL ERROR: not found the ColorRgb command with id = %d (called from %s)", 
; 3908 : 							IdColorRgb, pMexCommand);

  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MLPNHJIJ@Get?$CI?$CJ?5function?$AA@
  0003f	51		 push	 ecx
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@EBIKAGHH@INTERNAL?5ERROR?3?5not?5found?5the?5Co@
  00045	e8 00 00 00 00	 call	 ?SendToLog@@YA_NPADZZ	; SendToLog
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3909 : 		return DefColor;

  0004d	b8 00 00 00 ff	 mov	 eax, -16777216		; ff000000H

; 3926 : 
; 3927 : 
; 3928 : }

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
$LN2@GetColorRg:

; 3910 : 	}
; 3911 : 	pRgb = &Trng.pGlobTomb4->BaseColoriRGB.VetColori[Indice];
; 3912 : 
; 3913 : 	if (TestInvert) {

  00056	80 7d 08 00	 cmp	 BYTE PTR _TestInvert$[ebp], 0
  0005a	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0005d	8d 84 42 46 52
	09 00		 lea	 eax, DWORD PTR [edx+eax*2+610886]
  00064	74 1d		 je	 SHORT $LN1@GetColorRg

; 3914 : 		pDest = (StrSingleColors *) &NewColor;
; 3915 : 
; 3916 : 
; 3917 : 		pDest->Blue = pRgb->Single.Red;

  00066	8a 48 02	 mov	 cl, BYTE PTR [eax+2]

; 3918 : 		pDest->Green = pRgb->Single.Green;

  00069	8a 50 03	 mov	 dl, BYTE PTR [eax+3]

; 3919 : 		pDest->Red = pRgb->Single.Blue;

  0006c	8a 40 04	 mov	 al, BYTE PTR [eax+4]
  0006f	88 4d fe	 mov	 BYTE PTR _NewColor$[ebp+2], cl
  00072	88 55 fd	 mov	 BYTE PTR _NewColor$[ebp+1], dl
  00075	88 45 fc	 mov	 BYTE PTR _NewColor$[ebp], al

; 3920 : 		pDest->Unused = 0;

  00078	c6 45 ff 00	 mov	 BYTE PTR _NewColor$[ebp+3], 0

; 3921 : 		return NewColor;

  0007c	8b 45 fc	 mov	 eax, DWORD PTR _NewColor$[ebp]

; 3926 : 
; 3927 : 
; 3928 : }

  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
$LN1@GetColorRg:

; 3922 : 	}
; 3923 : 
; 3924 : 
; 3925 : 	return pRgb->Colore;

  00083	8b 40 02	 mov	 eax, DWORD PTR [eax+2]

; 3926 : 
; 3927 : 
; 3928 : }

  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
?GetColorRgb@@YAKFK_NPAD@Z ENDP				; GetColorRgb
_TEXT	ENDS
PUBLIC	?CheckControlGlobTomb4@@YA_NXZ			; CheckControlGlobTomb4
; Function compile flags: /Ogtp
;	COMDAT ?CheckControlGlobTomb4@@YA_NXZ
_TEXT	SEGMENT
?CheckControlGlobTomb4@@YA_NXZ PROC			; CheckControlGlobTomb4, COMDAT

; 3817 : 
; 3818 : 	if (Trng.pGlobTomb4->CheckValue1_3_0_0 != 0x01234567) {

  00000	a1 04 00 00 00	 mov	 eax, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  00005	81 b8 a8 5e 21
	00 67 45 23 01	 cmp	 DWORD PTR [eax+2186920], 19088743 ; 01234567H
  0000f	74 1b		 je	 SHORT $LN1@CheckContr

; 3819 : 		// globtomb4 changed 
; 3820 : 		SendErrorToDiskLog("ERROR: failed check of alignment value of GlobTomb4 structure for 1.3.0.0 version", Trng.IdMyPlugin, false);

  00011	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?Trng@@3UStrTrngInfos@@A
  00017	6a 00		 push	 0
  00019	51		 push	 ecx
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0FC@LGLKDBFF@ERROR?3?5failed?5check?5of?5alignment@
  0001f	6a 11		 push	 17			; 00000011H
  00021	e8 00 00 00 00	 call	 ?Service@@YAHKZZ	; Service
  00026	83 c4 10	 add	 esp, 16			; 00000010H

; 3821 : 		return false;

  00029	32 c0		 xor	 al, al

; 3826 : 
; 3827 : }

  0002b	c3		 ret	 0
$LN1@CheckContr:

; 3822 : 
; 3823 : 	}
; 3824 : 
; 3825 : 	return true;

  0002c	b0 01		 mov	 al, 1

; 3826 : 
; 3827 : }

  0002e	c3		 ret	 0
?CheckControlGlobTomb4@@YA_NXZ ENDP			; CheckControlGlobTomb4
PUBLIC	?AddTokenFinalSequence@@YAXPAPAGPAH@Z		; AddTokenFinalSequence
; Function compile flags: /Ogtp
;	COMDAT ?AddTokenFinalSequence@@YAXPAPAGPAH@Z
_TEXT	SEGMENT
?AddTokenFinalSequence@@YAXPAPAGPAH@Z PROC		; AddTokenFinalSequence, COMDAT
; _pNWords$ = edi

; 3404 : {

  00000	56		 push	 esi

; 3405 : 
; 3406 : 	DWORD SizeMem;
; 3407 : 	WORD *pVetExtra;
; 3408 : 	int IndiceWords;
; 3409 : 
; 3410 : 	pVetExtra = *p2VetExtra;
; 3411 : 	IndiceWords  = *pNWords;

  00001	8b 37		 mov	 esi, DWORD PTR [edi]

; 3412 : 
; 3413 : 	SizeMem = (IndiceWords+2) * 2;

  00003	8d 44 36 04	 lea	 eax, DWORD PTR [esi+esi+4]

; 3414 : 
; 3415 : 	if (IndiceWords) {
; 3416 : 		pVetExtra = (WORD *) ResizeMemory(pVetExtra, SizeMem);

  00007	50		 push	 eax
  00008	85 f6		 test	 esi, esi
  0000a	74 25		 je	 SHORT $LN2@AddTokenFi
  0000c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pVetExtras@?1??cbSaveMyData@@YAKPAPAEH@Z@4PAGA
  00012	85 c9		 test	 ecx, ecx
  00014	74 1b		 je	 SHORT $LN2@AddTokenFi
  00016	51		 push	 ecx
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__realloc

; 3420 : 	}	
; 3421 : 
; 3422 : 	pVetExtra[IndiceWords++]= NGTAG_END_SEQUENCE;

  0001d	33 c9		 xor	 ecx, ecx
  0001f	89 0c 70	 mov	 DWORD PTR [eax+esi*2], ecx
  00022	83 c4 08	 add	 esp, 8

; 3423 : 	pVetExtra[IndiceWords++]= NGTAG_END_SEQUENCE;

  00025	83 c6 02	 add	 esi, 2

; 3424 : 	
; 3425 : 	*p2VetExtra= pVetExtra;
; 3426 : 	*pNWords= IndiceWords;

  00028	89 37		 mov	 DWORD PTR [edi], esi
  0002a	a3 00 00 00 00	 mov	 DWORD PTR ?pVetExtras@?1??cbSaveMyData@@YAKPAPAEH@Z@4PAGA, eax
  0002f	5e		 pop	 esi

; 3427 : 	
; 3428 : }

  00030	c3		 ret	 0
$LN2@AddTokenFi:

; 3417 : 	}else {
; 3418 : 		// e' azzerato, allocare adesso
; 3419 : 		pVetExtra = (WORD *) GetMemory(SizeMem);

  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc

; 3420 : 	}	
; 3421 : 
; 3422 : 	pVetExtra[IndiceWords++]= NGTAG_END_SEQUENCE;

  00037	33 c9		 xor	 ecx, ecx
  00039	89 0c 70	 mov	 DWORD PTR [eax+esi*2], ecx

; 3423 : 	pVetExtra[IndiceWords++]= NGTAG_END_SEQUENCE;

  0003c	83 c6 02	 add	 esi, 2
  0003f	83 c4 04	 add	 esp, 4

; 3424 : 	
; 3425 : 	*p2VetExtra= pVetExtra;
; 3426 : 	*pNWords= IndiceWords;

  00042	89 37		 mov	 DWORD PTR [edi], esi
  00044	a3 00 00 00 00	 mov	 DWORD PTR ?pVetExtras@?1??cbSaveMyData@@YAKPAPAEH@Z@4PAGA, eax
  00049	5e		 pop	 esi

; 3427 : 	
; 3428 : }

  0004a	c3		 ret	 0
?AddTokenFinalSequence@@YAXPAPAGPAH@Z ENDP		; AddTokenFinalSequence
_TEXT	ENDS
PUBLIC	?AddNGToken@@YAXGKKPAXPAPAGPAH@Z		; AddNGToken
; Function compile flags: /Ogtp
;	COMDAT ?AddNGToken@@YAXGKKPAXPAPAGPAH@Z
_TEXT	SEGMENT
tv345 = -8						; size = 4
tv263 = -8						; size = 4
_TotBytes$ = -4						; size = 4
_pVetExtra$ = -4					; size = 4
_NGTag$ = 8						; size = 2
tv340 = 12						; size = 4
_TotItem$ = 12						; size = 4
_SizeSingleItem$ = 16					; size = 4
_pData$ = 20						; size = 4
_pNWords$ = 24						; size = 4
?AddNGToken@@YAXGKKPAXPAPAGPAH@Z PROC			; AddNGToken, COMDAT

; 3299 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 3300 : 	WORD TotRecord;
; 3301 : 	DWORD TotBytes;
; 3302 : 	DWORD NumeroWords;
; 3303 : 	DWORD SizeMem;
; 3304 : 	WORD *pVetExtra;
; 3305 : 	int IndiceWords;
; 3306 : 
; 3307 : 	pVetExtra = *p2VetExtra;
; 3308 : 
; 3309 : 
; 3310 : 	IndiceWords  = *pNWords;

  00006	8b 45 18	 mov	 eax, DWORD PTR _pNWords$[ebp]
  00009	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pVetExtras@?1??cbSaveMyData@@YAKPAPAEH@Z@4PAGA
  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	8b 30		 mov	 esi, DWORD PTR [eax]

; 3311 : 	
; 3312 : 	SizeMem = IndiceWords * 2 + 100;
; 3313 : 
; 3314 : 	if (TotItem == NO_ARRAY) {

  00013	8b 45 0c	 mov	 eax, DWORD PTR _TotItem$[ebp]
  00016	8b d1		 mov	 edx, ecx
  00018	57		 push	 edi
  00019	89 55 fc	 mov	 DWORD PTR _pVetExtra$[ebp], edx
  0001c	8d 7c 36 64	 lea	 edi, DWORD PTR [esi+esi+100]
  00020	3d 00 00 01 00	 cmp	 eax, 65536		; 00010000H
  00025	0f 85 c2 00 00
	00		 jne	 $LN16@AddNGToken

; 3315 : 		TotRecord=1;
; 3316 : 		TotBytes = SizeSingleItem;
; 3317 : 		
; 3318 : 		NumeroWords = 2 + (TotBytes/2);

  0002b	8b 45 10	 mov	 eax, DWORD PTR _SizeSingleItem$[ebp]
  0002e	8b d8		 mov	 ebx, eax
  00030	d1 eb		 shr	 ebx, 1
  00032	89 5d 0c	 mov	 DWORD PTR tv340[ebp], ebx

; 3319 : 
; 3320 : 		if (TotBytes & 1) {

  00035	8b c8		 mov	 ecx, eax
  00037	83 c3 02	 add	 ebx, 2
  0003a	83 e1 01	 and	 ecx, 1
  0003d	89 4d f8	 mov	 DWORD PTR tv345[ebp], ecx
  00040	74 1c		 je	 SHORT $LN35@AddNGToken

; 3321 : 			// skip message if bytes amout is onlt = 1
; 3322 : 			if (TotBytes > 1) {

  00042	83 f8 01	 cmp	 eax, 1
  00045	76 16		 jbe	 SHORT $LN34@AddNGToken

; 3323 : 				SendToLog("WARNING: in AddNGToken(): Size of structure for Tag=0x%X is not even (%d). It has been added one extra byte.",
; 3324 : 					NGTag, TotBytes);

  00047	0f b7 4d 08	 movzx	 ecx, WORD PTR _NGTag$[ebp]
  0004b	50		 push	 eax
  0004c	51		 push	 ecx
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0GN@CMHLICFP@WARNING?3?5in?5AddNGToken?$CI?$CJ?3?5Size?5o@
  00052	e8 00 00 00 00	 call	 ?SendToLog@@YA_NPADZZ	; SendToLog
  00057	8b 55 fc	 mov	 edx, DWORD PTR _pVetExtra$[ebp]
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN34@AddNGToken:

; 3325 : 			}
; 3326 : 			// increase by 1 number of words to host the extra byte
; 3327 : 			NumeroWords++;

  0005d	43		 inc	 ebx
$LN35@AddNGToken:

; 3328 : 	
; 3329 : 		}
; 3330 : 		if (NumeroWords > 0x7fff) {

  0005e	81 fb ff 7f 00
	00		 cmp	 ebx, 32767		; 00007fffH
  00064	76 01		 jbe	 SHORT $LN13@AddNGToken

; 3331 : 			// ci vorranno due words quindi aumentare di 1 le words
; 3332 : 			NumeroWords++;

  00066	43		 inc	 ebx
$LN13@AddNGToken:

; 3333 : 		}
; 3334 : 
; 3335 : 		SizeMem += NumeroWords * 2;

  00067	8d 04 5f	 lea	 eax, DWORD PTR [edi+ebx*2]

; 3336 : 		if (IndiceWords) {
; 3337 : 			pVetExtra = (WORD *) ResizeMemory(pVetExtra, SizeMem);

  0006a	50		 push	 eax
  0006b	85 f6		 test	 esi, esi
  0006d	74 10		 je	 SHORT $LN12@AddNGToken
  0006f	85 d2		 test	 edx, edx
  00071	74 0c		 je	 SHORT $LN12@AddNGToken
  00073	52		 push	 edx
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__realloc
  0007a	83 c4 08	 add	 esp, 8

; 3338 : 		}else {

  0007d	eb 09		 jmp	 SHORT $LN37@AddNGToken
$LN12@AddNGToken:

; 3339 : 			// e' azzerato, allocare adesso
; 3340 : 			pVetExtra = (WORD *) GetMemory(SizeMem);

  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00085	83 c4 04	 add	 esp, 4
$LN37@AddNGToken:
  00088	8b f8		 mov	 edi, eax

; 3341 : 		}
; 3342 : 
; 3343 : 		if (NumeroWords > 0x7fff) {

  0008a	81 fb ff 7f 00
	00		 cmp	 ebx, 32767		; 00007fffH
  00090	76 19		 jbe	 SHORT $LN10@AddNGToken

; 3344 : 			// e' una dword
; 3345 : 			pVetExtra[IndiceWords++] = (WORD) ((NumeroWords >> 16) | 0x8000);

  00092	8b d3		 mov	 edx, ebx
  00094	c1 ea 10	 shr	 edx, 16			; 00000010H
  00097	81 ca 00 80 00
	00		 or	 edx, 32768		; 00008000H
  0009d	66 89 14 77	 mov	 WORD PTR [edi+esi*2], dx

; 3346 : 			pVetExtra[IndiceWords++] = (WORD) (NumeroWords & 0xffff);

  000a1	66 89 5c 77 02	 mov	 WORD PTR [edi+esi*2+2], bx
  000a6	83 c6 02	 add	 esi, 2

; 3347 : 
; 3348 : 		}else {

  000a9	eb 05		 jmp	 SHORT $LN9@AddNGToken
$LN10@AddNGToken:

; 3349 : 			pVetExtra[IndiceWords++] = (WORD) NumeroWords;

  000ab	66 89 1c 77	 mov	 WORD PTR [edi+esi*2], bx
  000af	46		 inc	 esi
$LN9@AddNGToken:

; 3350 : 		}	
; 3351 : 
; 3352 : 		pVetExtra[IndiceWords++] = NGTag;

  000b0	66 8b 45 08	 mov	 ax, WORD PTR _NGTag$[ebp]

; 3353 : 
; 3354 : 		memcpy(&pVetExtra[IndiceWords], pData, TotBytes);

  000b4	8b 4d 10	 mov	 ecx, DWORD PTR _SizeSingleItem$[ebp]
  000b7	8b 55 14	 mov	 edx, DWORD PTR _pData$[ebp]
  000ba	66 89 04 77	 mov	 WORD PTR [edi+esi*2], ax
  000be	51		 push	 ecx
  000bf	46		 inc	 esi
  000c0	52		 push	 edx
  000c1	8d 04 77	 lea	 eax, DWORD PTR [edi+esi*2]
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 _memcpy

; 3355 : 
; 3356 : 		IndiceWords += (TotBytes / 2);

  000ca	03 75 0c	 add	 esi, DWORD PTR tv340[ebp]
  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3357 : 
; 3358 : 		if (TotBytes & 0x001) IndiceWords++;

  000d0	83 7d f8 00	 cmp	 DWORD PTR tv345[ebp], 0

; 3400 : 	*p2VetExtra = pVetExtra;

  000d4	89 3d 00 00 00
	00		 mov	 DWORD PTR ?pVetExtras@?1??cbSaveMyData@@YAKPAPAEH@Z@4PAGA, edi
  000da	0f 84 b6 00 00
	00		 je	 $LN33@AddNGToken

; 3357 : 
; 3358 : 		if (TotBytes & 0x001) IndiceWords++;

  000e0	8b 4d 18	 mov	 ecx, DWORD PTR _pNWords$[ebp]
  000e3	46		 inc	 esi
  000e4	5f		 pop	 edi

; 3393 : 
; 3394 : 		IndiceWords += (TotBytes / 2);
; 3395 : 	}
; 3396 : 
; 3397 : 
; 3398 : 
; 3399 : 	*pNWords = IndiceWords;

  000e5	89 31		 mov	 DWORD PTR [ecx], esi
  000e7	5e		 pop	 esi
  000e8	5b		 pop	 ebx

; 3401 : }

  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c3		 ret	 0
$LN16@AddNGToken:

; 3359 : 
; 3360 : 
; 3361 : 	}else {
; 3362 : 
; 3363 : 		TotRecord = (WORD) TotItem;
; 3364 : 		TotBytes = SizeSingleItem * TotRecord;

  000ed	0f b7 c0	 movzx	 eax, ax
  000f0	0f af 45 10	 imul	 eax, DWORD PTR _SizeSingleItem$[ebp]
  000f4	89 45 fc	 mov	 DWORD PTR _TotBytes$[ebp], eax

; 3365 : 
; 3366 : 		if (TotBytes & 1) TotBytes++;

  000f7	a8 01		 test	 al, 1
  000f9	74 04		 je	 SHORT $LN36@AddNGToken
  000fb	40		 inc	 eax
  000fc	89 45 fc	 mov	 DWORD PTR _TotBytes$[ebp], eax
$LN36@AddNGToken:

; 3367 : 
; 3368 : 		NumeroWords = 3 + (TotBytes /2);

  000ff	d1 e8		 shr	 eax, 1
  00101	8d 58 03	 lea	 ebx, DWORD PTR [eax+3]
  00104	89 45 f8	 mov	 DWORD PTR tv263[ebp], eax

; 3369 : 
; 3370 : 		if (NumeroWords > 0x7fff) {

  00107	81 fb ff 7f 00
	00		 cmp	 ebx, 32767		; 00007fffH
  0010d	76 01		 jbe	 SHORT $LN5@AddNGToken

; 3371 : 			NumeroWords++;

  0010f	43		 inc	 ebx
$LN5@AddNGToken:

; 3372 : 		}
; 3373 : 
; 3374 : 		SizeMem += NumeroWords * 2;

  00110	8d 04 5f	 lea	 eax, DWORD PTR [edi+ebx*2]

; 3375 : 
; 3376 : 		if (IndiceWords) {
; 3377 : 			pVetExtra = (WORD *) ResizeMemory(pVetExtra, SizeMem);

  00113	50		 push	 eax
  00114	85 f6		 test	 esi, esi
  00116	74 10		 je	 SHORT $LN4@AddNGToken
  00118	85 c9		 test	 ecx, ecx
  0011a	74 0c		 je	 SHORT $LN4@AddNGToken
  0011c	51		 push	 ecx
  0011d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__realloc
  00123	83 c4 08	 add	 esp, 8

; 3378 : 		}else {

  00126	eb 09		 jmp	 SHORT $LN38@AddNGToken
$LN4@AddNGToken:

; 3379 : 			// e' azzerato, allocare adesso
; 3380 : 			pVetExtra = (WORD *) GetMemory(SizeMem);

  00128	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0012e	83 c4 04	 add	 esp, 4
$LN38@AddNGToken:
  00131	8b f8		 mov	 edi, eax

; 3381 : 		}
; 3382 : 		if (NumeroWords > 0x7fff) {

  00133	81 fb ff 7f 00
	00		 cmp	 ebx, 32767		; 00007fffH
  00139	76 19		 jbe	 SHORT $LN2@AddNGToken

; 3383 : 			pVetExtra[IndiceWords++] = (WORD) ((NumeroWords >> 16) | 0x8000);

  0013b	8b d3		 mov	 edx, ebx
  0013d	c1 ea 10	 shr	 edx, 16			; 00000010H
  00140	81 ca 00 80 00
	00		 or	 edx, 32768		; 00008000H
  00146	66 89 14 77	 mov	 WORD PTR [edi+esi*2], dx

; 3384 : 			pVetExtra[IndiceWords++] = (WORD) (NumeroWords & 0xffff);

  0014a	66 89 5c 77 02	 mov	 WORD PTR [edi+esi*2+2], bx
  0014f	83 c6 02	 add	 esi, 2

; 3385 : 		}else {

  00152	eb 05		 jmp	 SHORT $LN1@AddNGToken
$LN2@AddNGToken:

; 3386 : 			pVetExtra[IndiceWords++] = (WORD) NumeroWords;

  00154	66 89 1c 77	 mov	 WORD PTR [edi+esi*2], bx
  00158	46		 inc	 esi
$LN1@AddNGToken:

; 3387 : 		}
; 3388 : 
; 3389 : 		pVetExtra[IndiceWords++] = NGTag;

  00159	66 8b 45 08	 mov	 ax, WORD PTR _NGTag$[ebp]

; 3390 : 		pVetExtra[IndiceWords++] = TotRecord;

  0015d	66 8b 4d 0c	 mov	 cx, WORD PTR _TotItem$[ebp]

; 3391 : 
; 3392 : 		memcpy(&pVetExtra[IndiceWords], pData, TotBytes);

  00161	8b 55 fc	 mov	 edx, DWORD PTR _TotBytes$[ebp]
  00164	66 89 04 77	 mov	 WORD PTR [edi+esi*2], ax
  00168	8b 45 14	 mov	 eax, DWORD PTR _pData$[ebp]
  0016b	66 89 4c 77 02	 mov	 WORD PTR [edi+esi*2+2], cx
  00170	52		 push	 edx
  00171	83 c6 02	 add	 esi, 2
  00174	50		 push	 eax
  00175	8d 0c 77	 lea	 ecx, DWORD PTR [edi+esi*2]
  00178	51		 push	 ecx
  00179	e8 00 00 00 00	 call	 _memcpy

; 3393 : 
; 3394 : 		IndiceWords += (TotBytes / 2);
; 3395 : 	}
; 3396 : 
; 3397 : 
; 3398 : 
; 3399 : 	*pNWords = IndiceWords;

  0017e	8b 55 18	 mov	 edx, DWORD PTR _pNWords$[ebp]
  00181	83 c4 0c	 add	 esp, 12			; 0000000cH
  00184	03 75 f8	 add	 esi, DWORD PTR tv263[ebp]

; 3400 : 	*p2VetExtra = pVetExtra;

  00187	89 3d 00 00 00
	00		 mov	 DWORD PTR ?pVetExtras@?1??cbSaveMyData@@YAKPAPAEH@Z@4PAGA, edi
  0018d	5f		 pop	 edi
  0018e	89 32		 mov	 DWORD PTR [edx], esi
  00190	5e		 pop	 esi
  00191	5b		 pop	 ebx

; 3401 : }

  00192	8b e5		 mov	 esp, ebp
  00194	5d		 pop	 ebp
  00195	c3		 ret	 0
$LN33@AddNGToken:

; 3393 : 
; 3394 : 		IndiceWords += (TotBytes / 2);
; 3395 : 	}
; 3396 : 
; 3397 : 
; 3398 : 
; 3399 : 	*pNWords = IndiceWords;

  00196	8b 45 18	 mov	 eax, DWORD PTR _pNWords$[ebp]
  00199	5f		 pop	 edi
  0019a	89 30		 mov	 DWORD PTR [eax], esi
  0019c	5e		 pop	 esi
  0019d	5b		 pop	 ebx

; 3401 : }

  0019e	8b e5		 mov	 esp, ebp
  001a0	5d		 pop	 ebp
  001a1	c3		 ret	 0
?AddNGToken@@YAXGKKPAXPAPAGPAH@Z ENDP			; AddNGToken
_TEXT	ENDS
PUBLIC	?FindPluginID@@YAHQAD@Z				; FindPluginID
; Function compile flags: /Ogtp
;	COMDAT ?FindPluginID@@YAHQAD@Z
_TEXT	SEGMENT
?FindPluginID@@YAHQAD@Z PROC				; FindPluginID, COMDAT

; 3017 : {

  00000	56		 push	 esi

; 3018 : 	int i;
; 3019 : 
; 3020 : 	for (i=0;i<Trng.TotPlugins;i++) {

  00001	33 f6		 xor	 esi, esi
  00003	57		 push	 edi
  00004	39 35 28 00 00
	00		 cmp	 DWORD PTR ?Trng@@3UStrTrngInfos@@A+40, esi
  0000a	7e 23		 jle	 SHORT $LN2@FindPlugin
  0000c	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__strcmpi
$LL4@FindPlugin:

; 3021 : 		if (strcmpi(PluginName, Trng.pVetPluginNames[i])==0) {

  00012	a1 2c 00 00 00	 mov	 eax, DWORD PTR ?Trng@@3UStrTrngInfos@@A+44
  00017	8b 0c b0	 mov	 ecx, DWORD PTR [eax+esi*4]
  0001a	51		 push	 ecx
  0001b	6a 00		 push	 0
  0001d	ff d7		 call	 edi
  0001f	83 c4 08	 add	 esp, 8
  00022	85 c0		 test	 eax, eax
  00024	74 1e		 je	 SHORT $LN8@FindPlugin

; 3018 : 	int i;
; 3019 : 
; 3020 : 	for (i=0;i<Trng.TotPlugins;i++) {

  00026	46		 inc	 esi
  00027	3b 35 28 00 00
	00		 cmp	 esi, DWORD PTR ?Trng@@3UStrTrngInfos@@A+40
  0002d	7c e3		 jl	 SHORT $LL4@FindPlugin
$LN2@FindPlugin:

; 3023 : 		}
; 3024 : 	}
; 3025 : 
; 3026 : 	SendToLog("ERROR: cann't locate plugin: \"%s\"", PluginName);

  0002f	6a 00		 push	 0
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@BEHLMMOJ@ERROR?3?5cann?8t?5locate?5plugin?3?5?$CC?$CFs@
  00036	e8 00 00 00 00	 call	 ?SendToLog@@YA_NPADZZ	; SendToLog
  0003b	83 c4 08	 add	 esp, 8
  0003e	5f		 pop	 edi

; 3027 : 
; 3028 : 
; 3029 : 	return -1;

  0003f	83 c8 ff	 or	 eax, -1
  00042	5e		 pop	 esi

; 3030 : 
; 3031 : 	
; 3032 : }

  00043	c3		 ret	 0
$LN8@FindPlugin:
  00044	5f		 pop	 edi

; 3022 : 			return i;

  00045	8b c6		 mov	 eax, esi
  00047	5e		 pop	 esi

; 3030 : 
; 3031 : 	
; 3032 : }

  00048	c3		 ret	 0
?FindPluginID@@YAHQAD@Z ENDP				; FindPluginID
_TEXT	ENDS
PUBLIC	?GetAlignedOrient@@YAFF_NPAH@Z			; GetAlignedOrient
; Function compile flags: /Ogtp
;	COMDAT ?GetAlignedOrient@@YAFF_NPAH@Z
_TEXT	SEGMENT
?GetAlignedOrient@@YAFF_NPAH@Z PROC			; GetAlignedOrient, COMDAT
; _Orient$ = esi
; _pGap$ = edi

; 2467 : 	int MinDiff;
; 2468 : 
; 2469 : 	if (TestForceHortogonal==false) {
; 2470 : 		// verify if perfect direction more closed is one on diagonal direction
; 2471 : 		// try south-east (ngle) direction
; 2472 : 		MinDiff = AbsDiffO(Orient, 0x2000);

  00000	b9 00 20 00 00	 mov	 ecx, 8192		; 00002000H
  00005	8b d1		 mov	 edx, ecx
  00007	0f b7 c6	 movzx	 eax, si
  0000a	66 3b f2	 cmp	 si, dx
  0000d	7e 05		 jle	 SHORT $LN13@GetAligned
  0000f	8b c1		 mov	 eax, ecx
  00011	0f b7 ce	 movzx	 ecx, si
$LN13@GetAligned:
  00014	98		 cwde
  00015	0f bf c9	 movsx	 ecx, cx
  00018	2b c1		 sub	 eax, ecx
  0001a	99		 cdq
  0001b	33 c2		 xor	 eax, edx
  0001d	2b c2		 sub	 eax, edx

; 2473 : 		if (MinDiff <= 0x1000) {

  0001f	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00024	7f 09		 jg	 SHORT $LN8@GetAligned

; 2474 : 			*pGap=MinDiff;

  00026	89 07		 mov	 DWORD PTR [edi], eax

; 2475 : 			return enumORIENT.SOUTH_EAST;

  00028	66 a1 10 00 00
	00		 mov	 ax, WORD PTR ?enumORIENT@@3UStrEnumORIENT@@A+16

; 2539 : 
; 2540 : 	
; 2541 : }

  0002e	c3		 ret	 0
$LN8@GetAligned:

; 2476 : 		}
; 2477 : 
; 2478 : 		// try south-west direction
; 2479 : 		MinDiff= AbsDiffO(Orient, 0x6000);

  0002f	b9 00 60 00 00	 mov	 ecx, 24576		; 00006000H
  00034	8b d1		 mov	 edx, ecx
  00036	0f b7 c6	 movzx	 eax, si
  00039	66 3b f2	 cmp	 si, dx
  0003c	7e 20		 jle	 SHORT $LN19@GetAligned
  0003e	8b c1		 mov	 eax, ecx
  00040	0f b7 ce	 movzx	 ecx, si
$LN18@GetAligned:
  00043	98		 cwde
  00044	0f bf c9	 movsx	 ecx, cx
  00047	2b c1		 sub	 eax, ecx
$LN37@GetAligned:
  00049	99		 cdq
  0004a	33 c2		 xor	 eax, edx
  0004c	2b c2		 sub	 eax, edx

; 2480 : 		if (MinDiff <= 0x1000) {

  0004e	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00053	7f 1d		 jg	 SHORT $LN7@GetAligned

; 2481 : 			*pGap =MinDiff;

  00055	89 07		 mov	 DWORD PTR [edi], eax

; 2482 : 			return enumORIENT.SOUTH_WEST;

  00057	66 a1 18 00 00
	00		 mov	 ax, WORD PTR ?enumORIENT@@3UStrEnumORIENT@@A+24

; 2539 : 
; 2540 : 	
; 2541 : }

  0005d	c3		 ret	 0

; 2476 : 		}
; 2477 : 
; 2478 : 		// try south-west direction
; 2479 : 		MinDiff= AbsDiffO(Orient, 0x6000);

$LN19@GetAligned:
  0005e	ba 00 c0 ff ff	 mov	 edx, -16384		; ffffc000H
  00063	66 3b f2	 cmp	 si, dx
  00066	7d db		 jge	 SHORT $LN18@GetAligned
  00068	0f b7 c6	 movzx	 eax, si
  0006b	2d 00 60 00 00	 sub	 eax, 24576		; 00006000H
  00070	eb d7		 jmp	 SHORT $LN37@GetAligned
$LN7@GetAligned:

; 2483 : 		}
; 2484 : 
; 2485 : 
; 2486 : 		MinDiff = AbsDiffO(Orient, (short) 0xA000);

  00072	b9 00 a0 ff ff	 mov	 ecx, -24576		; ffffa000H
  00077	8b c6		 mov	 eax, esi
  00079	e8 00 00 00 00	 call	 ?AbsDiffO@@YAHFF@Z	; AbsDiffO

; 2487 : 
; 2488 : 		if (MinDiff <= 0x1000) {

  0007e	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00083	7f 09		 jg	 SHORT $LN6@GetAligned

; 2489 : 			*pGap =MinDiff;

  00085	89 07		 mov	 DWORD PTR [edi], eax

; 2490 : 			return enumORIENT.NORTH_WEST;

  00087	66 a1 1c 00 00
	00		 mov	 ax, WORD PTR ?enumORIENT@@3UStrEnumORIENT@@A+28

; 2539 : 
; 2540 : 	
; 2541 : }

  0008d	c3		 ret	 0
$LN6@GetAligned:

; 2491 : 		}
; 2492 : 
; 2493 : 		// try north-east directio
; 2494 : 
; 2495 : 		MinDiff = AbsDiffO(Orient, (short) 0xE000);

  0008e	b9 00 e0 ff ff	 mov	 ecx, -8192		; ffffe000H
  00093	8b c6		 mov	 eax, esi
  00095	e8 00 00 00 00	 call	 ?AbsDiffO@@YAHFF@Z	; AbsDiffO

; 2496 : 		
; 2497 : 		if (MinDiff <= 0x1000) {

  0009a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0009f	7f 09		 jg	 SHORT $LN5@GetAligned

; 2498 : 			*pGap = MinDiff;

  000a1	89 07		 mov	 DWORD PTR [edi], eax

; 2499 : 			return enumORIENT.NORTH_EAST;

  000a3	66 a1 14 00 00
	00		 mov	 ax, WORD PTR ?enumORIENT@@3UStrEnumORIENT@@A+20

; 2539 : 
; 2540 : 	
; 2541 : }

  000a9	c3		 ret	 0
$LN5@GetAligned:

; 2500 : 		}
; 2501 : 	}
; 2502 : 
; 2503 : 	// try with hortogonal directions
; 2504 : 	// try with east (ngle)
; 2505 : 	MinDiff = AbsDiffO(Orient, 0x0000);

  000aa	33 c9		 xor	 ecx, ecx
  000ac	0f b7 c6	 movzx	 eax, si
  000af	66 85 f6	 test	 si, si
  000b2	7e 05		 jle	 SHORT $LN25@GetAligned
  000b4	33 c0		 xor	 eax, eax
  000b6	0f b7 ce	 movzx	 ecx, si
$LN25@GetAligned:
  000b9	98		 cwde
  000ba	0f bf d1	 movsx	 edx, cx
  000bd	2b c2		 sub	 eax, edx
  000bf	99		 cdq
  000c0	33 c2		 xor	 eax, edx
  000c2	2b c2		 sub	 eax, edx

; 2506 : 	if (MinDiff <= 0x2000) {

  000c4	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  000c9	7f 09		 jg	 SHORT $LN4@GetAligned

; 2507 : 		*pGap = MinDiff;

  000cb	89 07		 mov	 DWORD PTR [edi], eax

; 2508 : 		return enumORIENT.EAST;

  000cd	66 a1 08 00 00
	00		 mov	 ax, WORD PTR ?enumORIENT@@3UStrEnumORIENT@@A+8

; 2539 : 
; 2540 : 	
; 2541 : }

  000d3	c3		 ret	 0
$LN4@GetAligned:

; 2509 : 	}
; 2510 : 
; 2511 : 	// try with south
; 2512 : 	MinDiff = AbsDiffO(Orient, 0x4000);

  000d4	b9 00 40 00 00	 mov	 ecx, 16384		; 00004000H
  000d9	8b d1		 mov	 edx, ecx
  000db	0f b7 c6	 movzx	 eax, si
  000de	66 3b f2	 cmp	 si, dx
  000e1	7e 05		 jle	 SHORT $LN31@GetAligned
  000e3	8b c1		 mov	 eax, ecx
  000e5	0f b7 ce	 movzx	 ecx, si
$LN31@GetAligned:
  000e8	98		 cwde
  000e9	0f bf c9	 movsx	 ecx, cx
  000ec	2b c1		 sub	 eax, ecx
  000ee	99		 cdq
  000ef	33 c2		 xor	 eax, edx
  000f1	2b c2		 sub	 eax, edx

; 2513 : 	if (MinDiff <= 0x2000) {

  000f3	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  000f8	7f 09		 jg	 SHORT $LN3@GetAligned

; 2514 : 		*pGap = MinDiff;

  000fa	89 07		 mov	 DWORD PTR [edi], eax

; 2515 : 		return enumORIENT.SOUTH;

  000fc	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ?enumORIENT@@3UStrEnumORIENT@@A+4

; 2539 : 
; 2540 : 	
; 2541 : }

  00102	c3		 ret	 0
$LN3@GetAligned:

; 2516 : 	}
; 2517 : 	// try with west
; 2518 : 
; 2519 : 	MinDiff = AbsDiffO(Orient, (short) 0x8000);

  00103	b9 00 80 ff ff	 mov	 ecx, -32768		; ffff8000H
  00108	8b c6		 mov	 eax, esi
  0010a	e8 00 00 00 00	 call	 ?AbsDiffO@@YAHFF@Z	; AbsDiffO

; 2520 : 	
; 2521 : 
; 2522 : 	if (MinDiff <= 0x2000) {

  0010f	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  00114	7f 09		 jg	 SHORT $LN2@GetAligned

; 2523 : 		*pGap = MinDiff;

  00116	89 07		 mov	 DWORD PTR [edi], eax

; 2524 : 		return enumORIENT.WEST;

  00118	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ?enumORIENT@@3UStrEnumORIENT@@A+12

; 2539 : 
; 2540 : 	
; 2541 : }

  0011e	c3		 ret	 0
$LN2@GetAligned:

; 2525 : 	}
; 2526 : 
; 2527 : 	// try with north
; 2528 : 
; 2529 : 	MinDiff = AbsDiffO(Orient, (short) 0xc000);

  0011f	b9 00 c0 ff ff	 mov	 ecx, -16384		; ffffc000H
  00124	8b c6		 mov	 eax, esi
  00126	e8 00 00 00 00	 call	 ?AbsDiffO@@YAHFF@Z	; AbsDiffO

; 2530 : 	
; 2531 : 	if (MinDiff <= 0x2000) {

  0012b	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  00130	7f 09		 jg	 SHORT $LN1@GetAligned

; 2532 : 		*pGap = MinDiff;

  00132	89 07		 mov	 DWORD PTR [edi], eax

; 2533 : 		return enumORIENT.NORTH;

  00134	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?enumORIENT@@3UStrEnumORIENT@@A

; 2539 : 
; 2540 : 	
; 2541 : }

  0013a	c3		 ret	 0
$LN1@GetAligned:

; 2534 : 	}
; 2535 : 	// it's not possible reaching this point of the code
; 2536 : 	SendToLog("ERROR: GetAlignedOrient(): no aligned orient found for source orient 0x%X", Orient);

  0013b	0f bf d6	 movsx	 edx, si
  0013e	52		 push	 edx
  0013f	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@GFPCLJHC@ERROR?3?5GetAlignedOrient?$CI?$CJ?3?5no?5al@
  00144	e8 00 00 00 00	 call	 ?SendToLog@@YA_NPADZZ	; SendToLog
  00149	83 c4 08	 add	 esp, 8

; 2537 : 	*pGap= 0x7000;

  0014c	c7 07 00 70 00
	00		 mov	 DWORD PTR [edi], 28672	; 00007000H

; 2538 : 	return 9999;

  00152	b8 0f 27 00 00	 mov	 eax, 9999		; 0000270fH

; 2539 : 
; 2540 : 	
; 2541 : }

  00157	c3		 ret	 0
?GetAlignedOrient@@YAFF_NPAH@Z ENDP			; GetAlignedOrient
_TEXT	ENDS
PUBLIC	?FromNgleStaticIndexToTomb4Indices@@YA_NHPAH0@Z	; FromNgleStaticIndexToTomb4Indices
; Function compile flags: /Ogtp
;	COMDAT ?FromNgleStaticIndexToTomb4Indices@@YA_NHPAH0@Z
_TEXT	SEGMENT
_pRoomIndex$ = 8					; size = 4
_pStaticIndex$ = 12					; size = 4
?FromNgleStaticIndexToTomb4Indices@@YA_NHPAH0@Z PROC	; FromNgleStaticIndexToTomb4Indices, COMDAT
; _IndiceNgle$ = ecx

; 2335 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2336 : 	int RoomIndex;
; 2337 : 	int StaticIndex;
; 2338 : 
; 2339 : 	RoomIndex=Trng.pGlobTomb4->VetRemapStatics[IndiceNgle].IndiceRoom;

  00003	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  00009	0f b7 84 8a 96
	66 09 00	 movzx	 eax, WORD PTR [edx+ecx*4+616086]

; 2340 : 	StaticIndex= Trng.pGlobTomb4->VetRemapStatics[IndiceNgle].IndiceStatic;

  00011	0f bf 94 8a 98
	66 09 00	 movsx	 edx, WORD PTR [edx+ecx*4+616088]

; 2341 : 
; 2342 : 	if (RoomIndex == -1 || StaticIndex==-1) {

  00019	83 f8 ff	 cmp	 eax, -1
  0001c	74 13		 je	 SHORT $LN1@FromNgleSt
  0001e	83 fa ff	 cmp	 edx, -1
  00021	74 0e		 je	 SHORT $LN1@FromNgleSt

; 2345 : 	}
; 2346 : 	*pRoomIndex = RoomIndex;

  00023	8b 4d 08	 mov	 ecx, DWORD PTR _pRoomIndex$[ebp]
  00026	89 01		 mov	 DWORD PTR [ecx], eax

; 2347 : 	*pStaticIndex = StaticIndex;

  00028	8b 45 0c	 mov	 eax, DWORD PTR _pStaticIndex$[ebp]
  0002b	89 10		 mov	 DWORD PTR [eax], edx

; 2348 : 	return true;

  0002d	b0 01		 mov	 al, 1

; 2349 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
$LN1@FromNgleSt:

; 2343 : 		SendToLog("ERROR: static ngle index = %d is not a valid static index", IndiceNgle);

  00031	51		 push	 ecx
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@IAPOPOKF@ERROR?3?5static?5ngle?5index?5?$DN?5?$CFd?5is@
  00037	e8 00 00 00 00	 call	 ?SendToLog@@YA_NPADZZ	; SendToLog
  0003c	83 c4 08	 add	 esp, 8

; 2344 : 		return false;

  0003f	32 c0		 xor	 al, al

; 2349 : }

  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?FromNgleStaticIndexToTomb4Indices@@YA_NHPAH0@Z ENDP	; FromNgleStaticIndexToTomb4Indices
_TEXT	ENDS
PUBLIC	?ForceAnimationForLara@@YAXHH@Z			; ForceAnimationForLara
; Function compile flags: /Ogtp
;	COMDAT ?ForceAnimationForLara@@YAXHH@Z
_TEXT	SEGMENT
?ForceAnimationForLara@@YAXHH@Z PROC			; ForceAnimationForLara, COMDAT
; _NumAnimation$ = eax
; _NextStateId$ = edi

; 1923 : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f0		 mov	 esi, eax

; 1924 : 	int StartAnim;
; 1925 : 	int IndexAnim;
; 1926 : 	StrItemTr4 *pLara;
; 1927 : 	StrAnimationTr4 * pAnim;
; 1928 : 
; 1929 : 	pLara = Trng.pGlobTomb4->pAdr->pLara;

  00004	a1 04 00 00 00	 mov	 eax, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  00009	8b 90 4a 34 19
	00		 mov	 edx, DWORD PTR [eax+1651786]

; 1930 : 
; 1931 : 	StartAnim= Trng.pGlobTomb4->pAdr->pVetSlot[0].IndexFirstAnim;
; 1932 : 	IndexAnim = StartAnim+NumAnimation;

  0000f	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00012	0f b7 40 26	 movzx	 eax, WORD PTR [eax+38]
  00016	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 1933 : 
; 1934 : 	pAnim = &Trng.pGlobTomb4->pAdr->pVetAnimations[IndexAnim];

  00018	8b 52 30	 mov	 edx, DWORD PTR [edx+48]
  0001b	03 c6		 add	 eax, esi
  0001d	8d 1c 80	 lea	 ebx, DWORD PTR [eax+eax*4]
  00020	8d 14 da	 lea	 edx, DWORD PTR [edx+ebx*8]

; 1935 : 
; 1936 : 
; 1937 : 	// if current lara animation is already the same to set: quit
; 1938 : 	if (pLara->AnimationNow == IndexAnim) return;

  00023	0f b7 59 14	 movzx	 ebx, WORD PTR [ecx+20]
  00027	3b d8		 cmp	 ebx, eax
  00029	74 3c		 je	 SHORT $LN4@ForceAnima

; 1939 : 
; 1940 : 	// verifiy that wished animation existed really
; 1941 : 	if (pAnim->FrameSize == 0) {

  0002b	80 7a 05 00	 cmp	 BYTE PTR [edx+5], 0
  0002f	75 11		 jne	 SHORT $LN2@ForceAnima

; 1942 : 		SendToLog("ERROR: missing animation number %d for Lara", NumAnimation);

  00031	56		 push	 esi
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@HFDDJGMI@ERROR?3?5missing?5animation?5number?5@
  00037	e8 00 00 00 00	 call	 ?SendToLog@@YA_NPADZZ	; SendToLog
  0003c	83 c4 08	 add	 esp, 8
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx

; 1955 : 	
; 1956 : 	
; 1957 : }

  00041	c3		 ret	 0
$LN2@ForceAnima:

; 1943 : 		return;
; 1944 : 	}
; 1945 : 
; 1946 : 	pLara->FrameNow = pAnim->FrameStart;

  00042	0f b7 72 18	 movzx	 esi, WORD PTR [edx+24]
  00046	66 89 71 16	 mov	 WORD PTR [ecx+22], si

; 1947 : 	pLara->StateIdCurrent = pAnim->StateId;

  0004a	0f b7 72 06	 movzx	 esi, WORD PTR [edx+6]
  0004e	66 89 71 0e	 mov	 WORD PTR [ecx+14], si

; 1948 : 	pLara->StateIdNext = pAnim->StateId;

  00052	66 8b 52 06	 mov	 dx, WORD PTR [edx+6]
  00056	66 89 51 10	 mov	 WORD PTR [ecx+16], dx

; 1949 : 
; 1950 : 	if (NextStateId != -1) {

  0005a	83 ff ff	 cmp	 edi, -1
  0005d	74 04		 je	 SHORT $LN1@ForceAnima

; 1951 : 		pLara->StateIdNext = NextStateId;

  0005f	66 89 79 10	 mov	 WORD PTR [ecx+16], di
$LN1@ForceAnima:

; 1952 : 	}
; 1953 : 
; 1954 : 	pLara->AnimationNow = IndexAnim;

  00063	66 89 41 14	 mov	 WORD PTR [ecx+20], ax
$LN4@ForceAnima:
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx

; 1955 : 	
; 1956 : 	
; 1957 : }

  00069	c3		 ret	 0
?ForceAnimationForLara@@YAXHH@Z ENDP			; ForceAnimationForLara
PUBLIC	?Get@@YA_NHHH@Z					; Get
;	COMDAT ?BsSelIndex@?1??Get@@YA_NHHH@Z@4UStrMemSelItems@@A
_BSS	SEGMENT
?BsSelIndex@?1??Get@@YA_NHHH@Z@4UStrMemSelItems@@A DB 010H DUP (?) ; `Get'::`2'::BsSelIndex
_BSS	ENDS
;	COMDAT ?BsFlipMaps@?1??Get@@YA_NHHH@Z@4UStrFlipMap@@A
_BSS	SEGMENT
?BsFlipMaps@?1??Get@@YA_NHHH@Z@4UStrFlipMap@@A DB 010H DUP (?) ; `Get'::`2'::BsFlipMaps
; Function compile flags: /Ogtp
_BSS	ENDS
;	COMDAT ?Get@@YA_NHHH@Z
_TEXT	SEGMENT
_StateId$ = -8						; size = 2
_pCust$ = -8						; size = 4
_pParam$ = -8						; size = 4
_RoomIndex$ = -8					; size = 4
tv1485 = -4						; size = 4
_StaticIndex$ = -4					; size = 4
?Get@@YA_NHHH@Z PROC					; Get, COMDAT
; _GET_Type$ = ecx
; _Index$ = eax

; 4127 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 4128 : 
; 4129 : 	int TombIndex;
; 4130 : 	int RoomIndex;
; 4131 : 	int StaticIndex;
; 4132 : 	StrItemTr4 *pItem;
; 4133 : 	StrMeshInfo *pStatic;
; 4134 : 	StrGameInfo *pGame;
; 4135 : 	bool TestConvert;
; 4136 : 	StrLaraInfo *pInfo;
; 4137 : 	StrItemTr4 *pLara;
; 4138 : 	StrSlot *pSlot;
; 4139 : 	WORD Flags;
; 4140 : 	int z;
; 4141 : 	int MeshIndex;
; 4142 : 	WORD StateId;
; 4143 : 	StrGenericCustomize *pCust;
; 4144 : 	StrGenericParameters *pParam;
; 4145 : 	WORD Slot;
; 4146 : 	int i;
; 4147 : 	StrMeshTr4 *pMeshRightHand;
; 4148 : 	StrScriptSettings *pScript;
; 4149 : 	static StrMemSelItems BsSelIndex;
; 4150 : 	static StrFlipMap BsFlipMaps;
; 4151 : 
; 4152 : 
; 4153 : 	switch (GET_Type) {

  0000b	83 ff 1c	 cmp	 edi, 28			; 0000001cH
  0000e	0f 87 31 0f 00
	00		 ja	 $LN1@Get
  00014	ff 24 bd 00 00
	00 00		 jmp	 DWORD PTR $LN196@Get[edi*4]
$LN154@Get:

; 4154 : 	case GET_FLIPMAPS:
; 4155 : 		// fill BsFlipMaps structure with flipmap data
; 4156 : 		BsFlipMaps.pVetButtonFlipMaps = Trng.pGlobTomb4->pAdr->Remap.pVetButtonFlipMaps;

  0001b	a1 04 00 00 00	 mov	 eax, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  00020	8b 88 4a 34 19
	00		 mov	 ecx, DWORD PTR [eax+1651786]
  00026	8b 91 08 01 00
	00		 mov	 edx, DWORD PTR [ecx+264]
  0002c	89 15 04 00 00
	00		 mov	 DWORD PTR ?BsFlipMaps@?1??Get@@YA_NHHH@Z@4UStrFlipMap@@A+4, edx

; 4157 : 		BsFlipMaps.pVetEnabledFlipMaps = Trng.pGlobTomb4->pAdr->Remap.pVetEnabledFlipMaps;

  00032	8b 88 4a 34 19
	00		 mov	 ecx, DWORD PTR [eax+1651786]
  00038	8b 91 04 01 00
	00		 mov	 edx, DWORD PTR [ecx+260]

; 4158 : 		BsFlipMaps.pVetFlipRooms = &Trng.pGlobTomb4->FlipMapRooms.VetRoomMain[0];

  0003e	8d 88 6f ed 09
	00		 lea	 ecx, DWORD PTR [eax+650607]
  00044	5f		 pop	 edi
  00045	89 15 00 00 00
	00		 mov	 DWORD PTR ?BsFlipMaps@?1??Get@@YA_NHHH@Z@4UStrFlipMap@@A, edx
  0004b	89 0d 0c 00 00
	00		 mov	 DWORD PTR ?BsFlipMaps@?1??Get@@YA_NHHH@Z@4UStrFlipMap@@A+12, ecx

; 4159 : 		BsFlipMaps.TotFlipRooms = Trng.pGlobTomb4->FlipMapRooms.TotFlipRooms;

  00051	8b 90 6b ed 09
	00		 mov	 edx, DWORD PTR [eax+650603]
  00057	5e		 pop	 esi
  00058	89 15 08 00 00
	00		 mov	 DWORD PTR ?BsFlipMaps@?1??Get@@YA_NHHH@Z@4UStrFlipMap@@A+8, edx

; 4160 : 		// link the pointer of BsFlipMaps to Get.pFlipMap field
; 4161 : 		GET.pFlipMap = &BsFlipMaps;

  0005e	c7 05 50 02 00
	00 00 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+592, OFFSET ?BsFlipMaps@?1??Get@@YA_NHHH@Z@4UStrFlipMap@@A

; 4162 : 		return true;

  00068	b0 01		 mov	 al, 1
  0006a	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
$LN153@Get:

; 4163 : 		
; 4164 : 	case GET_VARIABLES:
; 4165 : 		GET.Vars.pMemorySelected = &BsSelIndex;
; 4166 : 		GET.Vars.pMemorySelected->pAnimationSelected = &Trng.pGlobTomb4->CurrentInventoryIndex;

  0006f	a1 04 00 00 00	 mov	 eax, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  00074	8d 88 2c 2c 1a
	00		 lea	 ecx, DWORD PTR [eax+1715244]
  0007a	89 0d 0c 00 00
	00		 mov	 DWORD PTR ?BsSelIndex@?1??Get@@YA_NHHH@Z@4UStrMemSelItems@@A+12, ecx

; 4167 : 		GET.Vars.pMemorySelected->pItemSelected = &Trng.pGlobTomb4->ItemIndexSelected;

  00080	8d 90 24 2c 1a
	00		 lea	 edx, DWORD PTR [eax+1715236]

; 4168 : 		GET.Vars.pMemorySelected->pIventorySelected = &Trng.pGlobTomb4->CurrentInventoryIndex;

  00086	89 0d 04 00 00
	00		 mov	 DWORD PTR ?BsSelIndex@?1??Get@@YA_NHHH@Z@4UStrMemSelItems@@A+4, ecx

; 4169 : 		GET.Vars.pMemorySelected->pSlotSelected = &Trng.pGlobTomb4->CurrentSlotIndex;

  0008c	8d 88 28 2c 1a
	00		 lea	 ecx, DWORD PTR [eax+1715240]
  00092	5f		 pop	 edi
  00093	c7 05 a8 01 00
	00 00 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+424, OFFSET ?BsSelIndex@?1??Get@@YA_NHHH@Z@4UStrMemSelItems@@A
  0009d	89 15 00 00 00
	00		 mov	 DWORD PTR ?BsSelIndex@?1??Get@@YA_NHHH@Z@4UStrMemSelItems@@A, edx
  000a3	89 0d 08 00 00
	00		 mov	 DWORD PTR ?BsSelIndex@?1??Get@@YA_NHHH@Z@4UStrMemSelItems@@A+8, ecx

; 4170 : 		GET.Vars.pTrngVars = Trng.pGlobTomb4->pBaseVariableTRNG;

  000a9	8b 90 8a 02 01
	00		 mov	 edx, DWORD PTR [eax+66186]
  000af	5e		 pop	 esi
  000b0	89 15 ac 01 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+428, edx

; 4171 : 
; 4172 : 		return true;

  000b6	b0 01		 mov	 al, 1
  000b8	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
$LN152@Get:

; 4173 : 
; 4174 : 	case GET_INFO_ITEM:
; 4175 : 		if (Index & NGLE_INDEX) {

  000bd	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  000c3	a9 00 40 00 00	 test	 eax, 16384		; 00004000H
  000c8	74 16		 je	 SHORT $LN150@Get

; 4176 : 			Index &= MASK_NGLE_INDEX;

  000ca	25 ff 3f 00 00	 and	 eax, 16383		; 00003fffH

; 4177 : 			TombIndex=FromNgleIndexToTomb4Index(Index);

  000cf	0f bf 84 42 74
	2c 1a 00	 movsx	 eax, WORD PTR [edx+eax*2+1715316]

; 4178 : 			if (TombIndex==-1) return false;

  000d7	83 f8 ff	 cmp	 eax, -1
  000da	0f 84 73 0e 00
	00		 je	 $LN191@Get
$LN150@Get:

; 4179 : 			Index= TombIndex;
; 4180 : 		}
; 4181 : 		pItem = &Trng.pGlobTomb4->pAdr->pVetItems[Index];

  000e0	8b 8a 4a 34 19
	00		 mov	 ecx, DWORD PTR [edx+1651786]
  000e6	69 c0 f6 15 00
	00		 imul	 eax, 5622		; 000015f6H
  000ec	03 41 08	 add	 eax, DWORD PTR [ecx+8]

; 4182 : 		GET.InfoItem.TestCreature=false;
; 4183 : 		GET.InfoItem.TestEnabled =false;

  000ef	32 db		 xor	 bl, bl

; 4184 : 		GET.InfoItem.TestSemiGod=false;
; 4185 : 		GET.InfoItem.TestDoor=false;

  000f1	88 1d fb 00 00
	00		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+251, bl
  000f7	c7 05 f6 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+246, 0

; 4186 : 		GET.InfoItem.TestOnlyExplode=false;
; 4187 : 
; 4188 : 
; 4189 : 		// is it a creature?
; 4190 : 		Slot=pItem->SlotID;

  00101	0f b7 70 0c	 movzx	 esi, WORD PTR [eax+12]

; 4191 : 		pSlot=&Trng.pGlobTomb4->pAdr->pVetSlot[Slot];

  00105	8b 92 4a 34 19
	00		 mov	 edx, DWORD PTR [edx+1651786]
  0010b	8b fe		 mov	 edi, esi
  0010d	8b ce		 mov	 ecx, esi
  0010f	c1 e1 06	 shl	 ecx, 6
  00112	03 4a 18	 add	 ecx, DWORD PTR [edx+24]

; 4192 : 		if (pSlot->Flags & enumFSLOT.AI_STANDARD) {

  00115	0f b7 51 32	 movzx	 edx, WORD PTR [ecx+50]
  00119	85 15 08 00 00
	00		 test	 DWORD PTR ?enumFSLOT@@3UStrEnumFSLOT@@A+8, edx
  0011f	74 4c		 je	 SHORT $LN146@Get

; 4193 : 			GET.InfoItem.TestCreature =true;
; 4194 : 			// is it enabled?
; 4195 : 			if ((pItem->Objectbuttons & 0x8000)==0 && 
; 4196 : 				(pItem->FlagsMain & 0x06) != 0x06) {

  00121	ba 00 80 00 00	 mov	 edx, 32768		; 00008000H
  00126	c6 05 f9 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+249, 1
  0012d	66 85 50 28	 test	 WORD PTR [eax+40], dx
  00131	75 16		 jne	 SHORT $LN148@Get
  00133	8b 90 ea 15 00
	00		 mov	 edx, DWORD PTR [eax+5610]
  00139	83 e2 06	 and	 edx, 6
  0013c	80 fa 06	 cmp	 dl, 6
  0013f	74 08		 je	 SHORT $LN148@Get

; 4197 : 				GET.InfoItem.TestEnabled =true;

  00141	b3 01		 mov	 bl, 1
  00143	88 1d f6 00 00
	00		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+246, bl
$LN148@Get:

; 4198 : 			}
; 4199 : 			// is it semigod?
; 4200 : 			if (pSlot->Vitality == (short) 0xC000) {

  00149	ba 00 c0 ff ff	 mov	 edx, -16384		; ffffc000H
  0014e	66 39 51 28	 cmp	 WORD PTR [ecx+40], dx
  00152	75 07		 jne	 SHORT $LN147@Get

; 4201 : 				GET.InfoItem.TestSemiGod=true;

  00154	c6 05 f7 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+247, 1
$LN147@Get:

; 4202 : 			}
; 4203 : 			// is it killable only with explosive ammo?
; 4204 : 			if (pSlot->Flags & NEF_ONLY_EXPLODE) {

  0015b	ba 00 10 00 00	 mov	 edx, 4096		; 00001000H
  00160	66 85 51 32	 test	 WORD PTR [ecx+50], dx
  00164	74 07		 je	 SHORT $LN146@Get

; 4205 : 				GET.InfoItem.TestOnlyExplode=true;

  00166	c6 05 f8 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+248, 1
$LN146@Get:

; 4206 : 			}
; 4207 : 
; 4208 : 		}
; 4209 : 		// is it a door?
; 4210 : 		if ((Slot >= 122 && Slot <= 129) ||
; 4211 : 			(Slot >= 322 && Slot <= 335)) {

  0016d	83 fe 7a	 cmp	 esi, 122		; 0000007aH
  00170	72 0a		 jb	 SHORT $LN143@Get
  00172	ba 81 00 00 00	 mov	 edx, 129		; 00000081H
  00177	66 3b f2	 cmp	 si, dx
  0017a	76 0c		 jbe	 SHORT $LN144@Get
$LN143@Get:
  0017c	81 c6 be fe ff
	ff		 add	 esi, -322		; fffffebeH
  00182	66 83 fe 0d	 cmp	 si, 13			; 0000000dH
  00186	77 15		 ja	 SHORT $LN190@Get
$LN144@Get:

; 4212 : 			GET.InfoItem.TestDoor=true;

  00188	c6 05 fb 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+251, 1

; 4213 : 			// is it open or close?
; 4214 : 			if (pItem->StateIdCurrent == 0) {

  0018f	66 83 78 0e 00	 cmp	 WORD PTR [eax+14], 0
  00194	0f 95 c3	 setne	 bl
  00197	88 1d f6 00 00
	00		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+246, bl
$LN190@Get:

; 4215 : 				GET.InfoItem.TestEnabled =false;
; 4216 : 			}else {
; 4217 : 				GET.InfoItem.TestEnabled=true;
; 4218 : 			}
; 4219 : 		}
; 4220 : 		
; 4221 : 		// are there collisions?
; 4222 : 		// by default, yes there are, but now we see special kind of objects:
; 4223 : 		GET.InfoItem.TestCollisions=true;

  0019d	c6 05 fa 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+250, 1

; 4224 : 
; 4225 : 		switch (Slot) {

  001a4	81 ff 91 00 00
	00		 cmp	 edi, 145		; 00000091H
  001aa	7f 19		 jg	 SHORT $LN159@Get
  001ac	81 ff 8e 00 00
	00		 cmp	 edi, 142		; 0000008eH
  001b2	7d 34		 jge	 SHORT $LN195@Get
  001b4	83 ff 56	 cmp	 edi, 86			; 00000056H
  001b7	7c 17		 jl	 SHORT $LN137@Get
  001b9	83 ff 59	 cmp	 edi, 89			; 00000059H
  001bc	7e 2a		 jle	 SHORT $LN195@Get
  001be	83 ff 73	 cmp	 edi, 115		; 00000073H
  001c1	74 25		 je	 SHORT $LN195@Get
  001c3	eb 0b		 jmp	 SHORT $LN137@Get
$LN159@Get:
  001c5	81 c7 84 fe ff
	ff		 add	 edi, -380		; fffffe84H
  001cb	83 ff 05	 cmp	 edi, 5

; 4226 : 		case 86:  // WRAITH1
; 4227 : 		case 87:  // WRAITH2
; 4228 : 		case 88:  // WRAITH3
; 4229 : 		case 89:  // WRAITH4
; 4230 : 		case 115:  // DART_EMITTER
; 4231 : 		case 142:  // FLAME
; 4232 : 		case 143: // FLAME_EMITTER
; 4233 : 		case 144:  // FLAME_EMITTER2
; 4234 : 		case 145:  // FLAME_EMITTER3
; 4235 : 		case 380: // SMOKE_EMITTER_WHITE
; 4236 : 		case 381: // SMOKE_EMITTER_BLACK
; 4237 : 		case 382: // STEAM_EMITTER
; 4238 : 		case 383: // EARTHQUAKE
; 4239 : 		case 384: // BUBBLES
; 4240 : 		case 385: // WATERFALLMIST
; 4241 : 			GET.InfoItem.TestCollisions=false;
; 4242 : 			break;

  001ce	76 18		 jbe	 SHORT $LN195@Get
$LN137@Get:

; 4243 : 		default:
; 4244 : 			// all other items:
; 4245 : 			if (GET.InfoItem.TestDoor==true && GET.InfoItem.TestEnabled == true) {

  001d0	80 3d fb 00 00
	00 01		 cmp	 BYTE PTR ?GET@@3UStrGetLocator@@A+251, 1
  001d7	75 05		 jne	 SHORT $LN136@Get
  001d9	80 fb 01	 cmp	 bl, 1

; 4246 : 				// it is a door and it is open: no collisions
; 4247 : 				GET.InfoItem.TestCollisions=false;
; 4248 : 			}else {

  001dc	74 0a		 je	 SHORT $LN195@Get
$LN136@Get:

; 4249 : 				// for other items, verify with collision procedure
; 4250 : 				if (pSlot->pProcCollision == NULL) {

  001de	83 79 20 00	 cmp	 DWORD PTR [ecx+32], 0
  001e2	0f 85 54 0d 00
	00		 jne	 $LN155@Get
$LN195@Get:
  001e8	5f		 pop	 edi
  001e9	5e		 pop	 esi

; 4251 : 					// missing collision procedure: no collision
; 4252 : 					GET.InfoItem.TestCollisions=false;

  001ea	c6 05 fa 00 00
	00 00		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+250, 0

; 4788 : 
; 4789 : 	}
; 4790 : 
; 4791 : 
; 4792 : 	return true;

  001f1	b0 01		 mov	 al, 1
  001f3	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  001f4	8b e5		 mov	 esp, ebp
  001f6	5d		 pop	 ebp
  001f7	c3		 ret	 0
$LN133@Get:

; 4253 : 				}
; 4254 : 			}
; 4255 : 			break;
; 4256 : 		}
; 4257 : 
; 4258 : 
; 4259 : 		break;
; 4260 : 
; 4261 : 	case GET_LARA:
; 4262 : 		GET.pLara = Trng.pGlobTomb4->pAdr->pLara;

  001f8	a1 04 00 00 00	 mov	 eax, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  001fd	8b 88 4a 34 19
	00		 mov	 ecx, DWORD PTR [eax+1651786]
  00203	8b 11		 mov	 edx, DWORD PTR [ecx]
  00205	89 15 00 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A, edx

; 4263 : 		GET.LaraIndex = *Trng.pGlobTomb4->pAdr->pLaraIndex;

  0020b	8b 80 4a 34 19
	00		 mov	 eax, DWORD PTR [eax+1651786]
  00211	8b 88 9c 00 00
	00		 mov	 ecx, DWORD PTR [eax+156]
  00217	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  0021a	5f		 pop	 edi
  0021b	5e		 pop	 esi
  0021c	89 15 04 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+4, edx

; 4788 : 
; 4789 : 	}
; 4790 : 
; 4791 : 
; 4792 : 	return true;

  00222	b0 01		 mov	 al, 1
  00224	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00225	8b e5		 mov	 esp, ebp
  00227	5d		 pop	 ebp
  00228	c3		 ret	 0
$LN132@Get:

; 4264 : 		break;
; 4265 : 	case GET_ITEM:
; 4266 : 		GET.pItem=NULL;
; 4267 : 
; 4268 : 		if (Index & NGLE_INDEX) {

  00229	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  0022f	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+8, 0
  00239	a9 00 40 00 00	 test	 eax, 16384		; 00004000H
  0023e	74 16		 je	 SHORT $LN130@Get

; 4269 : 			Index &= MASK_NGLE_INDEX;

  00240	25 ff 3f 00 00	 and	 eax, 16383		; 00003fffH

; 4270 : 			TombIndex=FromNgleIndexToTomb4Index(Index);

  00245	0f bf 84 42 74
	2c 1a 00	 movsx	 eax, WORD PTR [edx+eax*2+1715316]

; 4271 : 			if (TombIndex==-1) return false;

  0024d	83 f8 ff	 cmp	 eax, -1
  00250	0f 84 fd 0c 00
	00		 je	 $LN191@Get
$LN130@Get:

; 4272 : 			Index= TombIndex;
; 4273 : 		}
; 4274 : 		if (Index < 0 || Index >= Trng.pGlobTomb4->pAdr->TotItemsMax) {

  00256	85 c0		 test	 eax, eax
  00258	78 25		 js	 SHORT $LN128@Get
  0025a	8b 8a 4a 34 19
	00		 mov	 ecx, DWORD PTR [edx+1651786]
  00260	3b 81 0c 02 00
	00		 cmp	 eax, DWORD PTR [ecx+524]
  00266	7d 17		 jge	 SHORT $LN128@Get

; 4277 : 			return false;
; 4278 : 		}
; 4279 : 		GET.pItem = &Trng.pGlobTomb4->pAdr->pVetItems[Index];

  00268	69 c0 f6 15 00
	00		 imul	 eax, 5622		; 000015f6H
  0026e	03 41 08	 add	 eax, DWORD PTR [ecx+8]
  00271	5f		 pop	 edi
  00272	5e		 pop	 esi
  00273	a3 08 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+8, eax

; 4788 : 
; 4789 : 	}
; 4790 : 
; 4791 : 
; 4792 : 	return true;

  00278	b0 01		 mov	 al, 1
  0027a	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  0027b	8b e5		 mov	 esp, ebp
  0027d	5d		 pop	 ebp
  0027e	c3		 ret	 0
$LN128@Get:

; 4275 : 			SendToLog("ERROR: Get(GET_ITEM) invalid item index (%d), outside of valid range 0 - %d",
; 4276 : 				Index, Trng.pGlobTomb4->pAdr->TotItemsMax);

  0027f	8b 8a 4a 34 19
	00		 mov	 ecx, DWORD PTR [edx+1651786]
  00285	8b 91 0c 02 00
	00		 mov	 edx, DWORD PTR [ecx+524]
  0028b	52		 push	 edx
  0028c	50		 push	 eax
  0028d	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@KFPEOBDF@ERROR?3?5Get?$CIGET_ITEM?$CJ?5invalid?5ite@
  00292	e8 00 00 00 00	 call	 ?SendToLog@@YA_NPADZZ	; SendToLog
  00297	83 c4 0c	 add	 esp, 12			; 0000000cH
  0029a	5f		 pop	 edi
  0029b	5e		 pop	 esi

; 4787 : 		return false;

  0029c	32 c0		 xor	 al, al
  0029e	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  0029f	8b e5		 mov	 esp, ebp
  002a1	5d		 pop	 ebp
  002a2	c3		 ret	 0
$LN127@Get:

; 4280 : 		break;
; 4281 : 	case GET_STATIC:
; 4282 : 		GET.pStatic=NULL;

  002a3	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+12, 0

; 4283 : 
; 4284 : 		if (Index & NGLE_INDEX) {

  002ad	a9 00 40 00 00	 test	 eax, 16384		; 00004000H
  002b2	74 71		 je	 SHORT $LN126@Get

; 4285 : 			Index &= MASK_NGLE_INDEX;
; 4286 : 			if (FromNgleStaticIndexToTomb4Indices(Index, &RoomIndex, &StaticIndex)==false) return false;

  002b4	8d 4d fc	 lea	 ecx, DWORD PTR _StaticIndex$[ebp]
  002b7	51		 push	 ecx
  002b8	8d 55 f8	 lea	 edx, DWORD PTR _RoomIndex$[ebp]
  002bb	8b c8		 mov	 ecx, eax
  002bd	52		 push	 edx
  002be	81 e1 ff 3f 00
	00		 and	 ecx, 16383		; 00003fffH
  002c4	e8 00 00 00 00	 call	 ?FromNgleStaticIndexToTomb4Indices@@YA_NHPAH0@Z ; FromNgleStaticIndexToTomb4Indices
  002c9	83 c4 08	 add	 esp, 8
  002cc	84 c0		 test	 al, al
  002ce	0f 84 7f 0c 00
	00		 je	 $LN191@Get

; 4287 : 
; 4288 : 		}else {
; 4289 : 			RoomIndex = Index;
; 4290 : 			StaticIndex = SecondaryIndex;

  002d4	8b 4d fc	 mov	 ecx, DWORD PTR _StaticIndex$[ebp]
  002d7	8b 45 f8	 mov	 eax, DWORD PTR _RoomIndex$[ebp]
$LN124@Get:

; 4291 : 		}
; 4292 : 		if (RoomIndex < 0 || RoomIndex >= *Trng.pGlobTomb4->pAdr->pTotRooms) {

  002da	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  002e0	85 c0		 test	 eax, eax
  002e2	78 5d		 js	 SHORT $LN122@Get
  002e4	8b 96 4a 34 19
	00		 mov	 edx, DWORD PTR [esi+1651786]
  002ea	8b ba d0 00 00
	00		 mov	 edi, DWORD PTR [edx+208]
  002f0	0f b7 3f	 movzx	 edi, WORD PTR [edi]
  002f3	3b c7		 cmp	 eax, edi
  002f5	7d 4a		 jge	 SHORT $LN122@Get

; 4295 : 			return false;
; 4296 : 		}
; 4297 : 		z= Trng.pGlobTomb4->pAdr->pVetRooms[RoomIndex].TotStaticMesh;

  002f7	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  002fa	69 c0 94 00 00
	00		 imul	 eax, 148		; 00000094H
  00300	03 c2		 add	 eax, edx
  00302	0f b7 50 32	 movzx	 edx, WORD PTR [eax+50]

; 4298 : 
; 4299 : 		if (StaticIndex < 0 || StaticIndex >= z) {

  00306	85 c9		 test	 ecx, ecx
  00308	78 1f		 js	 SHORT $LN120@Get
  0030a	3b ca		 cmp	 ecx, edx
  0030c	7d 1b		 jge	 SHORT $LN120@Get

; 4302 : 			return false;
; 4303 : 		}
; 4304 : 		GET.pStatic = &Trng.pGlobTomb4->pAdr->pVetRooms[RoomIndex].Ptr_StaticMesh[StaticIndex];

  0030e	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00311	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  00314	5f		 pop	 edi
  00315	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00318	5e		 pop	 esi
  00319	a3 0c 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+12, eax

; 4788 : 
; 4789 : 	}
; 4790 : 
; 4791 : 
; 4792 : 	return true;

  0031e	b0 01		 mov	 al, 1
  00320	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00321	8b e5		 mov	 esp, ebp
  00323	5d		 pop	 ebp
  00324	c3		 ret	 0
$LN126@Get:

; 4287 : 
; 4288 : 		}else {
; 4289 : 			RoomIndex = Index;
; 4290 : 			StaticIndex = SecondaryIndex;

  00325	33 c9		 xor	 ecx, ecx
  00327	eb b1		 jmp	 SHORT $LN124@Get
$LN120@Get:

; 4300 : 			SendToLog("ERROR: Get(GET_STATIC) Invalid static index (%d), outside of valid range 0 - %d",
; 4301 : 				StaticIndex, z);

  00329	52		 push	 edx
  0032a	51		 push	 ecx
  0032b	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@OLEPCMLI@ERROR?3?5Get?$CIGET_STATIC?$CJ?5Invalid?5s@
  00330	e8 00 00 00 00	 call	 ?SendToLog@@YA_NPADZZ	; SendToLog
  00335	83 c4 0c	 add	 esp, 12			; 0000000cH
  00338	5f		 pop	 edi
  00339	5e		 pop	 esi

; 4787 : 		return false;

  0033a	32 c0		 xor	 al, al
  0033c	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  0033d	8b e5		 mov	 esp, ebp
  0033f	5d		 pop	 ebp
  00340	c3		 ret	 0
$LN122@Get:

; 4293 : 			SendToLog("ERROR: Get(GET_STATIC) Invalid room index (%d), outside of valid range 0 - %d",
; 4294 : 					RoomIndex, *Trng.pGlobTomb4->pAdr->pTotRooms);

  00341	8b 8e 4a 34 19
	00		 mov	 ecx, DWORD PTR [esi+1651786]
  00347	8b 91 d0 00 00
	00		 mov	 edx, DWORD PTR [ecx+208]
  0034d	0f b7 0a	 movzx	 ecx, WORD PTR [edx]
  00350	51		 push	 ecx
  00351	50		 push	 eax
  00352	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@LBHMNKCM@ERROR?3?5Get?$CIGET_STATIC?$CJ?5Invalid?5r@
  00357	e8 00 00 00 00	 call	 ?SendToLog@@YA_NPADZZ	; SendToLog
  0035c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0035f	5f		 pop	 edi
  00360	5e		 pop	 esi

; 4787 : 		return false;

  00361	32 c0		 xor	 al, al
  00363	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00364	8b e5		 mov	 esp, ebp
  00366	5d		 pop	 ebp
  00367	c3		 ret	 0
$LN119@Get:

; 4305 : 		break;
; 4306 : 	case GET_ROOM:
; 4307 : 
; 4308 : 		GET.pRoom=NULL;
; 4309 : 
; 4310 : 		if (Index < 0 || Index >= *Trng.pGlobTomb4->pAdr->pTotRooms) {

  00368	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  0036e	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+16, 0
  00378	85 c0		 test	 eax, eax
  0037a	78 2a		 js	 SHORT $LN117@Get
  0037c	8b 8a 4a 34 19
	00		 mov	 ecx, DWORD PTR [edx+1651786]
  00382	8b b1 d0 00 00
	00		 mov	 esi, DWORD PTR [ecx+208]
  00388	0f b7 36	 movzx	 esi, WORD PTR [esi]
  0038b	3b c6		 cmp	 eax, esi
  0038d	7d 17		 jge	 SHORT $LN117@Get

; 4313 : 			return false;
; 4314 : 		}
; 4315 : 		GET.pRoom = &Trng.pGlobTomb4->pAdr->pVetRooms[Index];

  0038f	69 c0 94 00 00
	00		 imul	 eax, 148		; 00000094H
  00395	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  00398	5f		 pop	 edi
  00399	5e		 pop	 esi
  0039a	a3 10 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+16, eax

; 4788 : 
; 4789 : 	}
; 4790 : 
; 4791 : 
; 4792 : 	return true;

  0039f	b0 01		 mov	 al, 1
  003a1	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  003a2	8b e5		 mov	 esp, ebp
  003a4	5d		 pop	 ebp
  003a5	c3		 ret	 0
$LN117@Get:

; 4311 : 			SendToLog("ERROR: Get(GET_ROOM) invalid index (%d), outside of valid range 0 - %d",
; 4312 : 							Index, *Trng.pGlobTomb4->pAdr->pTotRooms);

  003a6	8b 92 4a 34 19
	00		 mov	 edx, DWORD PTR [edx+1651786]
  003ac	8b 8a d0 00 00
	00		 mov	 ecx, DWORD PTR [edx+208]
  003b2	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  003b5	52		 push	 edx
  003b6	50		 push	 eax
  003b7	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@KLJPBKDN@ERROR?3?5Get?$CIGET_ROOM?$CJ?5invalid?5ind@
  003bc	e8 00 00 00 00	 call	 ?SendToLog@@YA_NPADZZ	; SendToLog
  003c1	83 c4 0c	 add	 esp, 12			; 0000000cH
  003c4	5f		 pop	 edi
  003c5	5e		 pop	 esi

; 4787 : 		return false;

  003c6	32 c0		 xor	 al, al
  003c8	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  003c9	8b e5		 mov	 esp, ebp
  003cb	5d		 pop	 ebp
  003cc	c3		 ret	 0
$LN116@Get:

; 4316 : 		break;
; 4317 : 	case GET_COLOR_RGB:
; 4318 : 		TestConvert=true;
; 4319 : 		if (SecondaryIndex == COLF_TOMB_COLOR) TestConvert=false;
; 4320 : 
; 4321 : 		GET.Color = GetColorRgb(Index, 0xFF000000, TestConvert, "Get() function");

  003cd	6a 01		 push	 1
  003cf	e8 00 00 00 00	 call	 ?GetColorRgb@@YAKFK_NPAD@Z ; GetColorRgb
  003d4	83 c4 04	 add	 esp, 4
  003d7	5f		 pop	 edi
  003d8	5e		 pop	 esi
  003d9	a3 c7 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+199, eax

; 4788 : 
; 4789 : 	}
; 4790 : 
; 4791 : 
; 4792 : 	return true;

  003de	b0 01		 mov	 al, 1
  003e0	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  003e1	8b e5		 mov	 esp, ebp
  003e3	5d		 pop	 ebp
  003e4	c3		 ret	 0
$LN114@Get:

; 4322 : 		break;
; 4323 : 
; 4324 : 	case GET_ITEM_COLL_BOX:
; 4325 : 		GET.pCollItem=NULL;
; 4326 : 
; 4327 : 		if (Index & NGLE_INDEX) {

  003e5	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  003eb	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+20, 0
  003f5	a9 00 40 00 00	 test	 eax, 16384		; 00004000H
  003fa	74 16		 je	 SHORT $LN112@Get

; 4328 : 			Index &= MASK_NGLE_INDEX;

  003fc	25 ff 3f 00 00	 and	 eax, 16383		; 00003fffH

; 4329 : 			TombIndex=FromNgleIndexToTomb4Index(Index);

  00401	0f bf 84 42 74
	2c 1a 00	 movsx	 eax, WORD PTR [edx+eax*2+1715316]

; 4330 : 			if (TombIndex==-1) return false;

  00409	83 f8 ff	 cmp	 eax, -1
  0040c	0f 84 41 0b 00
	00		 je	 $LN191@Get
$LN112@Get:

; 4331 : 			Index= TombIndex;
; 4332 : 		}
; 4333 : 		if (Index < 0 || Index >= Trng.pGlobTomb4->pAdr->TotItemsMax) {

  00412	85 c0		 test	 eax, eax
  00414	78 30		 js	 SHORT $LN110@Get
  00416	8b 8a 4a 34 19
	00		 mov	 ecx, DWORD PTR [edx+1651786]
  0041c	3b 81 0c 02 00
	00		 cmp	 eax, DWORD PTR [ecx+524]
  00422	7d 22		 jge	 SHORT $LN110@Get

; 4336 : 			return false;
; 4337 : 		}
; 4338 : 		pItem = &Trng.pGlobTomb4->pAdr->pVetItems[Index];		

  00424	69 c0 f6 15 00
	00		 imul	 eax, 5622		; 000015f6H
  0042a	03 41 08	 add	 eax, DWORD PTR [ecx+8]

; 4339 : 		GET.pCollItem = GetBestFrame(pItem);

  0042d	50		 push	 eax
  0042e	b8 60 05 45 00	 mov	 eax, 4523360		; 00450560H
  00433	ff d0		 call	 eax
  00435	83 c4 04	 add	 esp, 4
  00438	5f		 pop	 edi
  00439	5e		 pop	 esi
  0043a	a3 14 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+20, eax

; 4788 : 
; 4789 : 	}
; 4790 : 
; 4791 : 
; 4792 : 	return true;

  0043f	b0 01		 mov	 al, 1
  00441	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00442	8b e5		 mov	 esp, ebp
  00444	5d		 pop	 ebp
  00445	c3		 ret	 0
$LN110@Get:

; 4334 : 			SendToLog("ERROR: Get(GET_COLL_BOX) invalid item index (%d), outside of valid range 0 - %d",
; 4335 : 				Index, Trng.pGlobTomb4->pAdr->TotItemsMax);

  00446	8b 8a 4a 34 19
	00		 mov	 ecx, DWORD PTR [edx+1651786]
  0044c	8b 91 0c 02 00
	00		 mov	 edx, DWORD PTR [ecx+524]
  00452	52		 push	 edx
  00453	50		 push	 eax
  00454	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@KOJKINJA@ERROR?3?5Get?$CIGET_COLL_BOX?$CJ?5invalid@
  00459	e8 00 00 00 00	 call	 ?SendToLog@@YA_NPADZZ	; SendToLog
  0045e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00461	5f		 pop	 edi
  00462	5e		 pop	 esi

; 4787 : 		return false;

  00463	32 c0		 xor	 al, al
  00465	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00466	8b e5		 mov	 esp, ebp
  00468	5d		 pop	 ebp
  00469	c3		 ret	 0
$LN109@Get:

; 4340 : 		break;
; 4341 : 	case GET_STATIC_COLL_BOX:
; 4342 : 	case GET_STATIC_VIEW_BOX:
; 4343 : 		if (Index & NGLE_INDEX) {

  0046a	a9 00 40 00 00	 test	 eax, 16384		; 00004000H
  0046f	0f 84 8a 00 00
	00		 je	 $LN108@Get

; 4344 : 			Index &= MASK_NGLE_INDEX;
; 4345 : 			if (FromNgleStaticIndexToTomb4Indices(Index, &RoomIndex, &StaticIndex)==false) return false;

  00475	8d 4d fc	 lea	 ecx, DWORD PTR _StaticIndex$[ebp]
  00478	51		 push	 ecx
  00479	8d 55 f8	 lea	 edx, DWORD PTR _RoomIndex$[ebp]
  0047c	8b c8		 mov	 ecx, eax
  0047e	52		 push	 edx
  0047f	81 e1 ff 3f 00
	00		 and	 ecx, 16383		; 00003fffH
  00485	e8 00 00 00 00	 call	 ?FromNgleStaticIndexToTomb4Indices@@YA_NHPAH0@Z ; FromNgleStaticIndexToTomb4Indices
  0048a	83 c4 08	 add	 esp, 8
  0048d	84 c0		 test	 al, al
  0048f	0f 84 be 0a 00
	00		 je	 $LN191@Get

; 4346 : 
; 4347 : 		}else {
; 4348 : 			RoomIndex = Index;
; 4349 : 			StaticIndex = SecondaryIndex;

  00495	8b 4d fc	 mov	 ecx, DWORD PTR _StaticIndex$[ebp]
  00498	8b 45 f8	 mov	 eax, DWORD PTR _RoomIndex$[ebp]
$LN106@Get:

; 4350 : 		}
; 4351 : 		if (RoomIndex < 0 || RoomIndex >= *Trng.pGlobTomb4->pAdr->pTotRooms) {

  0049b	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  004a1	85 c0		 test	 eax, eax
  004a3	0f 88 84 00 00
	00		 js	 $LN104@Get
  004a9	8b 96 4a 34 19
	00		 mov	 edx, DWORD PTR [esi+1651786]
  004af	8b 9a d0 00 00
	00		 mov	 ebx, DWORD PTR [edx+208]
  004b5	0f b7 1b	 movzx	 ebx, WORD PTR [ebx]
  004b8	3b c3		 cmp	 eax, ebx
  004ba	7d 71		 jge	 SHORT $LN104@Get

; 4354 : 			return false;
; 4355 : 		}
; 4356 : 
; 4357 : 		z= Trng.pGlobTomb4->pAdr->pVetRooms[RoomIndex].TotStaticMesh;

  004bc	69 c0 94 00 00
	00		 imul	 eax, 148		; 00000094H
  004c2	03 42 04	 add	 eax, DWORD PTR [edx+4]
  004c5	0f b7 70 32	 movzx	 esi, WORD PTR [eax+50]

; 4358 : 		if (StaticIndex < 0 || StaticIndex >= z) {

  004c9	85 c9		 test	 ecx, ecx
  004cb	78 48		 js	 SHORT $LN102@Get
  004cd	3b ce		 cmp	 ecx, esi
  004cf	7d 44		 jge	 SHORT $LN102@Get

; 4361 : 			return false;
; 4362 : 		}
; 4363 : 		pStatic = &Trng.pGlobTomb4->pAdr->pVetRooms[RoomIndex].Ptr_StaticMesh[StaticIndex];
; 4364 : 		Index= pStatic->SlotId;

  004d1	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 4365 : 		if (GET_Type == GET_STATIC_COLL_BOX) {
; 4366 : 			GET.pCollStatic = &Trng.pGlobTomb4->pAdr->pVetEditObjects[Index].CollisionBox;

  004d4	8b 52 38	 mov	 edx, DWORD PTR [edx+56]
  004d7	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  004da	0f b7 44 88 12	 movzx	 eax, WORD PTR [eax+ecx*4+18]
  004df	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  004e6	2b c8		 sub	 ecx, eax
  004e8	83 ff 05	 cmp	 edi, 5
  004eb	75 16		 jne	 SHORT $LN101@Get
  004ed	5f		 pop	 edi
  004ee	8d 44 8a 10	 lea	 eax, DWORD PTR [edx+ecx*4+16]
  004f2	5e		 pop	 esi
  004f3	a3 18 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+24, eax

; 4788 : 
; 4789 : 	}
; 4790 : 
; 4791 : 
; 4792 : 	return true;

  004f8	b0 01		 mov	 al, 1
  004fa	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  004fb	8b e5		 mov	 esp, ebp
  004fd	5d		 pop	 ebp
  004fe	c3		 ret	 0
$LN108@Get:

; 4346 : 
; 4347 : 		}else {
; 4348 : 			RoomIndex = Index;
; 4349 : 			StaticIndex = SecondaryIndex;

  004ff	33 c9		 xor	 ecx, ecx
  00501	eb 98		 jmp	 SHORT $LN106@Get
$LN101@Get:
  00503	5f		 pop	 edi

; 4367 : 		}else {
; 4368 : 			GET.pViewStatic = &Trng.pGlobTomb4->pAdr->pVetEditObjects[Index].ViewBox;

  00504	8d 44 8a 04	 lea	 eax, DWORD PTR [edx+ecx*4+4]
  00508	5e		 pop	 esi
  00509	a3 1c 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+28, eax

; 4788 : 
; 4789 : 	}
; 4790 : 
; 4791 : 
; 4792 : 	return true;

  0050e	b0 01		 mov	 al, 1
  00510	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00511	8b e5		 mov	 esp, ebp
  00513	5d		 pop	 ebp
  00514	c3		 ret	 0
$LN102@Get:

; 4359 : 			SendToLog("ERROR: Get(GET_STATIC_COLL/VIEW_BOX) Invalid static index (%d), outside of valid range 0 - %d",
; 4360 : 				StaticIndex, z);

  00515	56		 push	 esi
  00516	51		 push	 ecx
  00517	68 00 00 00 00	 push	 OFFSET ??_C@_0FO@LCPLCGCJ@ERROR?3?5Get?$CIGET_STATIC_COLL?1VIEW_@
  0051c	e8 00 00 00 00	 call	 ?SendToLog@@YA_NPADZZ	; SendToLog
  00521	83 c4 0c	 add	 esp, 12			; 0000000cH
  00524	5f		 pop	 edi
  00525	5e		 pop	 esi

; 4787 : 		return false;

  00526	32 c0		 xor	 al, al
  00528	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00529	8b e5		 mov	 esp, ebp
  0052b	5d		 pop	 ebp
  0052c	c3		 ret	 0
$LN104@Get:

; 4352 : 			SendToLog("ERROR: Get(GET_STATIC_COLL//VIEW_BOX) Invalid room index (%d), outside of valid range 0 - %d",
; 4353 : 					RoomIndex, *Trng.pGlobTomb4->pAdr->pTotRooms);

  0052d	8b 8e 4a 34 19
	00		 mov	 ecx, DWORD PTR [esi+1651786]
  00533	8b 91 d0 00 00
	00		 mov	 edx, DWORD PTR [ecx+208]
  00539	0f b7 0a	 movzx	 ecx, WORD PTR [edx]
  0053c	51		 push	 ecx
  0053d	50		 push	 eax
  0053e	68 00 00 00 00	 push	 OFFSET ??_C@_0FN@HCAHGEMN@ERROR?3?5Get?$CIGET_STATIC_COLL?1?1VIEW@
  00543	e8 00 00 00 00	 call	 ?SendToLog@@YA_NPADZZ	; SendToLog
  00548	83 c4 0c	 add	 esp, 12			; 0000000cH
  0054b	5f		 pop	 edi
  0054c	5e		 pop	 esi

; 4787 : 		return false;

  0054d	32 c0		 xor	 al, al
  0054f	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00550	8b e5		 mov	 esp, ebp
  00552	5d		 pop	 ebp
  00553	c3		 ret	 0
$LN99@Get:

; 4369 : 		}
; 4370 : 		break;
; 4371 : 	case GET_DOOR_OF_ROOM:
; 4372 : 		GET.pDoor=NULL;
; 4373 : 
; 4374 : 		z= Trng.pGlobTomb4->pAdr->pVetRooms[Index].pDoors->TotDoors;

  00554	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  0055a	c7 05 20 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+32, 0
  00564	8b 8a 4a 34 19
	00		 mov	 ecx, DWORD PTR [edx+1651786]
  0056a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0056d	8b d0		 mov	 edx, eax
  0056f	69 d2 94 00 00
	00		 imul	 edx, 148		; 00000094H
  00575	8b 4c 11 04	 mov	 ecx, DWORD PTR [ecx+edx+4]
  00579	0f b7 11	 movzx	 edx, WORD PTR [ecx]

; 4375 : 
; 4376 : 		if (Index < 0 || Index >= z) {

  0057c	85 c0		 test	 eax, eax
  0057e	78 16		 js	 SHORT $LN97@Get
  00580	3b c2		 cmp	 eax, edx
  00582	7d 12		 jge	 SHORT $LN97@Get

; 4379 : 			return false;
; 4380 : 		}
; 4381 : 		GET.pDoor = &Trng.pGlobTomb4->pAdr->pVetRooms[Index].pDoors->VetDoors[SecondaryIndex];

  00584	5f		 pop	 edi
  00585	83 c1 02	 add	 ecx, 2
  00588	5e		 pop	 esi
  00589	89 0d 20 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+32, ecx

; 4788 : 
; 4789 : 	}
; 4790 : 
; 4791 : 
; 4792 : 	return true;

  0058f	b0 01		 mov	 al, 1
  00591	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00592	8b e5		 mov	 esp, ebp
  00594	5d		 pop	 ebp
  00595	c3		 ret	 0
$LN97@Get:

; 4377 : 			SendToLog("ERROR: Get(GET_DOOR_OF_ROOM) invalid door index (%d), outside of valid range 0 - %d",
; 4378 : 					Index, z);

  00596	52		 push	 edx
  00597	50		 push	 eax
  00598	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@CGMNPFNF@ERROR?3?5Get?$CIGET_DOOR_OF_ROOM?$CJ?5inv@
  0059d	e8 00 00 00 00	 call	 ?SendToLog@@YA_NPADZZ	; SendToLog
  005a2	83 c4 0c	 add	 esp, 12			; 0000000cH
  005a5	5f		 pop	 edi
  005a6	5e		 pop	 esi

; 4787 : 		return false;

  005a7	32 c0		 xor	 al, al
  005a9	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  005aa	8b e5		 mov	 esp, ebp
  005ac	5d		 pop	 ebp
  005ad	c3		 ret	 0
$LN96@Get:

; 4382 : 		break;
; 4383 : 
; 4384 : 	case GET_INFO_LARA:
; 4385 : 		pInfo = &GET.LaraInfo;
; 4386 : 		// clear old values
; 4387 : 		ClearMemory(pInfo, sizeof(StrLaraInfo));

  005ae	6a 56		 push	 86			; 00000056H
  005b0	33 db		 xor	 ebx, ebx
  005b2	53		 push	 ebx
  005b3	68 24 00 00 00	 push	 OFFSET ?GET@@3UStrGetLocator@@A+36
  005b8	e8 00 00 00 00	 call	 _memset

; 4388 : 
; 4389 : 		pInfo->TestFreeHands=true;
; 4390 : 		// get some data we'll use to discover infos about lara:
; 4391 : 		StateId = Trng.pGlobTomb4->pAdr->pLara->StateIdCurrent;

  005bd	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  005c3	c6 05 24 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+36, 1
  005ca	8b 96 4a 34 19
	00		 mov	 edx, DWORD PTR [esi+1651786]
  005d0	8b 3a		 mov	 edi, DWORD PTR [edx]
  005d2	0f b7 47 0e	 movzx	 eax, WORD PTR [edi+14]
  005d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  005d9	89 7d fc	 mov	 DWORD PTR tv1485[ebp], edi
  005dc	89 45 f8	 mov	 DWORD PTR _StateId$[ebp], eax

; 4392 : 		pLara = Trng.pGlobTomb4->pAdr->pLara;
; 4393 : 		pInfo->SkipPhaseFlags  =FindSkipPhase();

  005df	e8 00 00 00 00	 call	 ?FindSkipPhase@@YAKXZ	; FindSkipPhase
  005e4	a3 54 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+84, eax

; 4394 : 
; 4395 : 
; 4396 : 
; 4397 : 		// ------------ what item lara is holding in her hands --------------------------
; 4398 : 		if (*Trng.pGlobTomb4->pAdr->pFlagsLaraHands == enumFLH.HOLDS_ITEM ||
; 4399 : 			*Trng.pGlobTomb4->pAdr->pObjInLaraHandsNow == enumHOLD.FLARE ) {

  005e9	8b 8e 4a 34 19
	00		 mov	 ecx, DWORD PTR [esi+1651786]
  005ef	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  005f2	0f b7 02	 movzx	 eax, WORD PTR [edx]
  005f5	8b 15 18 00 00
	00		 mov	 edx, DWORD PTR ?enumHOLD@@3UStrEnumHOLD@@A+24
  005fb	3b 05 10 00 00
	00		 cmp	 eax, DWORD PTR ?enumFLH@@3UStrEnumFLH@@A+16
  00601	74 0a		 je	 SHORT $LN94@Get
  00603	8b 49 4c	 mov	 ecx, DWORD PTR [ecx+76]
  00606	0f b7 01	 movzx	 eax, WORD PTR [ecx]
  00609	3b c2		 cmp	 eax, edx
  0060b	75 7b		 jne	 SHORT $LN90@Get
$LN94@Get:

; 4400 : 			pInfo->TestFreeHands=false;

  0060d	66 c7 05 24 00
	00 00 00 01	 mov	 WORD PTR ?GET@@3UStrGetLocator@@A+36, 256 ; 00000100H

; 4401 : 			// lara holds item in her hands
; 4402 : 			pInfo->TestIsHoldingItem = true;
; 4403 : 			pInfo->HoldedItem = *Trng.pGlobTomb4->pAdr->pObjInLaraHandsNow;

  00616	8b 8e 4a 34 19
	00		 mov	 ecx, DWORD PTR [esi+1651786]
  0061c	8b 41 4c	 mov	 eax, DWORD PTR [ecx+76]
  0061f	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00622	89 0d 2b 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+43, ecx

; 4404 : 			// if item is flare, set also value of flaretime
; 4405 : 			if (pInfo->HoldedItem == enumHOLD.FLARE) {

  00628	3b ca		 cmp	 ecx, edx
  0062a	75 15		 jne	 SHORT $LN93@Get

; 4406 : 				pInfo->FlareTime = *Trng.pGlobTomb4->pAdr->pFlareLifeTime;

  0062c	8b 96 4a 34 19
	00		 mov	 edx, DWORD PTR [esi+1651786]
  00632	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  00638	0f b7 10	 movzx	 edx, WORD PTR [eax]
  0063b	89 15 30 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+48, edx
$LN93@Get:

; 4407 : 			}
; 4408 : 			
; 4409 : 			// if item is torch, verify if it's burning
; 4410 : 
; 4411 : 			if (pInfo->HoldedItem == enumHOLD.OUT_TORCH ) {

  00641	3b 0d 1c 00 00
	00		 cmp	 ecx, DWORD PTR ?enumHOLD@@3UStrEnumHOLD@@A+28
  00647	75 28		 jne	 SHORT $LN91@Get

; 4412 : 				if (*Trng.pGlobTomb4->pAdr->pFlagsLara2 & enumFL2.TORCH_IS_BURNING ) {

  00649	8b 86 4a 34 19
	00		 mov	 eax, DWORD PTR [esi+1651786]
  0064f	8b 90 90 00 00
	00		 mov	 edx, DWORD PTR [eax+144]
  00655	a0 14 00 00 00	 mov	 al, BYTE PTR ?enumFL2@@3UStrEnumFL2@@A+20
  0065a	84 02		 test	 BYTE PTR [edx], al
  0065c	74 13		 je	 SHORT $LN91@Get

; 4413 : 					pInfo->HoldedItem = enumHOLD.FIRED_TORCH;

  0065e	8b 0d 20 00 00
	00		 mov	 ecx, DWORD PTR ?enumHOLD@@3UStrEnumHOLD@@A+32
  00664	89 0d 2b 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+43, ecx

; 4414 : 					pInfo->TestBurningTorch=true;

  0066a	c6 05 34 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+52, 1
$LN91@Get:

; 4415 : 				}
; 4416 : 			}
; 4417 : 			// check if it is a weapon
; 4418 : 			if (pInfo->HoldedItem >= enumHOLD.PISTOLS  && pInfo->HoldedItem <= enumHOLD.CROSSBOW ) {

  00671	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?enumHOLD@@3UStrEnumHOLD@@A
  00677	7c 0f		 jl	 SHORT $LN90@Get
  00679	3b 0d 14 00 00
	00		 cmp	 ecx, DWORD PTR ?enumHOLD@@3UStrEnumHOLD@@A+20
  0067f	7f 07		 jg	 SHORT $LN90@Get

; 4419 : 				pInfo->TestIsHoldingWeapon = true;

  00681	c6 05 26 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+38, 1
$LN90@Get:

; 4420 : 			}
; 4421 : 		}
; 4422 : 		// ------------ weapon selected -------------------------------
; 4423 : 		pInfo->WeaponSelected = *Trng.pGlobTomb4->pAdr->pWeaponSelected;

  00688	8b 8e 4a 34 19
	00		 mov	 ecx, DWORD PTR [esi+1651786]
  0068e	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  00691	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00694	a3 27 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+39, eax

; 4424 : 
; 4425 : 		// ------------ vehicle -------------------
; 4426 : 		pInfo->IndexOfVehicle = *Trng.pGlobTomb4->pAdr->pVehicleIndex;

  00699	8b 8e 4a 34 19
	00		 mov	 ecx, DWORD PTR [esi+1651786]
  0069f	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  006a2	0f bf 0a	 movsx	 ecx, WORD PTR [edx]
  006a5	89 0d 3a 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+58, ecx

; 4427 : 		if (pInfo->IndexOfVehicle != -1) {

  006ab	83 f9 ff	 cmp	 ecx, -1
  006ae	74 26		 je	 SHORT $LN89@Get

; 4428 : 			pInfo->TestFreeHands=false;
; 4429 : 			pInfo->TestIsDrivingVehicle=true;
; 4430 : 			pInfo->SlotVehicle = Trng.pGlobTomb4->pAdr->pVetItems[pInfo->IndexOfVehicle].SlotID;

  006b0	69 c9 f6 15 00
	00		 imul	 ecx, 5622		; 000015f6H
  006b6	88 1d 24 00 00
	00		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+36, bl
  006bc	c6 05 35 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+53, 1
  006c3	8b 86 4a 34 19
	00		 mov	 eax, DWORD PTR [esi+1651786]
  006c9	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  006cc	0f b7 44 11 0c	 movzx	 eax, WORD PTR [ecx+edx+12]
  006d1	a3 36 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+54, eax
$LN89@Get:

; 4431 : 		}
; 4432 : 		// --------- crowbar --------------------
; 4433 : 		// the only way to discover if lara is holding the crowbar is checking the value of right hand mesh and 
; 4434 : 		// compare it with the same mesh of CROWBAR_ANIM
; 4435 : 
; 4436 : 		// locate the first mesh for CROWBAR_ANIM slot
; 4437 : 		MeshIndex= Trng.pGlobTomb4->pAdr->pVetSlot[enumSLOT.CROWBAR_ANIM].IndexFirstMesh;

  006d6	8b 8e 4a 34 19
	00		 mov	 ecx, DWORD PTR [esi+1651786]
  006dc	8b 15 70 00 00
	00		 mov	 edx, DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+112

; 4438 : 		// the right hand the mesh with index = 10 but in the game all meshes are duplicated, so we have 
; 4439 : 		// to multiply by 2 the real mesh index
; 4440 : 		pMeshRightHand = Trng.pGlobTomb4->pAdr->VetMeshPointer[MeshIndex+ 10*2];
; 4441 : 		// now we check if the mesh currently loaded in lara's body has same value of MeshRightHand
; 4442 : 		// note: the mesh vector for current lara meshes is not duplicated so in this case we'll use 10 as index for right hand
; 4443 : 		if (pMeshRightHand == Trng.pGlobTomb4->pAdr->VetMeshLara[10]) {

  006e2	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  006e5	c1 e2 06	 shl	 edx, 6
  006e8	0f b7 54 10 02	 movzx	 edx, WORD PTR [eax+edx+2]
  006ed	8b 41 40	 mov	 eax, DWORD PTR [ecx+64]
  006f0	8b 49 44	 mov	 ecx, DWORD PTR [ecx+68]
  006f3	8b 54 90 50	 mov	 edx, DWORD PTR [eax+edx*4+80]
  006f7	3b 51 28	 cmp	 edx, DWORD PTR [ecx+40]
  006fa	75 0d		 jne	 SHORT $LN88@Get

; 4444 : 			// yes: lara is holding the crowbar
; 4445 : 			pInfo->TestIsHoldingCrowBar=true;

  006fc	c6 05 2f 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+47, 1

; 4446 : 			pInfo->TestFreeHands=false;

  00703	88 1d 24 00 00
	00		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+36, bl
$LN88@Get:

; 4447 : 		}
; 4448 : 		
; 4449 : 		// ---------- rope -----------------------
; 4450 : 		pInfo->RopeIndex = *Trng.pGlobTomb4->pAdr->pRopeNowIndex;

  00709	8b 86 4a 34 19
	00		 mov	 eax, DWORD PTR [esi+1651786]
  0070f	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00712	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00714	89 0d 3f 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+63, ecx

; 4451 : 		if (pInfo->RopeIndex != -1) {

  0071a	83 f9 ff	 cmp	 ecx, -1
  0071d	74 0d		 je	 SHORT $LN87@Get

; 4452 : 			pInfo->TestFreeHands=false;

  0071f	88 1d 24 00 00
	00		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+36, bl

; 4453 : 			pInfo->TestIsOnRope=true;

  00725	c6 05 3e 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+62, 1
$LN87@Get:

; 4454 : 
; 4455 : 		}
; 4456 : 		// --------- polerope --------------------------
; 4457 : 
; 4458 : 		pInfo->PoleRopeIndex=-1;
; 4459 : 		if (StateId >= 99 && StateId <= 103) {

  0072c	8b 45 f8	 mov	 eax, DWORD PTR _StateId$[ebp]
  0072f	8d 50 9d	 lea	 edx, DWORD PTR [eax-99]
  00732	c7 05 44 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+68, -1
  0073c	66 83 fa 04	 cmp	 dx, 4
  00740	77 21		 ja	 SHORT $LN86@Get

; 4460 : 			// lara is hanged on pole rope
; 4461 : 			pInfo->PoleRopeIndex = *Trng.pGlobTomb4->pAdr->pObjectActive;

  00742	8b 8e 4a 34 19
	00		 mov	 ecx, DWORD PTR [esi+1651786]
  00748	8b 91 94 00 00
	00		 mov	 edx, DWORD PTR [ecx+148]
  0074e	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00750	89 0d 44 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+68, ecx

; 4462 : 			pInfo->TestIsOnRope = true;

  00756	c6 05 3e 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+62, 1

; 4463 : 			pInfo->TestFreeHands=false;

  0075d	88 1d 24 00 00
	00		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+36, bl
$LN86@Get:

; 4464 : 		}
; 4465 : 
; 4466 : 		// ----------- is climbing? ------------------------
; 4467 : 		if (*Trng.pGlobTomb4->pAdr->pFlagsLara2 & enumFL2.IS_CLIMBING ) {

  00763	8b 96 4a 34 19
	00		 mov	 edx, DWORD PTR [esi+1651786]
  00769	8b 8a 90 00 00
	00		 mov	 ecx, DWORD PTR [edx+144]
  0076f	8a 15 18 00 00
	00		 mov	 dl, BYTE PTR ?enumFL2@@3UStrEnumFL2@@A+24
  00775	84 11		 test	 BYTE PTR [ecx], dl
  00777	74 0d		 je	 SHORT $LN85@Get

; 4468 : 			pInfo->TestIsClimbing=true;

  00779	c6 05 48 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+72, 1

; 4469 : 			pInfo->TestFreeHands=false;

  00780	88 1d 24 00 00
	00		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+36, bl
$LN85@Get:

; 4470 : 		}
; 4471 : 
; 4472 : 		// ------------- is monkeying ? -----------------------------
; 4473 : 		if ((StateId >= 0x4b && StateId <= 0x4f) || 
; 4474 : 			StateId == 0x52 || StateId == 0x53) {

  00786	66 83 f8 4b	 cmp	 ax, 75			; 0000004bH
  0078a	72 06		 jb	 SHORT $LN82@Get
  0078c	66 83 f8 4f	 cmp	 ax, 79			; 0000004fH
  00790	76 0c		 jbe	 SHORT $LN83@Get
$LN82@Get:
  00792	66 83 f8 52	 cmp	 ax, 82			; 00000052H
  00796	74 06		 je	 SHORT $LN83@Get
  00798	66 83 f8 53	 cmp	 ax, 83			; 00000053H
  0079c	75 0d		 jne	 SHORT $LN84@Get
$LN83@Get:

; 4475 : 			pInfo->TestIsMonkeying=true;

  0079e	c6 05 49 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+73, 1

; 4476 : 			pInfo->TestFreeHands=false;

  007a5	88 1d 24 00 00
	00		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+36, bl
$LN84@Get:

; 4477 : 		}
; 4478 : 
; 4479 : 		// ------------- on all fours ----------------------------------
; 4480 : 		if (StateId >= 0x50 && StateId <= 0x58) {

  007ab	8d 48 b0	 lea	 ecx, DWORD PTR [eax-80]
  007ae	66 83 f9 08	 cmp	 cx, 8
  007b2	77 07		 ja	 SHORT $LN81@Get

; 4481 : 			pInfo->TestIsOnAllFour=true;

  007b4	c6 05 4a 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+74, 1
$LN81@Get:

; 4482 : 		}
; 4483 : 
; 4484 : 		// ------------- duck -------------------------------------------
; 4485 : 		if (StateId == 0x47 || StateId == 0x48) {

  007bb	66 83 f8 47	 cmp	 ax, 71			; 00000047H
  007bf	74 06		 je	 SHORT $LN79@Get
  007c1	66 83 f8 48	 cmp	 ax, 72			; 00000048H
  007c5	75 07		 jne	 SHORT $LN80@Get
$LN79@Get:

; 4486 : 			pInfo->TestIsDucking = true;

  007c7	c6 05 4b 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+75, 1
$LN80@Get:

; 4487 : 		}
; 4488 : 		// ------------ is burning? -------------------------------------
; 4489 : 		if (*Trng.pGlobTomb4->pAdr->pFlagsLara2 & enumFL2.IS_BURNING ) {

  007ce	8b 96 4a 34 19
	00		 mov	 edx, DWORD PTR [esi+1651786]
  007d4	8b 8a 90 00 00
	00		 mov	 ecx, DWORD PTR [edx+144]
  007da	8a 15 04 00 00
	00		 mov	 dl, BYTE PTR ?enumFL2@@3UStrEnumFL2@@A+4
  007e0	84 11		 test	 BYTE PTR [ecx], dl
  007e2	74 07		 je	 SHORT $LN78@Get

; 4490 : 			pInfo->TestIsBurning = true;

  007e4	c6 05 4c 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+76, 1
$LN78@Get:

; 4491 : 		}
; 4492 : 		
; 4493 : 		// ------------- is immortal ? ------------------------------------
; 4494 : 		if (*Trng.pGlobTomb4->pAdr->pFlagsLara2 & enumFL2.IS_INVULNERABLE ) {

  007eb	8b 8e 4a 34 19
	00		 mov	 ecx, DWORD PTR [esi+1651786]
  007f1	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  007f7	8a 0d 0c 00 00
	00		 mov	 cl, BYTE PTR ?enumFL2@@3UStrEnumFL2@@A+12
  007fd	84 0a		 test	 BYTE PTR [edx], cl
  007ff	74 07		 je	 SHORT $LN77@Get

; 4495 : 			pInfo->TestIsImmortal = true;

  00801	c6 05 4d 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+77, 1
$LN77@Get:

; 4496 : 		}
; 4497 : 		// ------------- is dripping ? -----------------------------------
; 4498 : 		for (i=0;i<16;i++) {

  00808	8b 96 4a 34 19
	00		 mov	 edx, DWORD PTR [esi+1651786]
  0080e	8b 52 68	 mov	 edx, DWORD PTR [edx+104]
  00811	33 c9		 xor	 ecx, ecx
$LL76@Get:

; 4499 : 			if (Trng.pGlobTomb4->pAdr->pVetDrip[i]) {

  00813	38 1c 0a	 cmp	 BYTE PTR [edx+ecx], bl
  00816	75 08		 jne	 SHORT $LN179@Get

; 4496 : 		}
; 4497 : 		// ------------- is dripping ? -----------------------------------
; 4498 : 		for (i=0;i<16;i++) {

  00818	41		 inc	 ecx
  00819	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0081c	7c f5		 jl	 SHORT $LL76@Get

; 4624 : 				if (SecondaryIndex == -1 || SecondaryIndex == pCust->pVetArg[0]) {

  0081e	eb 07		 jmp	 SHORT $LN74@Get
$LN179@Get:

; 4500 : 				pInfo->TestIsDripping=true;

  00820	c6 05 4f 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+79, 1
$LN74@Get:

; 4501 : 				break;
; 4502 : 			}
; 4503 : 		}
; 4504 : 
; 4505 : 		// ------------- is poisoned ? ------------------------------------
; 4506 : 		if (*Trng.pGlobTomb4->pAdr->pPoison1 != 0 || *Trng.pGlobTomb4->pAdr->pPoison2) {

  00827	8b 8e 4a 34 19
	00		 mov	 ecx, DWORD PTR [esi+1651786]
  0082d	8b 51 6c	 mov	 edx, DWORD PTR [ecx+108]
  00830	66 39 1a	 cmp	 WORD PTR [edx], bx
  00833	75 08		 jne	 SHORT $LN71@Get
  00835	8b 49 70	 mov	 ecx, DWORD PTR [ecx+112]
  00838	66 39 19	 cmp	 WORD PTR [ecx], bx
  0083b	74 07		 je	 SHORT $LN72@Get
$LN71@Get:

; 4507 : 			pInfo->TestIsPoisoned=true;

  0083d	c6 05 4e 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+78, 1
$LN72@Get:

; 4508 : 		}
; 4509 : 
; 4510 : 		// ------------- is falling ? --------------------------------------
; 4511 : 		if (pLara->FlagsMain & 0x008) {

  00844	f6 87 ea 15 00
	00 08		 test	 BYTE PTR [edi+5610], 8
  0084b	74 07		 je	 SHORT $LN70@Get

; 4512 : 			pInfo->TestIsFalling=true;

  0084d	c6 05 50 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+80, 1
$LN70@Get:

; 4513 : 		}
; 4514 : 
; 4515 : 		// ------------- is rushing ? ---------------------------
; 4516 : 		if (StateId == 0x49) {

  00854	66 83 f8 49	 cmp	 ax, 73			; 00000049H
  00858	75 19		 jne	 SHORT $LN69@Get

; 4517 : 			pInfo->TestIsRushing = true;

  0085a	c6 05 51 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+81, 1

; 4518 : 			pInfo->RushValue = *Trng.pGlobTomb4->pAdr->pDashBarValue;

  00861	8b 96 4a 34 19
	00		 mov	 edx, DWORD PTR [esi+1651786]
  00867	8b 42 64	 mov	 eax, DWORD PTR [edx+100]
  0086a	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  0086d	89 0d 70 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+112, ecx
$LN69@Get:

; 4519 : 		}
; 4520 : 		// ------------- using laser sight ? ---------------------
; 4521 : 		if (pInfo->SkipPhaseFlags & enumSKIP.LASER_SIGHT) {

  00873	a1 54 00 00 00	 mov	 eax, DWORD PTR ?GET@@3UStrGetLocator@@A+84
  00878	85 05 24 00 00
	00		 test	 DWORD PTR ?enumSKIP@@3UStrEnumSKIP@@A+36, eax
  0087e	74 0d		 je	 SHORT $LN68@Get

; 4522 : 			pInfo->TestIsUsingLaserSight=true;

  00880	c6 05 52 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+82, 1

; 4523 : 			pInfo->TestFreeHands=false;

  00887	88 1d 24 00 00
	00		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+36, bl
$LN68@Get:

; 4524 : 		}
; 4525 : 
; 4526 : 		// ------------ using binoculars ? -------------------------
; 4527 : 		if (pInfo->SkipPhaseFlags & enumSKIP.BINOCULARS) {

  0088d	85 05 20 00 00
	00		 test	 DWORD PTR ?enumSKIP@@3UStrEnumSKIP@@A+32, eax
  00893	74 0d		 je	 SHORT $LN67@Get

; 4528 : 			pInfo->TestIsUsingBinoculars=true;

  00895	c6 05 53 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+83, 1

; 4529 : 			pInfo->TestFreeHands=false;

  0089c	88 1d 24 00 00
	00		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+36, bl
$LN67@Get:

; 4530 : 		}
; 4531 : 		// ---------- lara is aiming an enmey? ----------------------
; 4532 : 		pInfo->pStrAimedEnemy = *Trng.pGlobTomb4->pAdr->p2CurrentEnemyTarget;

  008a2	8b 96 4a 34 19
	00		 mov	 edx, DWORD PTR [esi+1651786]
  008a8	8b 82 2c 01 00
	00		 mov	 eax, DWORD PTR [edx+300]
  008ae	8b 00		 mov	 eax, DWORD PTR [eax]
  008b0	a3 59 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+89, eax

; 4533 : 		if (pInfo->pStrAimedEnemy != NULL) {

  008b5	3b c3		 cmp	 eax, ebx
  008b7	74 07		 je	 SHORT $LN66@Get

; 4534 : 			pInfo->TestIsAimingEnemy = true;

  008b9	c6 05 58 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+88, 1
$LN66@Get:

; 4535 : 		
; 4536 : 		}
; 4537 : 
; 4538 : 		// ----------- lara is pushing pushable object? ------------------
; 4539 : 		if (StateId == 0x24 || StateId == 0x25) {

  008c0	8b 55 f8	 mov	 edx, DWORD PTR _StateId$[ebp]
  008c3	66 83 fa 24	 cmp	 dx, 36			; 00000024H
  008c7	74 06		 je	 SHORT $LN64@Get
  008c9	66 83 fa 25	 cmp	 dx, 37			; 00000025H
  008cd	75 57		 jne	 SHORT $LN60@Get
$LN64@Get:

; 4540 : 
; 4541 : 			Index = *Trng.pGlobTomb4->pAdr->pObjectActive;

  008cf	8b 8e 4a 34 19
	00		 mov	 ecx, DWORD PTR [esi+1651786]
  008d5	8b 81 94 00 00
	00		 mov	 eax, DWORD PTR [ecx+148]
  008db	8b 00		 mov	 eax, DWORD PTR [eax]

; 4542 : 			if (Index != -1) {

  008dd	83 f8 ff	 cmp	 eax, -1
  008e0	74 44		 je	 SHORT $LN60@Get

; 4543 : 				Slot = Trng.pGlobTomb4->pAdr->pVetItems[Index].SlotID;

  008e2	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  008e5	8b f8		 mov	 edi, eax
  008e7	69 ff f6 15 00
	00		 imul	 edi, 5622		; 000015f6H
  008ed	0f b7 4c 39 0c	 movzx	 ecx, WORD PTR [ecx+edi+12]

; 4544 : 
; 4545 : 				if (Slot >= enumSLOT.PUSHABLE_OBJECT1 && Slot <= enumSLOT.PUSHABLE_OBJECT5) {

  008f2	3b 0d 70 02 00
	00		 cmp	 ecx, DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+624
  008f8	7c 2c		 jl	 SHORT $LN60@Get
  008fa	3b 0d 80 02 00
	00		 cmp	 ecx, DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+640
  00900	7f 24		 jg	 SHORT $LN60@Get

; 4546 : 					if (StateId == 0x24) {

  00902	66 83 fa 24	 cmp	 dx, 36			; 00000024H

; 4547 : 						pInfo->TestIsPushingItem=true;
; 4548 : 						pInfo->PushableIndex = Index;
; 4549 : 						pInfo->PushableSlot = Slot;
; 4550 : 						pInfo->TestFreeHands=false;
; 4551 : 					}
; 4552 : 					// ----------- lara is pulling pushable object ? ----------------
; 4553 : 					if (StateId == 0x25) {

  00906	74 06		 je	 SHORT $LN192@Get
  00908	66 83 fa 25	 cmp	 dx, 37			; 00000025H
  0090c	75 18		 jne	 SHORT $LN60@Get
$LN192@Get:

; 4554 : 						pInfo->TestIsPushingItem=true;
; 4555 : 						pInfo->PushableIndex = Index;
; 4556 : 						pInfo->PushableSlot = Slot;
; 4557 : 						pInfo->TestFreeHands=false;

  0090e	88 1d 24 00 00
	00		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+36, bl
  00914	89 0d 5f 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+95, ecx
  0091a	a3 63 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+99, eax
  0091f	c6 05 5d 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+93, 1
$LN60@Get:

; 4558 : 					}
; 4559 : 				}
; 4560 : 			}
; 4561 : 		}
; 4562 : 
; 4563 : 		// ------- environment of lara ---------------------------
; 4564 : 		Flags= *Trng.pGlobTomb4->pAdr->pLaraLocationFlags;

  00926	8b 96 4a 34 19
	00		 mov	 edx, DWORD PTR [esi+1651786]
  0092c	8b 42 58	 mov	 eax, DWORD PTR [edx+88]
  0092f	0f b7 00	 movzx	 eax, WORD PTR [eax]

; 4565 : 
; 4566 : 		if (Flags == enumLLF.FLOATING) {

  00932	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR ?enumLLF@@3UStrEnumLLF@@A+8
  00938	75 07		 jne	 SHORT $LN59@Get

; 4567 : 			pInfo->TestEnvFloatingOnWater =true;

  0093a	c6 05 68 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+104, 1
$LN59@Get:

; 4568 : 		}
; 4569 : 		if (Flags== enumLLF.GROUND ) {

  00941	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?enumLLF@@3UStrEnumLLF@@A
  00947	75 07		 jne	 SHORT $LN58@Get

; 4570 : 			pInfo->TestEnvGround =true;

  00949	c6 05 67 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+103, 1
$LN58@Get:

; 4571 : 		}
; 4572 : 
; 4573 : 		if (Flags == enumLLF.LOW_WATER) {

  00950	3b 05 10 00 00
	00		 cmp	 eax, DWORD PTR ?enumLLF@@3UStrEnumLLF@@A+16
  00956	75 07		 jne	 SHORT $LN57@Get

; 4574 : 			pInfo->TestEnvLowWater =true;

  00958	c6 05 6a 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+106, 1
$LN57@Get:

; 4575 : 		}
; 4576 : 
; 4577 : 		if (Flags == enumLLF.UNDERWATER) {

  0095f	3b 05 04 00 00
	00		 cmp	 eax, DWORD PTR ?enumLLF@@3UStrEnumLLF@@A+4
  00965	75 07		 jne	 SHORT $LN56@Get

; 4578 : 			pInfo->TestEnvUnderwater = true;

  00967	c6 05 69 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+105, 1
$LN56@Get:

; 4579 : 		}
; 4580 : 
; 4581 : 		if (Flags == enumLLF.DOZY ) {

  0096e	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?enumLLF@@3UStrEnumLLF@@A+12
  00974	75 07		 jne	 SHORT $LN55@Get

; 4582 : 			pInfo->TestEnvSpecial = true;

  00976	c6 05 6b 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+107, 1
$LN55@Get:

; 4583 : 		}
; 4584 : 
; 4585 : 		// ---------------------- Air available --------------------
; 4586 : 		pInfo->AirValue = *Trng.pGlobTomb4->pAdr->pAirAvailable;

  0097d	8b 8e 4a 34 19
	00		 mov	 ecx, DWORD PTR [esi+1651786]
  00983	8b 91 cc 00 00
	00		 mov	 edx, DWORD PTR [ecx+204]
  00989	0f bf 02	 movsx	 eax, WORD PTR [edx]

; 4587 : 
; 4588 : 		// ------------------- Aligned orienting of Lara ---------------------------
; 4589 : 		pInfo->OrientAligned = GetAlignedOrient(pLara->OrientationH, false, &pInfo->OrientGap);

  0098c	8b 4d fc	 mov	 ecx, DWORD PTR tv1485[ebp]
  0098f	a3 6c 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+108, eax
  00994	66 8b 71 4e	 mov	 si, WORD PTR [ecx+78]
  00998	bf 76 00 00 00	 mov	 edi, OFFSET ?GET@@3UStrGetLocator@@A+118
  0099d	e8 00 00 00 00	 call	 ?GetAlignedOrient@@YAFF_NPAH@Z ; GetAlignedOrient
  009a2	5f		 pop	 edi
  009a3	5e		 pop	 esi
  009a4	66 a3 74 00 00
	00		 mov	 WORD PTR ?GET@@3UStrGetLocator@@A+116, ax

; 4788 : 
; 4789 : 	}
; 4790 : 
; 4791 : 
; 4792 : 	return true;

  009aa	b0 01		 mov	 al, 1
  009ac	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  009ad	8b e5		 mov	 esp, ebp
  009af	5d		 pop	 ebp
  009b0	c3		 ret	 0
$LN54@Get:

; 4595 : 
; 4596 : 		for (i=0;i<MyData.BaseParametersMine.TotParameters;i++) {

  009b1	8b 35 a5 0c 00
	00		 mov	 esi, DWORD PTR ?MyData@@3UStrMyData@@A+3237
  009b7	33 d2		 xor	 edx, edx
  009b9	89 15 7a 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+122, edx
  009bf	3b d6		 cmp	 edx, esi
  009c1	7d 33		 jge	 SHORT $LN193@Get

; 4590 : 
; 4591 : 		break;
; 4592 : 	case GET_MY_PARAMETER_COMMAND:
; 4593 : 		// ---------------- locate my parameter command ------------------
; 4594 : 		GET.pParam=NULL;

  009c3	8b 0d a9 0c 00
	00		 mov	 ecx, DWORD PTR ?MyData@@3UStrMyData@@A+3241
  009c9	8d a4 24 00 00
	00 00		 npad	 7
$LL53@Get:

; 4597 : 			pParam= &MyData.BaseParametersMine.pVetParameters[i];
; 4598 : 
; 4599 : 			if (pParam->ParamValue == Index) {

  009d0	0f b7 39	 movzx	 edi, WORD PTR [ecx]
  009d3	89 4d f8	 mov	 DWORD PTR _pParam$[ebp], ecx
  009d6	3b f8		 cmp	 edi, eax
  009d8	75 0a		 jne	 SHORT $LN52@Get

; 4600 : 				if (SecondaryIndex == -1 || SecondaryIndex == pParam->pVetArg[0]) {

  009da	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  009dd	33 db		 xor	 ebx, ebx
  009df	66 3b 1f	 cmp	 bx, WORD PTR [edi]
  009e2	74 0a		 je	 SHORT $LN48@Get
$LN52@Get:

; 4595 : 
; 4596 : 		for (i=0;i<MyData.BaseParametersMine.TotParameters;i++) {

  009e4	42		 inc	 edx
  009e5	83 c1 08	 add	 ecx, 8
  009e8	3b d6		 cmp	 edx, esi
  009ea	7c e4		 jl	 SHORT $LL53@Get

; 4624 : 				if (SecondaryIndex == -1 || SecondaryIndex == pCust->pVetArg[0]) {

  009ec	eb 06		 jmp	 SHORT $LN188@Get
$LN48@Get:

; 4601 : 					GET.pParam = pParam;

  009ee	89 0d 7a 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+122, ecx
$LN188@Get:

; 4602 : 					break;
; 4603 : 				}
; 4604 : 			}
; 4605 : 		}
; 4606 : 		if (i == MyData.BaseParametersMine.TotParameters) {

  009f4	3b d6		 cmp	 edx, esi
$LN193@Get:
  009f6	75 19		 jne	 SHORT $LN47@Get

; 4607 : 			// not found parameter with given input values
; 4608 : 			SendToLog("ERROR: not found my PARAMETERS of PARAM_ type %d with (further) ID = %d",
; 4609 : 				Index, SecondaryIndex);

  009f8	6a 00		 push	 0
  009fa	50		 push	 eax
  009fb	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@CNKPJEBI@ERROR?3?5not?5found?5my?5PARAMETERS?5o@
  00a00	e8 00 00 00 00	 call	 ?SendToLog@@YA_NPADZZ	; SendToLog
  00a05	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a08	5f		 pop	 edi
  00a09	5e		 pop	 esi

; 4787 : 		return false;

  00a0a	32 c0		 xor	 al, al
  00a0c	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00a0d	8b e5		 mov	 esp, ebp
  00a0f	5d		 pop	 ebp
  00a10	c3		 ret	 0
$LN47@Get:

; 4610 : 
; 4611 : 			return false;
; 4612 : 		}
; 4613 : 		GET.pParam = pParam;

  00a11	8b 55 f8	 mov	 edx, DWORD PTR _pParam$[ebp]
  00a14	5f		 pop	 edi
  00a15	5e		 pop	 esi
  00a16	89 15 7a 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+122, edx

; 4788 : 
; 4789 : 	}
; 4790 : 
; 4791 : 
; 4792 : 	return true;

  00a1c	b0 01		 mov	 al, 1
  00a1e	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00a1f	8b e5		 mov	 esp, ebp
  00a21	5d		 pop	 ebp
  00a22	c3		 ret	 0
$LN46@Get:

; 4618 : 
; 4619 : 		// ------------ find my customize command ----------------------
; 4620 : 		for (i=0;i<MyData.BaseCustomizeMine.TotCustomize;i++) {

  00a23	8b 35 9d 0c 00
	00		 mov	 esi, DWORD PTR ?MyData@@3UStrMyData@@A+3229
  00a29	33 d2		 xor	 edx, edx
  00a2b	89 15 7e 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+126, edx
  00a31	3b d6		 cmp	 edx, esi
  00a33	7d 31		 jge	 SHORT $LN194@Get

; 4614 : 		break;
; 4615 : 
; 4616 : 	case GET_MY_CUSTOMIZE_COMMAND:
; 4617 : 		GET.pCust=NULL;

  00a35	8b 0d a1 0c 00
	00		 mov	 ecx, DWORD PTR ?MyData@@3UStrMyData@@A+3233
  00a3b	eb 03 8d 49 00	 npad	 5
$LL45@Get:

; 4621 : 			pCust = &MyData.BaseCustomizeMine.pVetCustomize[i];
; 4622 : 
; 4623 : 			if (pCust->CustValue == Index) {

  00a40	0f b7 39	 movzx	 edi, WORD PTR [ecx]
  00a43	89 4d f8	 mov	 DWORD PTR _pCust$[ebp], ecx
  00a46	3b f8		 cmp	 edi, eax
  00a48	75 0a		 jne	 SHORT $LN44@Get

; 4624 : 				if (SecondaryIndex == -1 || SecondaryIndex == pCust->pVetArg[0]) {

  00a4a	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00a4d	33 db		 xor	 ebx, ebx
  00a4f	66 3b 1f	 cmp	 bx, WORD PTR [edi]
  00a52	74 0a		 je	 SHORT $LN40@Get
$LN44@Get:

; 4618 : 
; 4619 : 		// ------------ find my customize command ----------------------
; 4620 : 		for (i=0;i<MyData.BaseCustomizeMine.TotCustomize;i++) {

  00a54	42		 inc	 edx
  00a55	83 c1 08	 add	 ecx, 8
  00a58	3b d6		 cmp	 edx, esi
  00a5a	7c e4		 jl	 SHORT $LL45@Get

; 4624 : 				if (SecondaryIndex == -1 || SecondaryIndex == pCust->pVetArg[0]) {

  00a5c	eb 06		 jmp	 SHORT $LN189@Get
$LN40@Get:

; 4625 : 					GET.pCust = pCust;

  00a5e	89 0d 7e 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+126, ecx
$LN189@Get:

; 4626 : 					break;
; 4627 : 				}
; 4628 : 			}
; 4629 : 		}
; 4630 : 		if (i== MyData.BaseCustomizeMine.TotCustomize) {

  00a64	3b d6		 cmp	 edx, esi
$LN194@Get:
  00a66	75 19		 jne	 SHORT $LN39@Get

; 4631 : 			// not found, giving warning only if it has been given also a specific ID
; 4632 : 			if (SecondaryIndex != -1) {
; 4633 : 				SendToLog("WARNING: not found my CUSTOMIZE with CUST_ value=%d and ID = %d",
; 4634 : 					Index, SecondaryIndex);

  00a68	6a 00		 push	 0
  00a6a	50		 push	 eax
  00a6b	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@IEIDMNEG@WARNING?3?5not?5found?5my?5CUSTOMIZE?5@
  00a70	e8 00 00 00 00	 call	 ?SendToLog@@YA_NPADZZ	; SendToLog
  00a75	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a78	5f		 pop	 edi
  00a79	5e		 pop	 esi

; 4787 : 		return false;

  00a7a	32 c0		 xor	 al, al
  00a7c	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00a7d	8b e5		 mov	 esp, ebp
  00a7f	5d		 pop	 ebp
  00a80	c3		 ret	 0
$LN39@Get:

; 4635 : 			}
; 4636 : 			return false;
; 4637 : 		}
; 4638 : 		GET.pCust = pCust;

  00a81	8b 45 f8	 mov	 eax, DWORD PTR _pCust$[ebp]
  00a84	5f		 pop	 edi
  00a85	5e		 pop	 esi
  00a86	a3 7e 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+126, eax

; 4788 : 
; 4789 : 	}
; 4790 : 
; 4791 : 
; 4792 : 	return true;

  00a8b	b0 01		 mov	 al, 1
  00a8d	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00a8e	8b e5		 mov	 esp, ebp
  00a90	5d		 pop	 ebp
  00a91	c3		 ret	 0
$LN37@Get:

; 4639 : 		break;
; 4640 : 	case GET_INPUT:
; 4641 : 		// --------- locate input of keyboard/joystick ----------------------
; 4642 : 		GET.Input.GameCommandsRead = *Trng.pGlobTomb4->pAdr->pInputGameCommands;

  00a92	a1 04 00 00 00	 mov	 eax, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  00a97	8b 88 4a 34 19
	00		 mov	 ecx, DWORD PTR [eax+1651786]
  00a9d	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00aa3	0f b7 0a	 movzx	 ecx, WORD PTR [edx]
  00aa6	89 0d 8e 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+142, ecx

; 4643 : 		GET.Input.pGameCommandsWrite = Trng.pGlobTomb4->pAdr->pInputGameCommands;

  00aac	8b 90 4a 34 19
	00		 mov	 edx, DWORD PTR [eax+1651786]
  00ab2	8b 8a 88 00 00
	00		 mov	 ecx, DWORD PTR [edx+136]
  00ab8	89 0d 92 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+146, ecx

; 4644 : 		GET.Input.InventoryCommandsRead = *Trng.pGlobTomb4->pAdr->pInputExtGameCommands;

  00abe	8b 90 4a 34 19
	00		 mov	 edx, DWORD PTR [eax+1651786]
  00ac4	8b 4a 74	 mov	 ecx, DWORD PTR [edx+116]
  00ac7	8b 11		 mov	 edx, DWORD PTR [ecx]
  00ac9	89 15 96 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+150, edx

; 4645 : 		GET.Input.VetScanCode = Trng.pGlobTomb4->pAdr->pVetInputKeyboard;

  00acf	8b 80 4a 34 19
	00		 mov	 eax, DWORD PTR [eax+1651786]
  00ad5	8b 48 7c	 mov	 ecx, DWORD PTR [eax+124]
  00ad8	5f		 pop	 edi
  00ad9	5e		 pop	 esi
  00ada	89 0d 9a 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+154, ecx

; 4788 : 
; 4789 : 	}
; 4790 : 
; 4791 : 
; 4792 : 	return true;

  00ae0	b0 01		 mov	 al, 1
  00ae2	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00ae3	8b e5		 mov	 esp, ebp
  00ae5	5d		 pop	 ebp
  00ae6	c3		 ret	 0
$LN36@Get:

; 4646 : 		
; 4647 : 		break;
; 4648 : 	case GET_SCRIPT_SETTINGS:
; 4649 : 		pScript= &GET.ScriptSettings;
; 4650 : 		
; 4651 : 		if (Trng.pGlobTomb4->ScriptOptions.MainFlags & 1) {

  00ae7	a1 04 00 00 00	 mov	 eax, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  00aec	8a 90 2a 20 1b
	00		 mov	 dl, BYTE PTR [eax+1777706]
  00af2	80 e2 01	 and	 dl, 1
  00af5	88 15 b2 00 00
	00		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+178, dl

; 4652 : 			pScript->TestDiagnostic=true;
; 4653 : 		}else {
; 4654 : 			pScript->TestDiagnostic=false;
; 4655 : 		}
; 4656 : 
; 4657 : 		pScript->pFMV_Extension = &Trng.pGlobTomb4->pAdr->pScriptDat[0x29];

  00afb	8b 88 4a 34 19
	00		 mov	 ecx, DWORD PTR [eax+1651786]
  00b01	8b 91 c4 00 00
	00		 mov	 edx, DWORD PTR [ecx+196]
  00b07	83 c2 29	 add	 edx, 41			; 00000029H
  00b0a	89 15 b3 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+179, edx

; 4658 : 
; 4659 : 		pScript->FlagsMain = *Trng.pGlobTomb4->pAdr->pScriptMainFlags;

  00b10	8b 88 4a 34 19
	00		 mov	 ecx, DWORD PTR [eax+1651786]
  00b16	8b 91 c0 00 00
	00		 mov	 edx, DWORD PTR [ecx+192]
  00b1c	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00b1f	89 0d b7 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+183, ecx

; 4660 : 		pScript->FlagsLevel = *Trng.pGlobTomb4->pAdr->pScriptLevelFlags;

  00b25	8b 90 4a 34 19
	00		 mov	 edx, DWORD PTR [eax+1651786]
  00b2b	8b 8a bc 00 00
	00		 mov	 ecx, DWORD PTR [edx+188]
  00b31	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00b34	89 15 bb 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+187, edx

; 4661 : 		pScript->DiagnosticDGX = Trng.pGlobTomb4->pDiagnostica->FlagsDgx;

  00b3a	8b 88 ec 20 1b
	00		 mov	 ecx, DWORD PTR [eax+1777900]
  00b40	0f b7 51 39	 movzx	 edx, WORD PTR [ecx+57]
  00b44	89 15 c3 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+195, edx

; 4662 : 		pScript->DiagnosticEDGX = Trng.pGlobTomb4->pDiagnostica->DgxExtra;

  00b4a	8b 80 ec 20 1b
	00		 mov	 eax, DWORD PTR [eax+1777900]
  00b50	0f b7 48 3b	 movzx	 ecx, WORD PTR [eax+59]
  00b54	5f		 pop	 edi
  00b55	5e		 pop	 esi
  00b56	89 0d bf 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+191, ecx

; 4788 : 
; 4789 : 	}
; 4790 : 
; 4791 : 
; 4792 : 	return true;

  00b5c	b0 01		 mov	 al, 1
  00b5e	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00b5f	8b e5		 mov	 esp, ebp
  00b61	5d		 pop	 ebp
  00b62	c3		 ret	 0
$LN33@Get:

; 4663 : 		break;
; 4664 : 	case GET_STRINGNG:
; 4665 : 		GET.pStringNG = GetString(Index | STRING_NG);

  00b63	0d 00 80 00 00	 or	 eax, 32768		; 00008000H
  00b68	e8 00 00 00 00	 call	 ?GetString@@YAPADH@Z	; GetString
  00b6d	5f		 pop	 edi
  00b6e	5e		 pop	 esi
  00b6f	a3 9e 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+158, eax

; 4788 : 
; 4789 : 	}
; 4790 : 
; 4791 : 
; 4792 : 	return true;

  00b74	b0 01		 mov	 al, 1
  00b76	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00b77	8b e5		 mov	 esp, ebp
  00b79	5d		 pop	 ebp
  00b7a	c3		 ret	 0
$LN32@Get:

; 4666 : 		break;
; 4667 : 	case GET_STRING:
; 4668 : 		GET.pString = GetString(Index);

  00b7b	e8 00 00 00 00	 call	 ?GetString@@YAPADH@Z	; GetString
  00b80	5f		 pop	 edi
  00b81	5e		 pop	 esi
  00b82	a3 a6 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+166, eax

; 4788 : 
; 4789 : 	}
; 4790 : 
; 4791 : 
; 4792 : 	return true;

  00b87	b0 01		 mov	 al, 1
  00b89	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00b8a	8b e5		 mov	 esp, ebp
  00b8c	5d		 pop	 ebp
  00b8d	c3		 ret	 0
$LN31@Get:

; 4669 : 		break;
; 4670 : 	case GET_BIG_NUMBER:
; 4671 : 		GET.BigNumber=0;
; 4672 : 		if (Index < 0 || Index >= Trng.pGlobTomb4->TotBigNumbers) {

  00b8e	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  00b94	c7 05 aa 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+170, 0
  00b9e	85 c0		 test	 eax, eax
  00ba0	78 1f		 js	 SHORT $LN29@Get
  00ba2	3b 81 fb f0 00
	00		 cmp	 eax, DWORD PTR [ecx+61691]
  00ba8	7d 17		 jge	 SHORT $LN29@Get

; 4675 : 			return false;
; 4676 : 		}
; 4677 : 		GET.BigNumber = Trng.pGlobTomb4->VetBigNumbers[Index];

  00baa	0f b7 94 41 ff
	f0 00 00	 movzx	 edx, WORD PTR [ecx+eax*2+61695]
  00bb2	5f		 pop	 edi
  00bb3	5e		 pop	 esi
  00bb4	89 15 aa 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+170, edx

; 4788 : 
; 4789 : 	}
; 4790 : 
; 4791 : 
; 4792 : 	return true;

  00bba	b0 01		 mov	 al, 1
  00bbc	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00bbd	8b e5		 mov	 esp, ebp
  00bbf	5d		 pop	 ebp
  00bc0	c3		 ret	 0
$LN29@Get:

; 4673 : 			SendToLog("ERROR: Get(GET_BIG_NUMBER) invalid index (%d) for big number, outside of valid range 0 - %d",
; 4674 : 				Index, Trng.pGlobTomb4->TotBigNumbers);

  00bc1	8b 89 fb f0 00
	00		 mov	 ecx, DWORD PTR [ecx+61691]
  00bc7	51		 push	 ecx
  00bc8	50		 push	 eax
  00bc9	68 00 00 00 00	 push	 OFFSET ??_C@_0FM@KHLDPOBM@ERROR?3?5Get?$CIGET_BIG_NUMBER?$CJ?5inval@
  00bce	e8 00 00 00 00	 call	 ?SendToLog@@YA_NPADZZ	; SendToLog
  00bd3	83 c4 0c	 add	 esp, 12			; 0000000cH
  00bd6	5f		 pop	 edi
  00bd7	5e		 pop	 esi

; 4787 : 		return false;

  00bd8	32 c0		 xor	 al, al
  00bda	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00bdb	8b e5		 mov	 esp, ebp
  00bdd	5d		 pop	 ebp
  00bde	c3		 ret	 0
$LN28@Get:

; 4678 : 		break;
; 4679 : 	case GET_PROGRESSIVE_ACTION:
; 4680 : 		GET.pAction = GetNewProgrAction();

  00bdf	e8 00 00 00 00	 call	 ?GetNewProgrAction@@YAPAUStrProgressiveAction@@XZ ; GetNewProgrAction
  00be4	5f		 pop	 edi
  00be5	5e		 pop	 esi
  00be6	a3 ae 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+174, eax

; 4788 : 
; 4789 : 	}
; 4790 : 
; 4791 : 
; 4792 : 	return true;

  00beb	b0 01		 mov	 al, 1
  00bed	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00bee	8b e5		 mov	 esp, ebp
  00bf0	5d		 pop	 ebp
  00bf1	c3		 ret	 0
$LN27@Get:

; 4681 : 		break;
; 4682 : 	case GET_AI_ITEM:
; 4683 : 		GET.pAI=NULL;
; 4684 : 		z= *Trng.pGlobTomb4->pAdr->pTotAIData;

  00bf2	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  00bf8	c7 05 8a 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+138, 0
  00c02	8b 8a 4a 34 19
	00		 mov	 ecx, DWORD PTR [edx+1651786]
  00c08	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00c0e	8b 12		 mov	 edx, DWORD PTR [edx]

; 4685 : 		if (Index < 0 || Index >= z) {

  00c10	85 c0		 test	 eax, eax
  00c12	78 1f		 js	 SHORT $LN25@Get
  00c14	3b c2		 cmp	 eax, edx
  00c16	7d 1b		 jge	 SHORT $LN25@Get

; 4688 : 			return false;
; 4689 : 		}
; 4690 : 		GET.pAI = &Trng.pGlobTomb4->pAdr->pVetAIData[Index];

  00c18	8b 89 80 00 00
	00		 mov	 ecx, DWORD PTR [ecx+128]
  00c1e	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00c21	5f		 pop	 edi
  00c22	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00c25	5e		 pop	 esi
  00c26	89 15 8a 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+138, edx

; 4788 : 
; 4789 : 	}
; 4790 : 
; 4791 : 
; 4792 : 	return true;

  00c2c	b0 01		 mov	 al, 1
  00c2e	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00c2f	8b e5		 mov	 esp, ebp
  00c31	5d		 pop	 ebp
  00c32	c3		 ret	 0
$LN25@Get:

; 4686 : 			SendToLog("ERROR: Get(GET_AI_ITEM) invalid index (%d), outside of valid range 0 - %d",
; 4687 : 				Index, z);

  00c33	52		 push	 edx
  00c34	50		 push	 eax
  00c35	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@GOOBMJEN@ERROR?3?5Get?$CIGET_AI_ITEM?$CJ?5invalid?5@
  00c3a	e8 00 00 00 00	 call	 ?SendToLog@@YA_NPADZZ	; SendToLog
  00c3f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00c42	5f		 pop	 edi
  00c43	5e		 pop	 esi

; 4787 : 		return false;

  00c44	32 c0		 xor	 al, al
  00c46	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00c47	8b e5		 mov	 esp, ebp
  00c49	5d		 pop	 ebp
  00c4a	c3		 ret	 0
$LN24@Get:

; 4691 : 		break;		
; 4692 : 	case GET_LIGHT:
; 4693 : 		GET.pLight=NULL;
; 4694 : 
; 4695 : 		z= *Trng.pGlobTomb4->pAdr->pTotRooms;

  00c4b	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  00c51	c7 05 a2 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+162, 0
  00c5b	8b 89 4a 34 19
	00		 mov	 ecx, DWORD PTR [ecx+1651786]
  00c61	8b 91 d0 00 00
	00		 mov	 edx, DWORD PTR [ecx+208]
  00c67	0f b7 12	 movzx	 edx, WORD PTR [edx]

; 4696 : 
; 4697 : 		if (Index < 0 || Index >= z) {

  00c6a	85 c0		 test	 eax, eax
  00c6c	78 42		 js	 SHORT $LN22@Get
  00c6e	3b c2		 cmp	 eax, edx
  00c70	7d 3e		 jge	 SHORT $LN22@Get

; 4700 : 			return false;
; 4701 : 		}
; 4702 : 
; 4703 : 		z= Trng.pGlobTomb4->pAdr->pVetRooms[Index].TotLights;

  00c72	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00c75	69 c0 94 00 00
	00		 imul	 eax, 148		; 00000094H
  00c7b	03 c8		 add	 ecx, eax
  00c7d	0f b7 41 30	 movzx	 eax, WORD PTR [ecx+48]

; 4704 : 		if (SecondaryIndex < 0 || SecondaryIndex >= z) {

  00c81	85 c0		 test	 eax, eax
  00c83	7e 12		 jle	 SHORT $LN20@Get

; 4707 : 			return false;
; 4708 : 		}
; 4709 : 
; 4710 : 		GET.pLight = &Trng.pGlobTomb4->pAdr->pVetRooms[Index].pLights[SecondaryIndex];

  00c85	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00c88	5f		 pop	 edi
  00c89	5e		 pop	 esi
  00c8a	89 15 a2 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+162, edx

; 4788 : 
; 4789 : 	}
; 4790 : 
; 4791 : 
; 4792 : 	return true;

  00c90	b0 01		 mov	 al, 1
  00c92	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00c93	8b e5		 mov	 esp, ebp
  00c95	5d		 pop	 ebp
  00c96	c3		 ret	 0
$LN20@Get:

; 4705 : 			SendToLog("ERROR: Get(GET_LIGHT) invalid SecondaryIndex (%d), outside of valid range 0 - %d",
; 4706 : 				SecondaryIndex, z);

  00c97	50		 push	 eax
  00c98	6a 00		 push	 0
  00c9a	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@NIKDIKMG@ERROR?3?5Get?$CIGET_LIGHT?$CJ?5invalid?5Se@
  00c9f	e8 00 00 00 00	 call	 ?SendToLog@@YA_NPADZZ	; SendToLog
  00ca4	83 c4 0c	 add	 esp, 12			; 0000000cH
  00ca7	5f		 pop	 edi
  00ca8	5e		 pop	 esi

; 4787 : 		return false;

  00ca9	32 c0		 xor	 al, al
  00cab	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00cac	8b e5		 mov	 esp, ebp
  00cae	5d		 pop	 ebp
  00caf	c3		 ret	 0
$LN22@Get:

; 4698 : 			SendToLog("ERROR: Get(GET_LIGHT) invalid room index (%d), outside of valid range 0 - %d",
; 4699 : 					Index, z);

  00cb0	52		 push	 edx
  00cb1	50		 push	 eax
  00cb2	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@IINEOOAJ@ERROR?3?5Get?$CIGET_LIGHT?$CJ?5invalid?5ro@
  00cb7	e8 00 00 00 00	 call	 ?SendToLog@@YA_NPADZZ	; SendToLog
  00cbc	83 c4 0c	 add	 esp, 12			; 0000000cH
  00cbf	5f		 pop	 edi
  00cc0	5e		 pop	 esi

; 4787 : 		return false;

  00cc1	32 c0		 xor	 al, al
  00cc3	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00cc4	8b e5		 mov	 esp, ebp
  00cc6	5d		 pop	 ebp
  00cc7	c3		 ret	 0
$LN19@Get:

; 4711 : 		break;
; 4712 : 	case GET_CAMERA:
; 4713 : 		GET.pCamera=NULL;
; 4714 : 		if (Index & NGLE_INDEX) {

  00cc8	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  00cce	c7 05 86 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+134, 0
  00cd8	a9 00 40 00 00	 test	 eax, 16384		; 00004000H
  00cdd	74 16		 je	 SHORT $LN17@Get

; 4715 : 			Index &= MASK_NGLE_INDEX;

  00cdf	25 ff 3f 00 00	 and	 eax, 16383		; 00003fffH

; 4716 : 			TombIndex=FromNgleIndexToTomb4Index(Index);

  00ce4	0f bf 84 41 74
	2c 1a 00	 movsx	 eax, WORD PTR [ecx+eax*2+1715316]

; 4717 : 			if (TombIndex==-1) return false;

  00cec	83 f8 ff	 cmp	 eax, -1
  00cef	0f 84 5e 02 00
	00		 je	 $LN191@Get
$LN17@Get:

; 4718 : 			Index= TombIndex;
; 4719 : 		}
; 4720 : 		z= *Trng.pGlobTomb4->pAdr->Camera.pTotCameras;

  00cf5	8b 89 4a 34 19
	00		 mov	 ecx, DWORD PTR [ecx+1651786]
  00cfb	8b 91 00 01 00
	00		 mov	 edx, DWORD PTR [ecx+256]
  00d01	8b 12		 mov	 edx, DWORD PTR [edx]

; 4721 : 		if (Index < 0 || Index >= z) {

  00d03	85 c0		 test	 eax, eax
  00d05	78 1b		 js	 SHORT $LN15@Get
  00d07	3b c2		 cmp	 eax, edx
  00d09	7d 17		 jge	 SHORT $LN15@Get

; 4724 : 			return false;
; 4725 : 		}
; 4726 : 		GET.pCamera = &Trng.pGlobTomb4->pAdr->Camera.pVetCamera[Index];

  00d0b	c1 e0 04	 shl	 eax, 4
  00d0e	03 81 d4 00 00
	00		 add	 eax, DWORD PTR [ecx+212]
  00d14	5f		 pop	 edi
  00d15	5e		 pop	 esi
  00d16	a3 86 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+134, eax

; 4788 : 
; 4789 : 	}
; 4790 : 
; 4791 : 
; 4792 : 	return true;

  00d1b	b0 01		 mov	 al, 1
  00d1d	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00d1e	8b e5		 mov	 esp, ebp
  00d20	5d		 pop	 ebp
  00d21	c3		 ret	 0
$LN15@Get:

; 4722 : 			SendToLog("ERROR: Get(GET_CAMERA), invalid index (%d), outside of valid range 0 - %d",
; 4723 : 				Index, z);

  00d22	52		 push	 edx
  00d23	50		 push	 eax
  00d24	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@DFOFGCKG@ERROR?3?5Get?$CIGET_CAMERA?$CJ?0?5invalid?5@
  00d29	e8 00 00 00 00	 call	 ?SendToLog@@YA_NPADZZ	; SendToLog
  00d2e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00d31	5f		 pop	 edi
  00d32	5e		 pop	 esi

; 4787 : 		return false;

  00d33	32 c0		 xor	 al, al
  00d35	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00d36	8b e5		 mov	 esp, ebp
  00d38	5d		 pop	 ebp
  00d39	c3		 ret	 0
$LN14@Get:

; 4727 : 		break;
; 4728 : 	case GET_CAMERA_FLY:
; 4729 : 		if (Index & NGLE_INDEX) {

  00d3a	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  00d40	a9 00 40 00 00	 test	 eax, 16384		; 00004000H
  00d45	74 16		 je	 SHORT $LN12@Get

; 4730 : 			Index &= MASK_NGLE_INDEX;

  00d47	25 ff 3f 00 00	 and	 eax, 16383		; 00003fffH

; 4731 : 			TombIndex=FromNgleIndexToTomb4Index(Index);

  00d4c	0f bf 84 41 74
	2c 1a 00	 movsx	 eax, WORD PTR [ecx+eax*2+1715316]

; 4732 : 			if (TombIndex==-1) return false;

  00d54	83 f8 ff	 cmp	 eax, -1
  00d57	0f 84 f6 01 00
	00		 je	 $LN191@Get
$LN12@Get:

; 4733 : 			Index= TombIndex;
; 4734 : 		}
; 4735 : 		GET.pCameraFly=NULL;

  00d5d	c7 05 82 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+130, 0

; 4736 : 		z= *Trng.pGlobTomb4->pAdr->pTotFlyBy;

  00d67	8b 89 4a 34 19
	00		 mov	 ecx, DWORD PTR [ecx+1651786]
  00d6d	8b 91 0c 01 00
	00		 mov	 edx, DWORD PTR [ecx+268]
  00d73	8b 12		 mov	 edx, DWORD PTR [edx]

; 4737 : 		if (Index < 0 || Index >= z) {

  00d75	85 c0		 test	 eax, eax
  00d77	78 1f		 js	 SHORT $LN10@Get
  00d79	3b c2		 cmp	 eax, edx
  00d7b	7d 1b		 jge	 SHORT $LN10@Get

; 4740 : 			return false;
; 4741 : 		}
; 4742 : 		GET.pCameraFly = &Trng.pGlobTomb4->pAdr->pVetFlyBy[Index];

  00d7d	8b 89 10 01 00
	00		 mov	 ecx, DWORD PTR [ecx+272]
  00d83	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00d86	5f		 pop	 edi
  00d87	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00d8a	5e		 pop	 esi
  00d8b	89 15 82 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+130, edx

; 4788 : 
; 4789 : 	}
; 4790 : 
; 4791 : 
; 4792 : 	return true;

  00d91	b0 01		 mov	 al, 1
  00d93	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00d94	8b e5		 mov	 esp, ebp
  00d96	5d		 pop	 ebp
  00d97	c3		 ret	 0
$LN10@Get:

; 4738 : 			SendToLog("ERROR: Get(GET_CAMERA_FLY), invalid index (%d), outside of valid range 0 - %d",
; 4739 : 				Index, z);

  00d98	52		 push	 edx
  00d99	50		 push	 eax
  00d9a	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@OCOFIECI@ERROR?3?5Get?$CIGET_CAMERA_FLY?$CJ?0?5inva@
  00d9f	e8 00 00 00 00	 call	 ?SendToLog@@YA_NPADZZ	; SendToLog
  00da4	83 c4 0c	 add	 esp, 12			; 0000000cH
  00da7	5f		 pop	 edi
  00da8	5e		 pop	 esi

; 4787 : 		return false;

  00da9	32 c0		 xor	 al, al
  00dab	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00dac	8b e5		 mov	 esp, ebp
  00dae	5d		 pop	 ebp
  00daf	c3		 ret	 0
$LN9@Get:

; 4743 : 		break;
; 4744 : 	case GET_GAME_INFO:
; 4745 : 		pGame = &GET.GameInfo;
; 4746 : 
; 4747 : 		pGame->FrameCounter = *Trng.pGlobTomb4->pAdr->pFrameCounter;

  00db0	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  00db6	8b 81 4a 34 19
	00		 mov	 eax, DWORD PTR [ecx+1651786]
  00dbc	8b 90 1c 01 00
	00		 mov	 edx, DWORD PTR [eax+284]
  00dc2	8b 02		 mov	 eax, DWORD PTR [edx]
  00dc4	a3 d0 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+208, eax

; 4748 : 		pGame->LevelIndex= *Trng.pGlobTomb4->pAdr->pLevelNow;

  00dc9	8b 91 4a 34 19
	00		 mov	 edx, DWORD PTR [ecx+1651786]
  00dcf	8b 82 b8 00 00
	00		 mov	 eax, DWORD PTR [edx+184]
  00dd5	0f b6 10	 movzx	 edx, BYTE PTR [eax]
  00dd8	89 15 cc 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+204, edx

; 4749 : 		pGame->RowHeight = *Trng.pGlobTomb4->pAdr->pRowCharHeight;

  00dde	8b 81 4a 34 19
	00		 mov	 eax, DWORD PTR [ecx+1651786]
  00de4	8b 90 ac 00 00
	00		 mov	 edx, DWORD PTR [eax+172]
  00dea	0f bf 02	 movsx	 eax, WORD PTR [edx]
  00ded	a3 dc 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+220, eax

; 4750 : 		pGame->ScreenSizeX = *Trng.pGlobTomb4->pAdr->pSizeScreenX;

  00df2	8b 91 4a 34 19
	00		 mov	 edx, DWORD PTR [ecx+1651786]
  00df8	8b 82 a4 00 00
	00		 mov	 eax, DWORD PTR [edx+164]
  00dfe	0f bf 10	 movsx	 edx, WORD PTR [eax]
  00e01	89 15 d4 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+212, edx

; 4751 : 		pGame->ScreenSizeY = *Trng.pGlobTomb4->pAdr->pSizeScreenY;

  00e07	8b 81 4a 34 19
	00		 mov	 eax, DWORD PTR [ecx+1651786]
  00e0d	8b 90 a8 00 00
	00		 mov	 edx, DWORD PTR [eax+168]
  00e13	0f bf 02	 movsx	 eax, WORD PTR [edx]
  00e16	a3 d8 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+216, eax

; 4752 : 		pGame->TestVolumetric=false;

  00e1b	33 c0		 xor	 eax, eax
  00e1d	a2 cb 00 00 00	 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+203, al

; 4753 : 		if (*Trng.pGlobTomb4->pAdr->pSetting_Volumetric != 0) {

  00e22	8b 91 4a 34 19
	00		 mov	 edx, DWORD PTR [ecx+1651786]
  00e28	8b 92 74 01 00
	00		 mov	 edx, DWORD PTR [edx+372]
  00e2e	38 02		 cmp	 BYTE PTR [edx], al
  00e30	74 07		 je	 SHORT $LN8@Get

; 4754 : 			pGame->TestVolumetric =true;

  00e32	c6 05 cb 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+203, 1
$LN8@Get:

; 4755 : 		}
; 4756 : 
; 4757 : 		pGame->AudioTrack = *Trng.pGlobTomb4->pAdr->pCDTrackNow;

  00e39	8b 91 4a 34 19
	00		 mov	 edx, DWORD PTR [ecx+1651786]
  00e3f	8b 92 c8 01 00
	00		 mov	 edx, DWORD PTR [edx+456]
  00e45	8b 12		 mov	 edx, DWORD PTR [edx]
  00e47	89 15 e0 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+224, edx

; 4758 : 		pGame->TestAudioLooped=false;

  00e4d	a2 e4 00 00 00	 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+228, al

; 4759 : 		if (*Trng.pGlobTomb4->pAdr->pAudioTrackLoop != 0) {

  00e52	8b 91 4a 34 19
	00		 mov	 edx, DWORD PTR [ecx+1651786]
  00e58	8b 92 60 01 00
	00		 mov	 edx, DWORD PTR [edx+352]
  00e5e	39 02		 cmp	 DWORD PTR [edx], eax
  00e60	74 07		 je	 SHORT $LN7@Get

; 4760 : 			pGame->TestAudioLooped=true;

  00e62	c6 05 e4 00 00
	00 01		 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+228, 1
$LN7@Get:

; 4761 : 		}
; 4762 : 
; 4763 : 		pGame->TestExclusiveVideo = IsFullScreenMode();

  00e69	8b 15 68 44 75
	00		 mov	 edx, DWORD PTR ds:7685224
  00e6f	3b d0		 cmp	 edx, eax
  00e71	74 09		 je	 SHORT $LN172@Get
  00e73	8a 42 4c	 mov	 al, BYTE PTR [edx+76]
  00e76	d0 e8		 shr	 al, 1
  00e78	f6 d0		 not	 al
  00e7a	24 01		 and	 al, 1
$LN172@Get:
  00e7c	a2 e5 00 00 00	 mov	 BYTE PTR ?GET@@3UStrGetLocator@@A+229, al

; 4764 : 		pGame->pVar = Trng.pGlobTomb4->pBaseVariableTRNG;

  00e81	8b 81 8a 02 01
	00		 mov	 eax, DWORD PTR [ecx+66186]
  00e87	5f		 pop	 edi
  00e88	5e		 pop	 esi
  00e89	a3 e6 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+230, eax

; 4788 : 
; 4789 : 	}
; 4790 : 
; 4791 : 
; 4792 : 	return true;

  00e8e	b0 01		 mov	 al, 1
  00e90	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00e91	8b e5		 mov	 esp, ebp
  00e93	5d		 pop	 ebp
  00e94	c3		 ret	 0
$LN6@Get:

; 4765 : 	
; 4766 : 	
; 4767 : 		break;
; 4768 : 	case GET_SLOT:
; 4769 : 		if (Index < 0 || Index >= enumSLOT.NUMBER_OBJECTS) {

  00e95	8b 0d 20 08 00
	00		 mov	 ecx, DWORD PTR ?enumSLOT@@3UStrEnumSLOT@@A+2080
  00e9b	85 c0		 test	 eax, eax
  00e9d	78 24		 js	 SHORT $LN4@Get
  00e9f	3b c1		 cmp	 eax, ecx
  00ea1	7d 20		 jge	 SHORT $LN4@Get

; 4772 : 			return false;
; 4773 : 		}
; 4774 : 		GET.pSlot = &Trng.pGlobTomb4->pAdr->pVetSlot[Index];

  00ea3	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  00ea9	8b 91 4a 34 19
	00		 mov	 edx, DWORD PTR [ecx+1651786]
  00eaf	c1 e0 06	 shl	 eax, 6
  00eb2	03 42 18	 add	 eax, DWORD PTR [edx+24]
  00eb5	5f		 pop	 edi
  00eb6	5e		 pop	 esi
  00eb7	a3 ea 00 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+234, eax

; 4788 : 
; 4789 : 	}
; 4790 : 
; 4791 : 
; 4792 : 	return true;

  00ebc	b0 01		 mov	 al, 1
  00ebe	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00ebf	8b e5		 mov	 esp, ebp
  00ec1	5d		 pop	 ebp
  00ec2	c3		 ret	 0
$LN4@Get:

; 4770 : 			SendToLog("ERROR: Get(GET_SLOT) Invalid index value (%d), outside of valid range 0 - %d", Index,
; 4771 : 				enumSLOT.NUMBER_OBJECTS);

  00ec3	51		 push	 ecx
  00ec4	50		 push	 eax
  00ec5	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@GIKIANME@ERROR?3?5Get?$CIGET_SLOT?$CJ?5Invalid?5ind@
  00eca	e8 00 00 00 00	 call	 ?SendToLog@@YA_NPADZZ	; SendToLog
  00ecf	83 c4 0c	 add	 esp, 12			; 0000000cH
  00ed2	5f		 pop	 edi
  00ed3	5e		 pop	 esi

; 4787 : 		return false;

  00ed4	32 c0		 xor	 al, al
  00ed6	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00ed7	8b e5		 mov	 esp, ebp
  00ed9	5d		 pop	 ebp
  00eda	c3		 ret	 0
$LN3@Get:

; 4775 : 		break;
; 4776 : 	case GET_INVENTORY:
; 4777 : 		GET.pInventory = Trng.pGlobTomb4->pAdr->pInventory;

  00edb	a1 04 00 00 00	 mov	 eax, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  00ee0	8b 88 4a 34 19
	00		 mov	 ecx, DWORD PTR [eax+1651786]
  00ee6	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00ee9	89 0d ee 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+238, ecx

; 4778 : 		GET.InventoryData.pItemPresence = GET.pInventory;

  00eef	89 0d fc 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+252, ecx

; 4779 : 		GET.InventoryData.pChosenItemSlot = Trng.pGlobTomb4->pAdr->pInventoryChosenItem;

  00ef5	8b 90 4a 34 19
	00		 mov	 edx, DWORD PTR [eax+1651786]
  00efb	8b 8a 14 02 00
	00		 mov	 ecx, DWORD PTR [edx+532]
  00f01	89 0d 00 01 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+256, ecx

; 4780 : 		GET.InventoryData.pRequiredItemSlot = Trng.pGlobTomb4->pAdr->pInventoryRequiredSlotItem;

  00f07	8b 90 4a 34 19
	00		 mov	 edx, DWORD PTR [eax+1651786]
  00f0d	8b 82 10 02 00
	00		 mov	 eax, DWORD PTR [edx+528]
  00f13	5f		 pop	 edi
  00f14	5e		 pop	 esi
  00f15	a3 04 01 00 00	 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+260, eax

; 4788 : 
; 4789 : 	}
; 4790 : 
; 4791 : 
; 4792 : 	return true;

  00f1a	b0 01		 mov	 al, 1
  00f1c	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00f1d	8b e5		 mov	 esp, ebp
  00f1f	5d		 pop	 ebp
  00f20	c3		 ret	 0
$LN2@Get:

; 4781 : 		break;
; 4782 : 	case GET_ANIMATION:
; 4783 : 		GET.pAnimation = &Trng.pGlobTomb4->pAdr->pVetAnimations[Index];

  00f21	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?Trng@@3UStrTrngInfos@@A+4
  00f27	8b 91 4a 34 19
	00		 mov	 edx, DWORD PTR [ecx+1651786]
  00f2d	8b 4a 30	 mov	 ecx, DWORD PTR [edx+48]
  00f30	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00f33	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00f36	89 15 f2 00 00
	00		 mov	 DWORD PTR ?GET@@3UStrGetLocator@@A+242, edx
$LN155@Get:

; 4788 : 
; 4789 : 	}
; 4790 : 
; 4791 : 
; 4792 : 	return true;

  00f3c	5f		 pop	 edi
  00f3d	5e		 pop	 esi
  00f3e	b0 01		 mov	 al, 1
  00f40	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00f41	8b e5		 mov	 esp, ebp
  00f43	5d		 pop	 ebp
  00f44	c3		 ret	 0
$LN1@Get:

; 4784 : 		break;
; 4785 : 	default:
; 4786 : 		SendToLog("ERROR: unknown meaning of GET_ constant with value = %d", GET_Type);

  00f45	57		 push	 edi
  00f46	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@DEBNJFPA@ERROR?3?5unknown?5meaning?5of?5GET_?5c@
  00f4b	e8 00 00 00 00	 call	 ?SendToLog@@YA_NPADZZ	; SendToLog
  00f50	83 c4 08	 add	 esp, 8
$LN191@Get:

; 4787 : 		return false;

  00f53	5f		 pop	 edi
  00f54	5e		 pop	 esi
  00f55	32 c0		 xor	 al, al
  00f57	5b		 pop	 ebx

; 4793 : 	
; 4794 : }

  00f58	8b e5		 mov	 esp, ebp
  00f5a	5d		 pop	 ebp
  00f5b	c3		 ret	 0
$LN196@Get:
  00f5c	00 00 00 00	 DD	 $LN133@Get
  00f60	00 00 00 00	 DD	 $LN132@Get
  00f64	00 00 00 00	 DD	 $LN127@Get
  00f68	00 00 00 00	 DD	 $LN119@Get
  00f6c	00 00 00 00	 DD	 $LN114@Get
  00f70	00 00 00 00	 DD	 $LN109@Get
  00f74	00 00 00 00	 DD	 $LN109@Get
  00f78	00 00 00 00	 DD	 $LN99@Get
  00f7c	00 00 00 00	 DD	 $LN96@Get
  00f80	00 00 00 00	 DD	 $LN54@Get
  00f84	00 00 00 00	 DD	 $LN46@Get
  00f88	00 00 00 00	 DD	 $LN37@Get
  00f8c	00 00 00 00	 DD	 $LN33@Get
  00f90	00 00 00 00	 DD	 $LN32@Get
  00f94	00 00 00 00	 DD	 $LN31@Get
  00f98	00 00 00 00	 DD	 $LN36@Get
  00f9c	00 00 00 00	 DD	 $LN28@Get
  00fa0	00 00 00 00	 DD	 $LN27@Get
  00fa4	00 00 00 00	 DD	 $LN24@Get
  00fa8	00 00 00 00	 DD	 $LN19@Get
  00fac	00 00 00 00	 DD	 $LN14@Get
  00fb0	00 00 00 00	 DD	 $LN116@Get
  00fb4	00 00 00 00	 DD	 $LN9@Get
  00fb8	00 00 00 00	 DD	 $LN6@Get
  00fbc	00 00 00 00	 DD	 $LN3@Get
  00fc0	00 00 00 00	 DD	 $LN2@Get
  00fc4	00 00 00 00	 DD	 $LN152@Get
  00fc8	00 00 00 00	 DD	 $LN153@Get
  00fcc	00 00 00 00	 DD	 $LN154@Get
?Get@@YA_NHHH@Z ENDP					; Get
_TEXT	ENDS
PUBLIC	?PerformFlipeffect@@YA_NPADHHH@Z		; PerformFlipeffect
; Function compile flags: /Ogtp
;	COMDAT ?PerformFlipeffect@@YA_NPADHHH@Z
_TEXT	SEGMENT
?PerformFlipeffect@@YA_NPADHHH@Z PROC			; PerformFlipeffect, COMDAT
; _Arg1$ = eax

; 3060 : 	int TimerField;
; 3061 : 	int PluginId;
; 3062 : 
; 3063 : 	if (Arg2==0) {
; 3064 : 		TimerField=Arg1;
; 3065 : 	}else {
; 3066 : 		TimerField = Arg1 | (Arg2 << 8);

  00000	0d 00 01 00 00	 or	 eax, 256		; 00000100H

; 3067 : 	}
; 3068 : 	if (pPluginName==NULL) {
; 3069 : 		PluginId=0;
; 3070 : 	}else {
; 3071 : 		PluginId=FindPluginID(pPluginName);
; 3072 : 	}
; 3073 : 	if (PluginId == -1) return false;
; 3074 : 	
; 3075 : 	Service(SRV_PERFORM_FLIPEFFECT, PluginId, FlipNumber, TimerField);

  00005	50		 push	 eax
  00006	6a 30		 push	 48			; 00000030H
  00008	6a 00		 push	 0
  0000a	6a 00		 push	 0
  0000c	e8 00 00 00 00	 call	 ?Service@@YAHKZZ	; Service
  00011	83 c4 10	 add	 esp, 16			; 00000010H

; 3076 : 	return true;

  00014	b0 01		 mov	 al, 1

; 3077 : 
; 3078 : }

  00016	c3		 ret	 0
?PerformFlipeffect@@YA_NPADHHH@Z ENDP			; PerformFlipeffect
END
